//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRMS.Service.Models.EDM
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HRMSEntities1 : DbContext
    {
        public HRMSEntities1()
            : base("name=HRMSEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeeDependent> EmployeeDependents { get; set; }
        public virtual DbSet<EmployeeDirectDeposit> EmployeeDirectDeposits { get; set; }
        public virtual DbSet<EmployeeEmergencyContact> EmployeeEmergencyContacts { get; set; }
        public virtual DbSet<EmployeeOSHA> EmployeeOSHAs { get; set; }
        public virtual DbSet<EmployeeTax> EmployeeTaxes { get; set; }
        public virtual DbSet<HireApprovalSetup> HireApprovalSetups { get; set; }
        public virtual DbSet<HireStepMaster> HireStepMasters { get; set; }
        public virtual DbSet<OnBoarding> OnBoardings { get; set; }
        public virtual DbSet<ScreenVerbiage> ScreenVerbiages { get; set; }
        public virtual DbSet<UserConsentDocument> UserConsentDocuments { get; set; }
        public virtual DbSet<WorkAuthorizationDocumentation> WorkAuthorizationDocumentations { get; set; }
        public virtual DbSet<WorkAuthorizationDocumentationType> WorkAuthorizationDocumentationTypes { get; set; }
        public virtual DbSet<FilesDB> FilesDBs { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<ChangeReason> ChangeReasons { get; set; }
        public virtual DbSet<ClaimType> ClaimTypes { get; set; }
        public virtual DbSet<CompensationFrequency> CompensationFrequencies { get; set; }
        public virtual DbSet<CountryRegion> CountryRegions { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DirectDepositAccountType> DirectDepositAccountTypes { get; set; }
        public virtual DbSet<EEOCode> EEOCodes { get; set; }
        public virtual DbSet<EmploymentStatu> EmploymentStatus { get; set; }
        public virtual DbSet<EmploymentType> EmploymentTypes { get; set; }
        public virtual DbSet<Ethnicity> Ethnicities { get; set; }
        public virtual DbSet<FederalBlock> FederalBlocks { get; set; }
        public virtual DbSet<FLSAStatu> FLSAStatus { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GLCode> GLCodes { get; set; }
        public virtual DbSet<I9AcceptableDocuments1> I9AcceptableDocuments1 { get; set; }
        public virtual DbSet<I9AcceptableDocuments2> I9AcceptableDocuments2 { get; set; }
        public virtual DbSet<I9AcceptableDocuments3> I9AcceptableDocuments3 { get; set; }
        public virtual DbSet<InfractionType> InfractionTypes { get; set; }
        public virtual DbSet<JobCostNumber> JobCostNumbers { get; set; }
        public virtual DbSet<LaborLevel5> LaborLevel5 { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<OutCome> OutComes { get; set; }
        public virtual DbSet<PayFrequency> PayFrequencies { get; set; }
        public virtual DbSet<PayGrade> PayGrades { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Relationship> Relationships { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<SchoolBlock> SchoolBlocks { get; set; }
        public virtual DbSet<SchoolDistrict> SchoolDistricts { get; set; }
        public virtual DbSet<ShiftPremium> ShiftPremiums { get; set; }
        public virtual DbSet<SSMedBlock> SSMedBlocks { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<StockOptionType> StockOptionTypes { get; set; }
        public virtual DbSet<Suffix> Suffixes { get; set; }
        public virtual DbSet<SUISDIBlock> SUISDIBlocks { get; set; }
        public virtual DbSet<TaxBlock> TaxBlocks { get; set; }
        public virtual DbSet<TerminationReason> TerminationReasons { get; set; }
        public virtual DbSet<TimeProfile> TimeProfiles { get; set; }
        public virtual DbSet<UnionType> UnionTypes { get; set; }
        public virtual DbSet<WCJobClassCode> WCJobClassCodes { get; set; }
        public virtual DbSet<WCStatu> WCStatus { get; set; }
        public virtual DbSet<WCType> WCTypes { get; set; }
        public virtual DbSet<WithholdingStatu> WithholdingStatus { get; set; }
        public virtual DbSet<WorkersCompCode> WorkersCompCodes { get; set; }
        public virtual DbSet<WorkProfile> WorkProfiles { get; set; }
        public virtual DbSet<AlertSendType> AlertSendTypes { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<AttendanceException> AttendanceExceptions { get; set; }
        public virtual DbSet<ClockData> ClockDatas { get; set; }
        public virtual DbSet<ClockDataAudit> ClockDataAudits { get; set; }
        public virtual DbSet<ClockDeviceAttendanceLog> ClockDeviceAttendanceLogs { get; set; }
        public virtual DbSet<ClockDevice> ClockDevices { get; set; }
        public virtual DbSet<ClockDevicesAssigndEmployee> ClockDevicesAssigndEmployees { get; set; }
        public virtual DbSet<ClockLocation> ClockLocations { get; set; }
        public virtual DbSet<ClockProfile> ClockProfiles { get; set; }
        public virtual DbSet<CompensatoryEmployeeHistory> CompensatoryEmployeeHistories { get; set; }
        public virtual DbSet<CompensatoryTimePlan> CompensatoryTimePlans { get; set; }
        public virtual DbSet<ExpenseEmployee> ExpenseEmployees { get; set; }
        public virtual DbSet<ExpenseReport> ExpenseReports { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<HolidayGroup> HolidayGroups { get; set; }
        public virtual DbSet<HolidayMaster> HolidayMasters { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<ImportMap> ImportMaps { get; set; }
        public virtual DbSet<ImportProfile> ImportProfiles { get; set; }
        public virtual DbSet<ImportTable> ImportTables { get; set; }
        public virtual DbSet<Lunch> Lunches { get; set; }
        public virtual DbSet<PayPeriodHistory> PayPeriodHistories { get; set; }
        public virtual DbSet<PayPeriodHour> PayPeriodHours { get; set; }
        public virtual DbSet<PayPeriodType> PayPeriodTypes { get; set; }
        public virtual DbSet<RateMatrix> RateMatrices { get; set; }
        public virtual DbSet<ReportList> ReportLists { get; set; }
        public virtual DbSet<Rounding> Roundings { get; set; }
        public virtual DbSet<Rule> Rules { get; set; }
        public virtual DbSet<RulesErrorLog> RulesErrorLogs { get; set; }
        public virtual DbSet<ScheduleArchiveEmployee> ScheduleArchiveEmployees { get; set; }
        public virtual DbSet<ScheduleEmployee> ScheduleEmployees { get; set; }
        public virtual DbSet<ScheduleGroup> ScheduleGroups { get; set; }
        public virtual DbSet<TimeOffApproval> TimeOffApprovals { get; set; }
        public virtual DbSet<TimeOffEmployee> TimeOffEmployees { get; set; }
        public virtual DbSet<TimeOffEmployeeHistory> TimeOffEmployeeHistories { get; set; }
        public virtual DbSet<TimeOffMaster> TimeOffMasters { get; set; }
        public virtual DbSet<TimeOffPlan> TimeOffPlans { get; set; }
        public virtual DbSet<TimeOffService> TimeOffServices { get; set; }
        public virtual DbSet<Timesheet> Timesheets { get; set; }
        public virtual DbSet<TimesheetArchive> TimesheetArchives { get; set; }
        public virtual DbSet<TimesheetArchiveShift> TimesheetArchiveShifts { get; set; }
        public virtual DbSet<TimesheetAudit> TimesheetAudits { get; set; }
        public virtual DbSet<TimesheetDetailsCustamization> TimesheetDetailsCustamizations { get; set; }
        public virtual DbSet<TimesheetPolicy> TimesheetPolicies { get; set; }
        public virtual DbSet<TimesheetShift> TimesheetShifts { get; set; }
        public virtual DbSet<Timesheetsubmission> Timesheetsubmissions { get; set; }
        public virtual DbSet<TimesheetType> TimesheetTypes { get; set; }
        public virtual DbSet<TimeType> TimeTypes { get; set; }
        public virtual DbSet<Variable> Variables { get; set; }
        public virtual DbSet<AlertSendCriteria> AlertSendCriterias { get; set; }
        public virtual DbSet<EmployeeSign> EmployeeSigns { get; set; }
        public virtual DbSet<AlertCriteriaSaveLog> AlertCriteriaSaveLogs { get; set; }
        public virtual DbSet<EmployeeNote> EmployeeNotes { get; set; }
        public virtual DbSet<ImportEmployeedata> ImportEmployeedatas { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<EmployeePhoto> EmployeePhotoes { get; set; }
        public virtual DbSet<OTPayType> OTPayTypes { get; set; }
        public virtual DbSet<OTPolicyType> OTPolicyTypes { get; set; }
        public virtual DbSet<OverTimePolicy> OverTimePolicies { get; set; }
        public virtual DbSet<RoundMinute> RoundMinutes { get; set; }
        public virtual DbSet<RoundType> RoundTypes { get; set; }
        public virtual DbSet<EmployeeFolder> EmployeeFolders { get; set; }
        public virtual DbSet<EmployeeAsset> EmployeeAssets { get; set; }
        public virtual DbSet<Competency> Competencies { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
        public virtual DbSet<CertificationLicenseArea> CertificationLicenseAreas { get; set; }
        public virtual DbSet<CertificationLicenseJobAssignment> CertificationLicenseJobAssignments { get; set; }
        public virtual DbSet<CertificationLicenseSchool> CertificationLicenseSchools { get; set; }
        public virtual DbSet<CertificationLicenseType> CertificationLicenseTypes { get; set; }
        public virtual DbSet<ContractStatu> ContractStatus { get; set; }
        public virtual DbSet<DegreeLevel> DegreeLevels { get; set; }
        public virtual DbSet<Endorsement> Endorsements { get; set; }
        public virtual DbSet<Graduated> Graduateds { get; set; }
        public virtual DbSet<HonoraryRecognition> HonoraryRecognitions { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<CompanyDocument> CompanyDocuments { get; set; }
        public virtual DbSet<TalentManagement> TalentManagements { get; set; }
        public virtual DbSet<TrainingEmployeeView> TrainingEmployeeViews { get; set; }
        public virtual DbSet<CertificationLicenseCertification> CertificationLicenseCertifications { get; set; }
        public virtual DbSet<FormLevelSecurity> FormLevelSecurities { get; set; }
        public virtual DbSet<ModuleLevelSecurity> ModuleLevelSecurities { get; set; }
        public virtual DbSet<EmployeeDocument> EmployeeDocuments { get; set; }
        public virtual DbSet<DocumentSendCriteria> DocumentSendCriterias { get; set; }
        public virtual DbSet<DocumentSendType> DocumentSendTypes { get; set; }
        public virtual DbSet<CompanyLink> CompanyLinks { get; set; }
        public virtual DbSet<JobRecruiter> JobRecruiters { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Reviewee> Reviewees { get; set; }
        public virtual DbSet<Reviewer> Reviewers { get; set; }
        public virtual DbSet<ReviewMaster> ReviewMasters { get; set; }
        public virtual DbSet<ReviewSchedule> ReviewSchedules { get; set; }
        public virtual DbSet<CompanyAnnouncement> CompanyAnnouncements { get; set; }
        public virtual DbSet<ReviewCriteria> ReviewCriterias { get; set; }
        public virtual DbSet<ReviewCriteriaCategory> ReviewCriteriaCategories { get; set; }
        public virtual DbSet<ReviewCriteriaType> ReviewCriteriaTypes { get; set; }
        public virtual DbSet<ReviewResponseType> ReviewResponseTypes { get; set; }
        public virtual DbSet<ReviewReviewerCriteria> ReviewReviewerCriterias { get; set; }
        public virtual DbSet<ReviewScore> ReviewScores { get; set; }
        public virtual DbSet<ReviewScoreDescription> ReviewScoreDescriptions { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategories { get; set; }
        public virtual DbSet<DocumentBasicCriteria> DocumentBasicCriterias { get; set; }
        public virtual DbSet<SendingAlertCondition> SendingAlertConditions { get; set; }
        public virtual DbSet<SendingAlertDuration> SendingAlertDurations { get; set; }
        public virtual DbSet<SendingAlertSchedule> SendingAlertSchedules { get; set; }
        public virtual DbSet<SendingAlertTiming> SendingAlertTimings { get; set; }
        public virtual DbSet<SendingAlertVia> SendingAlertVias { get; set; }
        public virtual DbSet<DocumentAdvancedCriteria> DocumentAdvancedCriterias { get; set; }
        public virtual DbSet<PayType> PayType { get; set; }
        public virtual DbSet<PayStatus> PayStatus { get; set; }
        public virtual DbSet<ReviewScoreContent> ReviewScoreContent { get; set; }
        public virtual DbSet<EmployeePay> EmployeePay { get; set; }
        public virtual DbSet<PayPeriods> PayPeriods { get; set; }
        public virtual DbSet<CompensationProfile> CompensationProfile { get; set; }
        public virtual DbSet<WageType> WageType { get; set; }
        public virtual DbSet<WageUnit> WageUnit { get; set; }
        public virtual DbSet<ReviewerEmployee> ReviewerEmployee { get; set; }
        public virtual DbSet<ReviewReviewerScoreDetails> ReviewReviewerScoreDetails { get; set; }
        public virtual DbSet<ReviewReviewer> ReviewReviewer { get; set; }
        public virtual DbSet<ReviewReviewerOtherEmployee> ReviewReviewerOtherEmployee { get; set; }
        public virtual DbSet<AlertTemplate> AlertTemplate { get; set; }
        public virtual DbSet<EmployeeAlert> EmployeeAlert { get; set; }
        public virtual DbSet<TrainingClass> TrainingClass { get; set; }
        public virtual DbSet<TrainingTrack> TrainingTrack { get; set; }
        public virtual DbSet<TrainingTrackClass> TrainingTrackClass { get; set; }
        public virtual DbSet<EmployeeNoConfiguration> EmployeeNoConfiguration { get; set; }
        public virtual DbSet<TrainingClassSchedule> TrainingClassSchedule { get; set; }
        public virtual DbSet<TrainingClassScheduleDate> TrainingClassScheduleDate { get; set; }
        public virtual DbSet<EmployeeFilterCriteria> EmployeeFilterCriteria { get; set; }
        public virtual DbSet<TrainingClassResource> TrainingClassResource { get; set; }
        public virtual DbSet<CompanyLevelSecurity> CompanyLevelSecurity { get; set; }
        public virtual DbSet<ActivityLog> ActivityLog { get; set; }
        public virtual DbSet<ManageSecurityCriteria> ManageSecurityCriteria { get; set; }
        public virtual DbSet<SecurityRole> SecurityRole { get; set; }
        public virtual DbSet<RegisteredUsers> RegisteredUsers { get; set; }
        public virtual DbSet<HireConfigurationSetup> HireConfigurationSetup { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<UserCompany> UserCompany { get; set; }
        public virtual DbSet<EmployeeLevelSecurity> EmployeeLevelSecurity { get; set; }
        public virtual DbSet<Essential> Essential { get; set; }
        public virtual DbSet<Frequency> Frequency { get; set; }
        public virtual DbSet<Other> Other { get; set; }
        public virtual DbSet<Priority> Priority { get; set; }
        public virtual DbSet<CompanyLevelSaveLog> CompanyLevelSaveLog { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLog { get; set; }
        public virtual DbSet<JobQualificationType> JobQualificationType { get; set; }
        public virtual DbSet<WorkAuthorization> WorkAuthorization { get; set; }
        public virtual DbSet<EmployeeW4Form> EmployeeW4Form { get; set; }
        public virtual DbSet<RecruitingAnswers> RecruitingAnswers { get; set; }
        public virtual DbSet<Interview> Interview { get; set; }
        public virtual DbSet<ApplicantAchievementsAndAssociations> ApplicantAchievementsAndAssociations { get; set; }
        public virtual DbSet<ApplicantEducation> ApplicantEducation { get; set; }
        public virtual DbSet<ApplicantEmploymentHistory> ApplicantEmploymentHistory { get; set; }
        public virtual DbSet<JobInterviewers> JobInterviewers { get; set; }
        public virtual DbSet<JobApplicant> JobApplicant { get; set; }
        public virtual DbSet<ConsentForms> ConsentForms { get; set; }
        public virtual DbSet<JobApplied> JobApplied { get; set; }
        public virtual DbSet<JobDuties> JobDuties { get; set; }
        public virtual DbSet<JobPME> JobPME { get; set; }
        public virtual DbSet<JobProfile> JobProfile { get; set; }
        public virtual DbSet<JobQualification> JobQualification { get; set; }
        public virtual DbSet<ApplicantInterview> ApplicantInterview { get; set; }
        public virtual DbSet<RecruitingQuestions> RecruitingQuestions { get; set; }
        public virtual DbSet<CandidateHiringComments> CandidateHiringComments { get; set; }
        public virtual DbSet<CertificationandLicense> CertificationandLicense { get; set; }
        public virtual DbSet<CandidateOfferLetter> CandidateOfferLetter { get; set; }
        public virtual DbSet<MailingInfo> MailingInfo { get; set; }
        public virtual DbSet<EmployeeGoalRemainder> EmployeeGoalRemainder { get; set; }
        public virtual DbSet<GoalRecurrence> GoalRecurrence { get; set; }
        public virtual DbSet<NTFGoal> NTFGoal { get; set; }
        public virtual DbSet<EmployeeGoal> EmployeeGoal { get; set; }
        public virtual DbSet<HTABLES> HTABLES { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_CreateInitialSetupforCompany(Nullable<int> companyID, ObjectParameter errorCode)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateInitialSetupforCompany", companyIDParameter, errorCode);
        }
    
        public virtual ObjectResult<I9Form_SelectDocumentTileByCompanyID_Result> I9Form_SelectDocumentTileByCompanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<I9Form_SelectDocumentTileByCompanyID_Result>("I9Form_SelectDocumentTileByCompanyID", companyIDParameter);
        }
    
        public virtual int InsertUpdateWorkAuthorizationFormI9Employee(Nullable<int> arg_UserId, Nullable<int> arg_CompanyId, string arg_TransactionId, Nullable<System.DateTime> arg_SignatureDate, string arg_IPAddress, Nullable<System.DateTime> arg_EmploymentOn, Nullable<int> arg_CitizenOfUS, string arg_AlienNumber, Nullable<System.DateTime> arg_PermanetResidentExpire, Nullable<int> arg_AlienCitizenof, Nullable<System.DateTime> arg_AlienAuthorisedDate, Nullable<int> arg_AlienAutharisedCitizenof, Nullable<bool> arg_FederalLaw, Nullable<bool> arg_IsSSN, Nullable<bool> arg_IsEmployeeSign, string arg_AlienRegistrationNumber, string arg_AdmissionNumber, string arg_PassportNumber, Nullable<int> arg_Countryof, Nullable<int> arg_CreatedBy)
        {
            var arg_UserIdParameter = arg_UserId.HasValue ?
                new ObjectParameter("arg_UserId", arg_UserId) :
                new ObjectParameter("arg_UserId", typeof(int));
    
            var arg_CompanyIdParameter = arg_CompanyId.HasValue ?
                new ObjectParameter("arg_CompanyId", arg_CompanyId) :
                new ObjectParameter("arg_CompanyId", typeof(int));
    
            var arg_TransactionIdParameter = arg_TransactionId != null ?
                new ObjectParameter("arg_TransactionId", arg_TransactionId) :
                new ObjectParameter("arg_TransactionId", typeof(string));
    
            var arg_SignatureDateParameter = arg_SignatureDate.HasValue ?
                new ObjectParameter("arg_SignatureDate", arg_SignatureDate) :
                new ObjectParameter("arg_SignatureDate", typeof(System.DateTime));
    
            var arg_IPAddressParameter = arg_IPAddress != null ?
                new ObjectParameter("arg_IPAddress", arg_IPAddress) :
                new ObjectParameter("arg_IPAddress", typeof(string));
    
            var arg_EmploymentOnParameter = arg_EmploymentOn.HasValue ?
                new ObjectParameter("arg_EmploymentOn", arg_EmploymentOn) :
                new ObjectParameter("arg_EmploymentOn", typeof(System.DateTime));
    
            var arg_CitizenOfUSParameter = arg_CitizenOfUS.HasValue ?
                new ObjectParameter("arg_CitizenOfUS", arg_CitizenOfUS) :
                new ObjectParameter("arg_CitizenOfUS", typeof(int));
    
            var arg_AlienNumberParameter = arg_AlienNumber != null ?
                new ObjectParameter("arg_AlienNumber", arg_AlienNumber) :
                new ObjectParameter("arg_AlienNumber", typeof(string));
    
            var arg_PermanetResidentExpireParameter = arg_PermanetResidentExpire.HasValue ?
                new ObjectParameter("arg_PermanetResidentExpire", arg_PermanetResidentExpire) :
                new ObjectParameter("arg_PermanetResidentExpire", typeof(System.DateTime));
    
            var arg_AlienCitizenofParameter = arg_AlienCitizenof.HasValue ?
                new ObjectParameter("arg_AlienCitizenof", arg_AlienCitizenof) :
                new ObjectParameter("arg_AlienCitizenof", typeof(int));
    
            var arg_AlienAuthorisedDateParameter = arg_AlienAuthorisedDate.HasValue ?
                new ObjectParameter("arg_AlienAuthorisedDate", arg_AlienAuthorisedDate) :
                new ObjectParameter("arg_AlienAuthorisedDate", typeof(System.DateTime));
    
            var arg_AlienAutharisedCitizenofParameter = arg_AlienAutharisedCitizenof.HasValue ?
                new ObjectParameter("arg_AlienAutharisedCitizenof", arg_AlienAutharisedCitizenof) :
                new ObjectParameter("arg_AlienAutharisedCitizenof", typeof(int));
    
            var arg_FederalLawParameter = arg_FederalLaw.HasValue ?
                new ObjectParameter("arg_FederalLaw", arg_FederalLaw) :
                new ObjectParameter("arg_FederalLaw", typeof(bool));
    
            var arg_IsSSNParameter = arg_IsSSN.HasValue ?
                new ObjectParameter("arg_IsSSN", arg_IsSSN) :
                new ObjectParameter("arg_IsSSN", typeof(bool));
    
            var arg_IsEmployeeSignParameter = arg_IsEmployeeSign.HasValue ?
                new ObjectParameter("arg_IsEmployeeSign", arg_IsEmployeeSign) :
                new ObjectParameter("arg_IsEmployeeSign", typeof(bool));
    
            var arg_AlienRegistrationNumberParameter = arg_AlienRegistrationNumber != null ?
                new ObjectParameter("arg_AlienRegistrationNumber", arg_AlienRegistrationNumber) :
                new ObjectParameter("arg_AlienRegistrationNumber", typeof(string));
    
            var arg_AdmissionNumberParameter = arg_AdmissionNumber != null ?
                new ObjectParameter("arg_AdmissionNumber", arg_AdmissionNumber) :
                new ObjectParameter("arg_AdmissionNumber", typeof(string));
    
            var arg_PassportNumberParameter = arg_PassportNumber != null ?
                new ObjectParameter("arg_PassportNumber", arg_PassportNumber) :
                new ObjectParameter("arg_PassportNumber", typeof(string));
    
            var arg_CountryofParameter = arg_Countryof.HasValue ?
                new ObjectParameter("arg_Countryof", arg_Countryof) :
                new ObjectParameter("arg_Countryof", typeof(int));
    
            var arg_CreatedByParameter = arg_CreatedBy.HasValue ?
                new ObjectParameter("arg_CreatedBy", arg_CreatedBy) :
                new ObjectParameter("arg_CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateWorkAuthorizationFormI9Employee", arg_UserIdParameter, arg_CompanyIdParameter, arg_TransactionIdParameter, arg_SignatureDateParameter, arg_IPAddressParameter, arg_EmploymentOnParameter, arg_CitizenOfUSParameter, arg_AlienNumberParameter, arg_PermanetResidentExpireParameter, arg_AlienCitizenofParameter, arg_AlienAuthorisedDateParameter, arg_AlienAutharisedCitizenofParameter, arg_FederalLawParameter, arg_IsSSNParameter, arg_IsEmployeeSignParameter, arg_AlienRegistrationNumberParameter, arg_AdmissionNumberParameter, arg_PassportNumberParameter, arg_CountryofParameter, arg_CreatedByParameter);
        }
    
        public virtual int usp_BudgetDetailDelete(Nullable<int> budgetId, Nullable<int> companyId)
        {
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BudgetDetailDelete", budgetIdParameter, companyIdParameter);
        }
    
        public virtual int usp_BudgetDetailInsert(Nullable<int> companyId, string title, string headCountPlan, Nullable<int> createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var headCountPlanParameter = headCountPlan != null ?
                new ObjectParameter("HeadCountPlan", headCountPlan) :
                new ObjectParameter("HeadCountPlan", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BudgetDetailInsert", companyIdParameter, titleParameter, headCountPlanParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_BudgetDetailSelect_Result> usp_BudgetDetailSelect(Nullable<int> budgetId, Nullable<int> companyId)
        {
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BudgetDetailSelect_Result>("usp_BudgetDetailSelect", budgetIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_BudgetDetailSelectAll_Result> usp_BudgetDetailSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BudgetDetailSelectAll_Result>("usp_BudgetDetailSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_BudgetDetailUpdate_Result> usp_BudgetDetailUpdate(Nullable<int> budgetId, Nullable<int> companyId, string title, string headCountPlan, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var headCountPlanParameter = headCountPlan != null ?
                new ObjectParameter("HeadCountPlan", headCountPlan) :
                new ObjectParameter("HeadCountPlan", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BudgetDetailUpdate_Result>("usp_BudgetDetailUpdate", budgetIdParameter, companyIdParameter, titleParameter, headCountPlanParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_CompensationPlanDelete(Nullable<int> compensationID, Nullable<int> companyId)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompensationPlanDelete", compensationIDParameter, companyIdParameter);
        }
    
        public virtual int usp_CompensationPlanInsert(Nullable<int> companyId, string planDescription, string location, Nullable<int> payRange, Nullable<int> payRangeTo, Nullable<int> payRangePer, Nullable<int> variablePay, Nullable<int> variablePayTo, Nullable<int> variablePayPer, Nullable<int> hoursPerWeek, Nullable<int> benfitClass, Nullable<bool> exempt, Nullable<int> createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var planDescriptionParameter = planDescription != null ?
                new ObjectParameter("PlanDescription", planDescription) :
                new ObjectParameter("PlanDescription", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var payRangeParameter = payRange.HasValue ?
                new ObjectParameter("PayRange", payRange) :
                new ObjectParameter("PayRange", typeof(int));
    
            var payRangeToParameter = payRangeTo.HasValue ?
                new ObjectParameter("PayRangeTo", payRangeTo) :
                new ObjectParameter("PayRangeTo", typeof(int));
    
            var payRangePerParameter = payRangePer.HasValue ?
                new ObjectParameter("PayRangePer", payRangePer) :
                new ObjectParameter("PayRangePer", typeof(int));
    
            var variablePayParameter = variablePay.HasValue ?
                new ObjectParameter("VariablePay", variablePay) :
                new ObjectParameter("VariablePay", typeof(int));
    
            var variablePayToParameter = variablePayTo.HasValue ?
                new ObjectParameter("VariablePayTo", variablePayTo) :
                new ObjectParameter("VariablePayTo", typeof(int));
    
            var variablePayPerParameter = variablePayPer.HasValue ?
                new ObjectParameter("VariablePayPer", variablePayPer) :
                new ObjectParameter("VariablePayPer", typeof(int));
    
            var hoursPerWeekParameter = hoursPerWeek.HasValue ?
                new ObjectParameter("HoursPerWeek", hoursPerWeek) :
                new ObjectParameter("HoursPerWeek", typeof(int));
    
            var benfitClassParameter = benfitClass.HasValue ?
                new ObjectParameter("BenfitClass", benfitClass) :
                new ObjectParameter("BenfitClass", typeof(int));
    
            var exemptParameter = exempt.HasValue ?
                new ObjectParameter("Exempt", exempt) :
                new ObjectParameter("Exempt", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompensationPlanInsert", companyIdParameter, planDescriptionParameter, locationParameter, payRangeParameter, payRangeToParameter, payRangePerParameter, variablePayParameter, variablePayToParameter, variablePayPerParameter, hoursPerWeekParameter, benfitClassParameter, exemptParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_CompensationPlanSelect_Result> usp_CompensationPlanSelect(Nullable<int> compensationID, Nullable<int> companyId)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompensationPlanSelect_Result>("usp_CompensationPlanSelect", compensationIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompensationPlanSelectAll_Result> usp_CompensationPlanSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompensationPlanSelectAll_Result>("usp_CompensationPlanSelectAll", companyIdParameter);
        }
    
        public virtual int usp_CompensationPlanUpdate(Nullable<int> compensationID, Nullable<int> companyID, string planDescription, string location, Nullable<int> payRange, Nullable<int> payRangeTo, Nullable<int> payRangePer, Nullable<int> variablePay, Nullable<int> variablePayTo, Nullable<int> variablePayPer, Nullable<int> hoursPerWeek, Nullable<int> benfitClass, Nullable<bool> exempt, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var planDescriptionParameter = planDescription != null ?
                new ObjectParameter("PlanDescription", planDescription) :
                new ObjectParameter("PlanDescription", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var payRangeParameter = payRange.HasValue ?
                new ObjectParameter("PayRange", payRange) :
                new ObjectParameter("PayRange", typeof(int));
    
            var payRangeToParameter = payRangeTo.HasValue ?
                new ObjectParameter("PayRangeTo", payRangeTo) :
                new ObjectParameter("PayRangeTo", typeof(int));
    
            var payRangePerParameter = payRangePer.HasValue ?
                new ObjectParameter("PayRangePer", payRangePer) :
                new ObjectParameter("PayRangePer", typeof(int));
    
            var variablePayParameter = variablePay.HasValue ?
                new ObjectParameter("VariablePay", variablePay) :
                new ObjectParameter("VariablePay", typeof(int));
    
            var variablePayToParameter = variablePayTo.HasValue ?
                new ObjectParameter("VariablePayTo", variablePayTo) :
                new ObjectParameter("VariablePayTo", typeof(int));
    
            var variablePayPerParameter = variablePayPer.HasValue ?
                new ObjectParameter("VariablePayPer", variablePayPer) :
                new ObjectParameter("VariablePayPer", typeof(int));
    
            var hoursPerWeekParameter = hoursPerWeek.HasValue ?
                new ObjectParameter("HoursPerWeek", hoursPerWeek) :
                new ObjectParameter("HoursPerWeek", typeof(int));
    
            var benfitClassParameter = benfitClass.HasValue ?
                new ObjectParameter("BenfitClass", benfitClass) :
                new ObjectParameter("BenfitClass", typeof(int));
    
            var exemptParameter = exempt.HasValue ?
                new ObjectParameter("Exempt", exempt) :
                new ObjectParameter("Exempt", typeof(bool));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompensationPlanUpdate", compensationIDParameter, companyIDParameter, planDescriptionParameter, locationParameter, payRangeParameter, payRangeToParameter, payRangePerParameter, variablePayParameter, variablePayToParameter, variablePayPerParameter, hoursPerWeekParameter, benfitClassParameter, exemptParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_ComplianceCodeDelete(Nullable<int> complainceID, Nullable<int> companyId)
        {
            var complainceIDParameter = complainceID.HasValue ?
                new ObjectParameter("ComplainceID", complainceID) :
                new ObjectParameter("ComplainceID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ComplianceCodeDelete", complainceIDParameter, companyIdParameter);
        }
    
        public virtual int usp_ComplianceCodeInsert(Nullable<int> complainceID, Nullable<int> companyId, string description, string type, string code, Nullable<int> createdBy)
        {
            var complainceIDParameter = complainceID.HasValue ?
                new ObjectParameter("ComplainceID", complainceID) :
                new ObjectParameter("ComplainceID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ComplianceCodeInsert", complainceIDParameter, companyIdParameter, descriptionParameter, typeParameter, codeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_ComplianceCodeSelect_Result> usp_ComplianceCodeSelect(Nullable<int> complainceID, Nullable<int> companyId)
        {
            var complainceIDParameter = complainceID.HasValue ?
                new ObjectParameter("ComplainceID", complainceID) :
                new ObjectParameter("ComplainceID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplianceCodeSelect_Result>("usp_ComplianceCodeSelect", complainceIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ComplianceCodeSelectAll_Result> usp_ComplianceCodeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplianceCodeSelectAll_Result>("usp_ComplianceCodeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_ComplianceCodeUpdate(Nullable<int> complainceID, Nullable<int> companyId, string type, string code, string description, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var complainceIDParameter = complainceID.HasValue ?
                new ObjectParameter("ComplainceID", complainceID) :
                new ObjectParameter("ComplainceID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ComplianceCodeUpdate", complainceIDParameter, companyIdParameter, typeParameter, codeParameter, descriptionParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_ConsentFormsDelete(Nullable<int> consentFormId, Nullable<int> userId, Nullable<int> companyId)
        {
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ConsentFormsDelete", consentFormIdParameter, userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_DivisionDetailInsert(Nullable<int> divisionID, Nullable<int> companyID, string divisionName, string companyCode, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DivisionDetailInsert", divisionIDParameter, companyIDParameter, divisionNameParameter, companyCodeParameter, createdOnParameter, modifiedOnParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeInsertORUpdate_Result> usp_EmployeeInsertORUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> changeReason, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> originalHireDate, Nullable<System.DateTime> terminationDate, Nullable<int> terminationReason, Nullable<System.DateTime> startDate, Nullable<System.DateTime> seniorityDate, Nullable<System.DateTime> lastPaidDate, Nullable<System.DateTime> lastPayRise, Nullable<System.DateTime> lastPromotionDate, Nullable<System.DateTime> lastReviewDate, Nullable<System.DateTime> nextReviewDate, Nullable<System.DateTime> newHireReportDate, Nullable<int> employmentStatus, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> payGroup, Nullable<int> locationId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> managerId, Nullable<int> employmentType, Nullable<int> complianceCode, Nullable<int> benefitClass, Nullable<int> fLSAStatus, Nullable<int> union, string districtCode, string checkDistribution, Nullable<bool> directDepositEmail, Nullable<bool> okToRehire, Nullable<int> wCJobClassCode, Nullable<int> wCStatus, Nullable<int> wCType, string workPhone, string workEmail, string salutation, string firstName, string middleName, string lastName, string suffix, string email, string address1, string address2, string city, string zIP, Nullable<int> countryId, Nullable<int> stateId, string sSN, string homePhone, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> maritalStatus, string homeEmail, ObjectParameter errorCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var changeReasonParameter = changeReason.HasValue ?
                new ObjectParameter("ChangeReason", changeReason) :
                new ObjectParameter("ChangeReason", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var originalHireDateParameter = originalHireDate.HasValue ?
                new ObjectParameter("OriginalHireDate", originalHireDate) :
                new ObjectParameter("OriginalHireDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var terminationReasonParameter = terminationReason.HasValue ?
                new ObjectParameter("TerminationReason", terminationReason) :
                new ObjectParameter("TerminationReason", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var seniorityDateParameter = seniorityDate.HasValue ?
                new ObjectParameter("SeniorityDate", seniorityDate) :
                new ObjectParameter("SeniorityDate", typeof(System.DateTime));
    
            var lastPaidDateParameter = lastPaidDate.HasValue ?
                new ObjectParameter("LastPaidDate", lastPaidDate) :
                new ObjectParameter("LastPaidDate", typeof(System.DateTime));
    
            var lastPayRiseParameter = lastPayRise.HasValue ?
                new ObjectParameter("LastPayRise", lastPayRise) :
                new ObjectParameter("LastPayRise", typeof(System.DateTime));
    
            var lastPromotionDateParameter = lastPromotionDate.HasValue ?
                new ObjectParameter("LastPromotionDate", lastPromotionDate) :
                new ObjectParameter("LastPromotionDate", typeof(System.DateTime));
    
            var lastReviewDateParameter = lastReviewDate.HasValue ?
                new ObjectParameter("LastReviewDate", lastReviewDate) :
                new ObjectParameter("LastReviewDate", typeof(System.DateTime));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var newHireReportDateParameter = newHireReportDate.HasValue ?
                new ObjectParameter("NewHireReportDate", newHireReportDate) :
                new ObjectParameter("NewHireReportDate", typeof(System.DateTime));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var payGroupParameter = payGroup.HasValue ?
                new ObjectParameter("PayGroup", payGroup) :
                new ObjectParameter("PayGroup", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var employmentTypeParameter = employmentType.HasValue ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(int));
    
            var complianceCodeParameter = complianceCode.HasValue ?
                new ObjectParameter("ComplianceCode", complianceCode) :
                new ObjectParameter("ComplianceCode", typeof(int));
    
            var benefitClassParameter = benefitClass.HasValue ?
                new ObjectParameter("BenefitClass", benefitClass) :
                new ObjectParameter("BenefitClass", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var unionParameter = union.HasValue ?
                new ObjectParameter("Union", union) :
                new ObjectParameter("Union", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var checkDistributionParameter = checkDistribution != null ?
                new ObjectParameter("CheckDistribution", checkDistribution) :
                new ObjectParameter("CheckDistribution", typeof(string));
    
            var directDepositEmailParameter = directDepositEmail.HasValue ?
                new ObjectParameter("DirectDepositEmail", directDepositEmail) :
                new ObjectParameter("DirectDepositEmail", typeof(bool));
    
            var okToRehireParameter = okToRehire.HasValue ?
                new ObjectParameter("OkToRehire", okToRehire) :
                new ObjectParameter("OkToRehire", typeof(bool));
    
            var wCJobClassCodeParameter = wCJobClassCode.HasValue ?
                new ObjectParameter("WCJobClassCode", wCJobClassCode) :
                new ObjectParameter("WCJobClassCode", typeof(int));
    
            var wCStatusParameter = wCStatus.HasValue ?
                new ObjectParameter("WCStatus", wCStatus) :
                new ObjectParameter("WCStatus", typeof(int));
    
            var wCTypeParameter = wCType.HasValue ?
                new ObjectParameter("WCType", wCType) :
                new ObjectParameter("WCType", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeInsertORUpdate_Result>("usp_EmployeeInsertORUpdate", userIdParameter, companyIdParameter, changeReasonParameter, hireDateParameter, originalHireDateParameter, terminationDateParameter, terminationReasonParameter, startDateParameter, seniorityDateParameter, lastPaidDateParameter, lastPayRiseParameter, lastPromotionDateParameter, lastReviewDateParameter, nextReviewDateParameter, newHireReportDateParameter, employmentStatusParameter, jobProfileIdParameter, positionIdParameter, payGroupParameter, locationIdParameter, divisionIdParameter, departmentIdParameter, managerIdParameter, employmentTypeParameter, complianceCodeParameter, benefitClassParameter, fLSAStatusParameter, unionParameter, districtCodeParameter, checkDistributionParameter, directDepositEmailParameter, okToRehireParameter, wCJobClassCodeParameter, wCStatusParameter, wCTypeParameter, workPhoneParameter, workEmailParameter, salutationParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIdParameter, stateIdParameter, sSNParameter, homePhoneParameter, birthDateParameter, genderParameter, maritalStatusParameter, homeEmailParameter, errorCode);
        }
    
        public virtual int usp_EmploymentDetailDelete(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmploymentDetailDelete", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_EmploymentDetailInsert(Nullable<int> userID, Nullable<int> companyID, Nullable<int> changeReason, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> originalHireDate, Nullable<System.DateTime> terminationDate, string terminationReason, Nullable<System.DateTime> startDate, Nullable<System.DateTime> seniorityDate, Nullable<System.DateTime> lastPaidDate, Nullable<System.DateTime> lastPayRise, Nullable<System.DateTime> lastPromotionDate, Nullable<System.DateTime> lastReviewDate, Nullable<System.DateTime> nextReviewDate, Nullable<System.DateTime> newHireReportDate, Nullable<int> employmentStatus, Nullable<int> jobProfileID, Nullable<int> positionID, Nullable<int> payGroup, Nullable<int> locationID, Nullable<int> divisionID, Nullable<int> departmentID, Nullable<int> managerID, Nullable<int> employmentType, Nullable<int> complianceCode, Nullable<int> benefitClass, Nullable<int> fLSAStatus, Nullable<int> union, string districtCode, string checkDistribution, Nullable<bool> directDepositEmail, Nullable<bool> okToRehire, Nullable<int> wCJobClassCode, Nullable<int> wCStatus, Nullable<int> wCType, string workPhone, string workEmail, ObjectParameter errorCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var changeReasonParameter = changeReason.HasValue ?
                new ObjectParameter("ChangeReason", changeReason) :
                new ObjectParameter("ChangeReason", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var originalHireDateParameter = originalHireDate.HasValue ?
                new ObjectParameter("OriginalHireDate", originalHireDate) :
                new ObjectParameter("OriginalHireDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var terminationReasonParameter = terminationReason != null ?
                new ObjectParameter("TerminationReason", terminationReason) :
                new ObjectParameter("TerminationReason", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var seniorityDateParameter = seniorityDate.HasValue ?
                new ObjectParameter("SeniorityDate", seniorityDate) :
                new ObjectParameter("SeniorityDate", typeof(System.DateTime));
    
            var lastPaidDateParameter = lastPaidDate.HasValue ?
                new ObjectParameter("LastPaidDate", lastPaidDate) :
                new ObjectParameter("LastPaidDate", typeof(System.DateTime));
    
            var lastPayRiseParameter = lastPayRise.HasValue ?
                new ObjectParameter("LastPayRise", lastPayRise) :
                new ObjectParameter("LastPayRise", typeof(System.DateTime));
    
            var lastPromotionDateParameter = lastPromotionDate.HasValue ?
                new ObjectParameter("LastPromotionDate", lastPromotionDate) :
                new ObjectParameter("LastPromotionDate", typeof(System.DateTime));
    
            var lastReviewDateParameter = lastReviewDate.HasValue ?
                new ObjectParameter("LastReviewDate", lastReviewDate) :
                new ObjectParameter("LastReviewDate", typeof(System.DateTime));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var newHireReportDateParameter = newHireReportDate.HasValue ?
                new ObjectParameter("NewHireReportDate", newHireReportDate) :
                new ObjectParameter("NewHireReportDate", typeof(System.DateTime));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var payGroupParameter = payGroup.HasValue ?
                new ObjectParameter("PayGroup", payGroup) :
                new ObjectParameter("PayGroup", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var employmentTypeParameter = employmentType.HasValue ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(int));
    
            var complianceCodeParameter = complianceCode.HasValue ?
                new ObjectParameter("ComplianceCode", complianceCode) :
                new ObjectParameter("ComplianceCode", typeof(int));
    
            var benefitClassParameter = benefitClass.HasValue ?
                new ObjectParameter("BenefitClass", benefitClass) :
                new ObjectParameter("BenefitClass", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var unionParameter = union.HasValue ?
                new ObjectParameter("Union", union) :
                new ObjectParameter("Union", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var checkDistributionParameter = checkDistribution != null ?
                new ObjectParameter("CheckDistribution", checkDistribution) :
                new ObjectParameter("CheckDistribution", typeof(string));
    
            var directDepositEmailParameter = directDepositEmail.HasValue ?
                new ObjectParameter("DirectDepositEmail", directDepositEmail) :
                new ObjectParameter("DirectDepositEmail", typeof(bool));
    
            var okToRehireParameter = okToRehire.HasValue ?
                new ObjectParameter("OkToRehire", okToRehire) :
                new ObjectParameter("OkToRehire", typeof(bool));
    
            var wCJobClassCodeParameter = wCJobClassCode.HasValue ?
                new ObjectParameter("WCJobClassCode", wCJobClassCode) :
                new ObjectParameter("WCJobClassCode", typeof(int));
    
            var wCStatusParameter = wCStatus.HasValue ?
                new ObjectParameter("WCStatus", wCStatus) :
                new ObjectParameter("WCStatus", typeof(int));
    
            var wCTypeParameter = wCType.HasValue ?
                new ObjectParameter("WCType", wCType) :
                new ObjectParameter("WCType", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmploymentDetailInsert", userIDParameter, companyIDParameter, changeReasonParameter, hireDateParameter, originalHireDateParameter, terminationDateParameter, terminationReasonParameter, startDateParameter, seniorityDateParameter, lastPaidDateParameter, lastPayRiseParameter, lastPromotionDateParameter, lastReviewDateParameter, nextReviewDateParameter, newHireReportDateParameter, employmentStatusParameter, jobProfileIDParameter, positionIDParameter, payGroupParameter, locationIDParameter, divisionIDParameter, departmentIDParameter, managerIDParameter, employmentTypeParameter, complianceCodeParameter, benefitClassParameter, fLSAStatusParameter, unionParameter, districtCodeParameter, checkDistributionParameter, directDepositEmailParameter, okToRehireParameter, wCJobClassCodeParameter, wCStatusParameter, wCTypeParameter, workPhoneParameter, workEmailParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_EmploymentDetailInsertORUpdate_Result> usp_EmploymentDetailInsertORUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> changeReason, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> originalHireDate, Nullable<System.DateTime> terminationDate, string terminationReason, Nullable<System.DateTime> startDate, Nullable<System.DateTime> seniorityDate, Nullable<System.DateTime> lastPaidDate, Nullable<System.DateTime> lastPayRise, Nullable<System.DateTime> lastPromotionDate, Nullable<System.DateTime> lastReviewDate, Nullable<System.DateTime> nextReviewDate, Nullable<System.DateTime> newHireReportDate, Nullable<int> employmentStatus, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> payGroup, Nullable<int> locationId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> managerID, Nullable<int> employmentType, Nullable<int> complianceCode, Nullable<int> benefitClass, Nullable<int> fLSAStatus, Nullable<int> union, string districtCode, string checkDistribution, Nullable<bool> directDepositEmail, Nullable<bool> okToRehire, Nullable<int> wCJobClassCode, Nullable<int> wCStatus, Nullable<int> wCType, string workPhone, string workEmail, string salutation, string fName, string mName, string lName, string suffix, string email, string address1, string address2, string city, string zIP, Nullable<int> countryId, Nullable<int> stateId, string sSN, string homePhone, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> maritalStatus, string homeEmail, ObjectParameter errorCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var changeReasonParameter = changeReason.HasValue ?
                new ObjectParameter("ChangeReason", changeReason) :
                new ObjectParameter("ChangeReason", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var originalHireDateParameter = originalHireDate.HasValue ?
                new ObjectParameter("OriginalHireDate", originalHireDate) :
                new ObjectParameter("OriginalHireDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var terminationReasonParameter = terminationReason != null ?
                new ObjectParameter("TerminationReason", terminationReason) :
                new ObjectParameter("TerminationReason", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var seniorityDateParameter = seniorityDate.HasValue ?
                new ObjectParameter("SeniorityDate", seniorityDate) :
                new ObjectParameter("SeniorityDate", typeof(System.DateTime));
    
            var lastPaidDateParameter = lastPaidDate.HasValue ?
                new ObjectParameter("LastPaidDate", lastPaidDate) :
                new ObjectParameter("LastPaidDate", typeof(System.DateTime));
    
            var lastPayRiseParameter = lastPayRise.HasValue ?
                new ObjectParameter("LastPayRise", lastPayRise) :
                new ObjectParameter("LastPayRise", typeof(System.DateTime));
    
            var lastPromotionDateParameter = lastPromotionDate.HasValue ?
                new ObjectParameter("LastPromotionDate", lastPromotionDate) :
                new ObjectParameter("LastPromotionDate", typeof(System.DateTime));
    
            var lastReviewDateParameter = lastReviewDate.HasValue ?
                new ObjectParameter("LastReviewDate", lastReviewDate) :
                new ObjectParameter("LastReviewDate", typeof(System.DateTime));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var newHireReportDateParameter = newHireReportDate.HasValue ?
                new ObjectParameter("NewHireReportDate", newHireReportDate) :
                new ObjectParameter("NewHireReportDate", typeof(System.DateTime));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var payGroupParameter = payGroup.HasValue ?
                new ObjectParameter("PayGroup", payGroup) :
                new ObjectParameter("PayGroup", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var employmentTypeParameter = employmentType.HasValue ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(int));
    
            var complianceCodeParameter = complianceCode.HasValue ?
                new ObjectParameter("ComplianceCode", complianceCode) :
                new ObjectParameter("ComplianceCode", typeof(int));
    
            var benefitClassParameter = benefitClass.HasValue ?
                new ObjectParameter("BenefitClass", benefitClass) :
                new ObjectParameter("BenefitClass", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var unionParameter = union.HasValue ?
                new ObjectParameter("Union", union) :
                new ObjectParameter("Union", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var checkDistributionParameter = checkDistribution != null ?
                new ObjectParameter("CheckDistribution", checkDistribution) :
                new ObjectParameter("CheckDistribution", typeof(string));
    
            var directDepositEmailParameter = directDepositEmail.HasValue ?
                new ObjectParameter("DirectDepositEmail", directDepositEmail) :
                new ObjectParameter("DirectDepositEmail", typeof(bool));
    
            var okToRehireParameter = okToRehire.HasValue ?
                new ObjectParameter("OkToRehire", okToRehire) :
                new ObjectParameter("OkToRehire", typeof(bool));
    
            var wCJobClassCodeParameter = wCJobClassCode.HasValue ?
                new ObjectParameter("WCJobClassCode", wCJobClassCode) :
                new ObjectParameter("WCJobClassCode", typeof(int));
    
            var wCStatusParameter = wCStatus.HasValue ?
                new ObjectParameter("WCStatus", wCStatus) :
                new ObjectParameter("WCStatus", typeof(int));
    
            var wCTypeParameter = wCType.HasValue ?
                new ObjectParameter("WCType", wCType) :
                new ObjectParameter("WCType", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmploymentDetailInsertORUpdate_Result>("usp_EmploymentDetailInsertORUpdate", userIdParameter, companyIdParameter, changeReasonParameter, hireDateParameter, originalHireDateParameter, terminationDateParameter, terminationReasonParameter, startDateParameter, seniorityDateParameter, lastPaidDateParameter, lastPayRiseParameter, lastPromotionDateParameter, lastReviewDateParameter, nextReviewDateParameter, newHireReportDateParameter, employmentStatusParameter, jobProfileIdParameter, positionIdParameter, payGroupParameter, locationIdParameter, divisionIdParameter, departmentIdParameter, managerIDParameter, employmentTypeParameter, complianceCodeParameter, benefitClassParameter, fLSAStatusParameter, unionParameter, districtCodeParameter, checkDistributionParameter, directDepositEmailParameter, okToRehireParameter, wCJobClassCodeParameter, wCStatusParameter, wCTypeParameter, workPhoneParameter, workEmailParameter, salutationParameter, fNameParameter, mNameParameter, lNameParameter, suffixParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIdParameter, stateIdParameter, sSNParameter, homePhoneParameter, birthDateParameter, genderParameter, maritalStatusParameter, homeEmailParameter, errorCode);
        }
    
        public virtual int usp_EmploymentDetailSelect(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmploymentDetailSelect", userIDParameter, companyIDParameter);
        }
    
        public virtual int usp_EmploymentDetailSelectAll(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmploymentDetailSelectAll", userIDParameter, companyIDParameter);
        }
    
        public virtual int usp_EmploymentDetailUpdate(Nullable<int> companyID, Nullable<int> employmentDetailID, Nullable<int> changeReason, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> originalHireDate, Nullable<System.DateTime> terminationDate, string terminationReason, Nullable<System.DateTime> startDate, Nullable<System.DateTime> seniorityDate, Nullable<System.DateTime> lastPaidDate, Nullable<System.DateTime> lastPayRise, Nullable<System.DateTime> lastPromotionDate, Nullable<System.DateTime> lastReviewDate, Nullable<System.DateTime> nextReviewDate, Nullable<System.DateTime> newHireReportDate, Nullable<int> employmentStatus, Nullable<int> jobProfileID, Nullable<int> positionID, Nullable<int> payGroup, Nullable<int> locationID, Nullable<int> divisionID, Nullable<int> departmentID, Nullable<int> managerID, string employmentType, Nullable<int> complianceCode, Nullable<int> benefitClass, Nullable<int> fLSAStatus, Nullable<int> union, string districtCode, string checkDistribution, Nullable<bool> directDepositEmail, Nullable<bool> okToRehire, Nullable<int> wCJobClassCode, Nullable<int> wCStatus, Nullable<int> wCType, string workPhone, string workEmail, ObjectParameter errorCode)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var employmentDetailIDParameter = employmentDetailID.HasValue ?
                new ObjectParameter("EmploymentDetailID", employmentDetailID) :
                new ObjectParameter("EmploymentDetailID", typeof(int));
    
            var changeReasonParameter = changeReason.HasValue ?
                new ObjectParameter("ChangeReason", changeReason) :
                new ObjectParameter("ChangeReason", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var originalHireDateParameter = originalHireDate.HasValue ?
                new ObjectParameter("OriginalHireDate", originalHireDate) :
                new ObjectParameter("OriginalHireDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var terminationReasonParameter = terminationReason != null ?
                new ObjectParameter("TerminationReason", terminationReason) :
                new ObjectParameter("TerminationReason", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var seniorityDateParameter = seniorityDate.HasValue ?
                new ObjectParameter("SeniorityDate", seniorityDate) :
                new ObjectParameter("SeniorityDate", typeof(System.DateTime));
    
            var lastPaidDateParameter = lastPaidDate.HasValue ?
                new ObjectParameter("LastPaidDate", lastPaidDate) :
                new ObjectParameter("LastPaidDate", typeof(System.DateTime));
    
            var lastPayRiseParameter = lastPayRise.HasValue ?
                new ObjectParameter("LastPayRise", lastPayRise) :
                new ObjectParameter("LastPayRise", typeof(System.DateTime));
    
            var lastPromotionDateParameter = lastPromotionDate.HasValue ?
                new ObjectParameter("LastPromotionDate", lastPromotionDate) :
                new ObjectParameter("LastPromotionDate", typeof(System.DateTime));
    
            var lastReviewDateParameter = lastReviewDate.HasValue ?
                new ObjectParameter("LastReviewDate", lastReviewDate) :
                new ObjectParameter("LastReviewDate", typeof(System.DateTime));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var newHireReportDateParameter = newHireReportDate.HasValue ?
                new ObjectParameter("NewHireReportDate", newHireReportDate) :
                new ObjectParameter("NewHireReportDate", typeof(System.DateTime));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var payGroupParameter = payGroup.HasValue ?
                new ObjectParameter("PayGroup", payGroup) :
                new ObjectParameter("PayGroup", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var employmentTypeParameter = employmentType != null ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(string));
    
            var complianceCodeParameter = complianceCode.HasValue ?
                new ObjectParameter("ComplianceCode", complianceCode) :
                new ObjectParameter("ComplianceCode", typeof(int));
    
            var benefitClassParameter = benefitClass.HasValue ?
                new ObjectParameter("BenefitClass", benefitClass) :
                new ObjectParameter("BenefitClass", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var unionParameter = union.HasValue ?
                new ObjectParameter("Union", union) :
                new ObjectParameter("Union", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var checkDistributionParameter = checkDistribution != null ?
                new ObjectParameter("CheckDistribution", checkDistribution) :
                new ObjectParameter("CheckDistribution", typeof(string));
    
            var directDepositEmailParameter = directDepositEmail.HasValue ?
                new ObjectParameter("DirectDepositEmail", directDepositEmail) :
                new ObjectParameter("DirectDepositEmail", typeof(bool));
    
            var okToRehireParameter = okToRehire.HasValue ?
                new ObjectParameter("OkToRehire", okToRehire) :
                new ObjectParameter("OkToRehire", typeof(bool));
    
            var wCJobClassCodeParameter = wCJobClassCode.HasValue ?
                new ObjectParameter("WCJobClassCode", wCJobClassCode) :
                new ObjectParameter("WCJobClassCode", typeof(int));
    
            var wCStatusParameter = wCStatus.HasValue ?
                new ObjectParameter("WCStatus", wCStatus) :
                new ObjectParameter("WCStatus", typeof(int));
    
            var wCTypeParameter = wCType.HasValue ?
                new ObjectParameter("WCType", wCType) :
                new ObjectParameter("WCType", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmploymentDetailUpdate", companyIDParameter, employmentDetailIDParameter, changeReasonParameter, hireDateParameter, originalHireDateParameter, terminationDateParameter, terminationReasonParameter, startDateParameter, seniorityDateParameter, lastPaidDateParameter, lastPayRiseParameter, lastPromotionDateParameter, lastReviewDateParameter, nextReviewDateParameter, newHireReportDateParameter, employmentStatusParameter, jobProfileIDParameter, positionIDParameter, payGroupParameter, locationIDParameter, divisionIDParameter, departmentIDParameter, managerIDParameter, employmentTypeParameter, complianceCodeParameter, benefitClassParameter, fLSAStatusParameter, unionParameter, districtCodeParameter, checkDistributionParameter, directDepositEmailParameter, okToRehireParameter, wCJobClassCodeParameter, wCStatusParameter, wCTypeParameter, workPhoneParameter, workEmailParameter, errorCode);
        }
    
        public virtual int usp_HireApprovalSetupIsSubmitUpdate(Nullable<int> userId, Nullable<int> stepId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HireApprovalSetupIsSubmitUpdate", userIdParameter, stepIdParameter, statusParameter);
        }
    
        public virtual int usp_HireApprovalSetupUpdate(string stepName, Nullable<int> userId)
        {
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HireApprovalSetupUpdate", stepNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_HireStepMasterSelect_Result> usp_HireStepMasterSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HireStepMasterSelect_Result>("usp_HireStepMasterSelect");
        }
    
        public virtual int usp_JobCompensationPlanInsertORUpdate(Nullable<int> compensationID, Nullable<int> companyId, string planDescription, string location, Nullable<int> payRange, Nullable<int> payRangeTo, Nullable<int> payRangePer, Nullable<int> variablePay, Nullable<int> variablePayTo, Nullable<int> variablePayPer, Nullable<int> hoursPerWeek, Nullable<int> benfitClass, Nullable<bool> exempt, Nullable<int> modifiedBy, Nullable<int> createdBy)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var planDescriptionParameter = planDescription != null ?
                new ObjectParameter("PlanDescription", planDescription) :
                new ObjectParameter("PlanDescription", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var payRangeParameter = payRange.HasValue ?
                new ObjectParameter("PayRange", payRange) :
                new ObjectParameter("PayRange", typeof(int));
    
            var payRangeToParameter = payRangeTo.HasValue ?
                new ObjectParameter("PayRangeTo", payRangeTo) :
                new ObjectParameter("PayRangeTo", typeof(int));
    
            var payRangePerParameter = payRangePer.HasValue ?
                new ObjectParameter("PayRangePer", payRangePer) :
                new ObjectParameter("PayRangePer", typeof(int));
    
            var variablePayParameter = variablePay.HasValue ?
                new ObjectParameter("VariablePay", variablePay) :
                new ObjectParameter("VariablePay", typeof(int));
    
            var variablePayToParameter = variablePayTo.HasValue ?
                new ObjectParameter("VariablePayTo", variablePayTo) :
                new ObjectParameter("VariablePayTo", typeof(int));
    
            var variablePayPerParameter = variablePayPer.HasValue ?
                new ObjectParameter("VariablePayPer", variablePayPer) :
                new ObjectParameter("VariablePayPer", typeof(int));
    
            var hoursPerWeekParameter = hoursPerWeek.HasValue ?
                new ObjectParameter("HoursPerWeek", hoursPerWeek) :
                new ObjectParameter("HoursPerWeek", typeof(int));
    
            var benfitClassParameter = benfitClass.HasValue ?
                new ObjectParameter("BenfitClass", benfitClass) :
                new ObjectParameter("BenfitClass", typeof(int));
    
            var exemptParameter = exempt.HasValue ?
                new ObjectParameter("Exempt", exempt) :
                new ObjectParameter("Exempt", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobCompensationPlanInsertORUpdate", compensationIDParameter, companyIdParameter, planDescriptionParameter, locationParameter, payRangeParameter, payRangeToParameter, payRangePerParameter, variablePayParameter, variablePayToParameter, variablePayPerParameter, hoursPerWeekParameter, benfitClassParameter, exemptParameter, modifiedByParameter, createdByParameter);
        }
    
        public virtual int usp_JobComplainceCodeDetailInsertORUpdate(Nullable<int> complainceID, Nullable<int> companyId, string type, string code, string description, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var complainceIDParameter = complainceID.HasValue ?
                new ObjectParameter("ComplainceID", complainceID) :
                new ObjectParameter("ComplainceID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobComplainceCodeDetailInsertORUpdate", complainceIDParameter, companyIdParameter, typeParameter, codeParameter, descriptionParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int usp_JobRequisitionDetailInsertORUpdate(Nullable<int> jobRequisitionId, Nullable<int> positionId, Nullable<int> companyId, Nullable<int> employmentType, string city, string budgetedPosition, string numberofOpenings, string budgeFTE, string nameofEmployeeReplaced, string reasonClosed, Nullable<int> recruitingCost, string requisition, string state, string relocationBudget, string positionsFilled, string status, Nullable<int> salaryRange, Nullable<int> to, string requisitionCheckListName, string recruiter, Nullable<int> category, Nullable<int> department, Nullable<int> budget, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTo, Nullable<System.DateTime> dateOpened, Nullable<System.DateTime> dateClosed, string interviewers)
        {
            var jobRequisitionIdParameter = jobRequisitionId.HasValue ?
                new ObjectParameter("JobRequisitionId", jobRequisitionId) :
                new ObjectParameter("JobRequisitionId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employmentTypeParameter = employmentType.HasValue ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var budgetedPositionParameter = budgetedPosition != null ?
                new ObjectParameter("BudgetedPosition", budgetedPosition) :
                new ObjectParameter("BudgetedPosition", typeof(string));
    
            var numberofOpeningsParameter = numberofOpenings != null ?
                new ObjectParameter("NumberofOpenings", numberofOpenings) :
                new ObjectParameter("NumberofOpenings", typeof(string));
    
            var budgeFTEParameter = budgeFTE != null ?
                new ObjectParameter("BudgeFTE", budgeFTE) :
                new ObjectParameter("BudgeFTE", typeof(string));
    
            var nameofEmployeeReplacedParameter = nameofEmployeeReplaced != null ?
                new ObjectParameter("NameofEmployeeReplaced", nameofEmployeeReplaced) :
                new ObjectParameter("NameofEmployeeReplaced", typeof(string));
    
            var reasonClosedParameter = reasonClosed != null ?
                new ObjectParameter("ReasonClosed", reasonClosed) :
                new ObjectParameter("ReasonClosed", typeof(string));
    
            var recruitingCostParameter = recruitingCost.HasValue ?
                new ObjectParameter("RecruitingCost", recruitingCost) :
                new ObjectParameter("RecruitingCost", typeof(int));
    
            var requisitionParameter = requisition != null ?
                new ObjectParameter("Requisition", requisition) :
                new ObjectParameter("Requisition", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var relocationBudgetParameter = relocationBudget != null ?
                new ObjectParameter("RelocationBudget", relocationBudget) :
                new ObjectParameter("RelocationBudget", typeof(string));
    
            var positionsFilledParameter = positionsFilled != null ?
                new ObjectParameter("PositionsFilled", positionsFilled) :
                new ObjectParameter("PositionsFilled", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var salaryRangeParameter = salaryRange.HasValue ?
                new ObjectParameter("SalaryRange", salaryRange) :
                new ObjectParameter("SalaryRange", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(int));
    
            var requisitionCheckListNameParameter = requisitionCheckListName != null ?
                new ObjectParameter("RequisitionCheckListName", requisitionCheckListName) :
                new ObjectParameter("RequisitionCheckListName", typeof(string));
    
            var recruiterParameter = recruiter != null ?
                new ObjectParameter("Recruiter", recruiter) :
                new ObjectParameter("Recruiter", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(int));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var dateOpenedParameter = dateOpened.HasValue ?
                new ObjectParameter("DateOpened", dateOpened) :
                new ObjectParameter("DateOpened", typeof(System.DateTime));
    
            var dateClosedParameter = dateClosed.HasValue ?
                new ObjectParameter("DateClosed", dateClosed) :
                new ObjectParameter("DateClosed", typeof(System.DateTime));
    
            var interviewersParameter = interviewers != null ?
                new ObjectParameter("Interviewers", interviewers) :
                new ObjectParameter("Interviewers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobRequisitionDetailInsertORUpdate", jobRequisitionIdParameter, positionIdParameter, companyIdParameter, employmentTypeParameter, cityParameter, budgetedPositionParameter, numberofOpeningsParameter, budgeFTEParameter, nameofEmployeeReplacedParameter, reasonClosedParameter, recruitingCostParameter, requisitionParameter, stateParameter, relocationBudgetParameter, positionsFilledParameter, statusParameter, salaryRangeParameter, toParameter, requisitionCheckListNameParameter, recruiterParameter, categoryParameter, departmentParameter, budgetParameter, validFromParameter, validToParameter, dateOpenedParameter, dateClosedParameter, interviewersParameter);
        }
    
        public virtual ObjectResult<usp_JobRequisitionDetailSelectAll_Result> usp_JobRequisitionDetailSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobRequisitionDetailSelectAll_Result>("usp_JobRequisitionDetailSelectAll", companyIdParameter);
        }
    
        public virtual int usp_OnBoardingDelete(Nullable<int> onBoardingId)
        {
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OnBoardingDelete", onBoardingIdParameter);
        }
    
        public virtual int usp_OnBoardingInsert(string onBoardingName, Nullable<int> companyId, ObjectParameter errorCode)
        {
            var onBoardingNameParameter = onBoardingName != null ?
                new ObjectParameter("OnBoardingName", onBoardingName) :
                new ObjectParameter("OnBoardingName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OnBoardingInsert", onBoardingNameParameter, companyIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_OnBoardingSelect_Result> usp_OnBoardingSelect(Nullable<int> onBoardingId)
        {
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OnBoardingSelect_Result>("usp_OnBoardingSelect", onBoardingIdParameter);
        }
    
        public virtual ObjectResult<usp_OnBoardingSelectAll_Result> usp_OnBoardingSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OnBoardingSelectAll_Result>("usp_OnBoardingSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_OnBoardingUpdate_Result> usp_OnBoardingUpdate(Nullable<int> onBoardingId, Nullable<System.Guid> onBoardingCode, string onBoardingName, Nullable<int> companyId)
        {
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            var onBoardingCodeParameter = onBoardingCode.HasValue ?
                new ObjectParameter("OnBoardingCode", onBoardingCode) :
                new ObjectParameter("OnBoardingCode", typeof(System.Guid));
    
            var onBoardingNameParameter = onBoardingName != null ?
                new ObjectParameter("OnBoardingName", onBoardingName) :
                new ObjectParameter("OnBoardingName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OnBoardingUpdate_Result>("usp_OnBoardingUpdate", onBoardingIdParameter, onBoardingCodeParameter, onBoardingNameParameter, companyIdParameter);
        }
    
        public virtual int usp_PositionDetailDelete(Nullable<int> positionID, Nullable<int> companyID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PositionDetailDelete", positionIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<usp_PositionDetailSelect_Result> usp_PositionDetailSelect(Nullable<int> positionID, Nullable<int> companyID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PositionDetailSelect_Result>("usp_PositionDetailSelect", positionIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<usp_PositionDetailSelectAll_Result> usp_PositionDetailSelectAll(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PositionDetailSelectAll_Result>("usp_PositionDetailSelectAll", companyIDParameter);
        }
    
        public virtual int usp_PositionDetailsInsert(Nullable<int> positionID, Nullable<int> companyID, string positionTitle, Nullable<int> jobProfileId, Nullable<int> recruitingProfileId, Nullable<int> onBoardingProfileId, Nullable<int> compensationProfileId, Nullable<int> trainingTracksId, Nullable<int> timeProfileId, Nullable<int> workProfileId, Nullable<int> budgetId, Nullable<int> securityRoleId, Nullable<int> locationId, Nullable<int> departmentId, Nullable<int> divisionId, Nullable<int> costCenter4Id, Nullable<int> costCenter5Id, Nullable<int> eEOCodeId, Nullable<int> fLSAStatus, Nullable<int> workersCompCodeId, Nullable<int> reportsToId, Nullable<bool> headerOrganization)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var positionTitleParameter = positionTitle != null ?
                new ObjectParameter("PositionTitle", positionTitle) :
                new ObjectParameter("PositionTitle", typeof(string));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var recruitingProfileIdParameter = recruitingProfileId.HasValue ?
                new ObjectParameter("RecruitingProfileId", recruitingProfileId) :
                new ObjectParameter("RecruitingProfileId", typeof(int));
    
            var onBoardingProfileIdParameter = onBoardingProfileId.HasValue ?
                new ObjectParameter("OnBoardingProfileId", onBoardingProfileId) :
                new ObjectParameter("OnBoardingProfileId", typeof(int));
    
            var compensationProfileIdParameter = compensationProfileId.HasValue ?
                new ObjectParameter("CompensationProfileId", compensationProfileId) :
                new ObjectParameter("CompensationProfileId", typeof(int));
    
            var trainingTracksIdParameter = trainingTracksId.HasValue ?
                new ObjectParameter("TrainingTracksId", trainingTracksId) :
                new ObjectParameter("TrainingTracksId", typeof(int));
    
            var timeProfileIdParameter = timeProfileId.HasValue ?
                new ObjectParameter("TimeProfileId", timeProfileId) :
                new ObjectParameter("TimeProfileId", typeof(int));
    
            var workProfileIdParameter = workProfileId.HasValue ?
                new ObjectParameter("WorkProfileId", workProfileId) :
                new ObjectParameter("WorkProfileId", typeof(int));
    
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var securityRoleIdParameter = securityRoleId.HasValue ?
                new ObjectParameter("SecurityRoleId", securityRoleId) :
                new ObjectParameter("SecurityRoleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var costCenter4IdParameter = costCenter4Id.HasValue ?
                new ObjectParameter("CostCenter4Id", costCenter4Id) :
                new ObjectParameter("CostCenter4Id", typeof(int));
    
            var costCenter5IdParameter = costCenter5Id.HasValue ?
                new ObjectParameter("CostCenter5Id", costCenter5Id) :
                new ObjectParameter("CostCenter5Id", typeof(int));
    
            var eEOCodeIdParameter = eEOCodeId.HasValue ?
                new ObjectParameter("EEOCodeId", eEOCodeId) :
                new ObjectParameter("EEOCodeId", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var workersCompCodeIdParameter = workersCompCodeId.HasValue ?
                new ObjectParameter("WorkersCompCodeId", workersCompCodeId) :
                new ObjectParameter("WorkersCompCodeId", typeof(int));
    
            var reportsToIdParameter = reportsToId.HasValue ?
                new ObjectParameter("ReportsToId", reportsToId) :
                new ObjectParameter("ReportsToId", typeof(int));
    
            var headerOrganizationParameter = headerOrganization.HasValue ?
                new ObjectParameter("HeaderOrganization", headerOrganization) :
                new ObjectParameter("HeaderOrganization", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PositionDetailsInsert", positionIDParameter, companyIDParameter, positionTitleParameter, jobProfileIdParameter, recruitingProfileIdParameter, onBoardingProfileIdParameter, compensationProfileIdParameter, trainingTracksIdParameter, timeProfileIdParameter, workProfileIdParameter, budgetIdParameter, securityRoleIdParameter, locationIdParameter, departmentIdParameter, divisionIdParameter, costCenter4IdParameter, costCenter5IdParameter, eEOCodeIdParameter, fLSAStatusParameter, workersCompCodeIdParameter, reportsToIdParameter, headerOrganizationParameter);
        }
    
        public virtual int usp_PositionDetailUpdate(Nullable<int> positionID, Nullable<int> companyID, string positionTitle, Nullable<int> jobProfileId, Nullable<int> recruitingProfileId, Nullable<int> onBoardingProfileId, Nullable<int> compensationProfileId, Nullable<int> trainingTracksId, Nullable<int> timeProfileId, Nullable<int> workProfileId, Nullable<int> budgetId, Nullable<int> secruityRoleId, Nullable<int> locationId, Nullable<int> departmentId, Nullable<int> divisionId, Nullable<int> costCenter4Id, Nullable<int> costCenter5Id, Nullable<int> eEOCodeId, Nullable<int> fLSAStatus, Nullable<int> workersCompCodeId, Nullable<int> reportsToId, Nullable<bool> headOfOrganization)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var positionTitleParameter = positionTitle != null ?
                new ObjectParameter("PositionTitle", positionTitle) :
                new ObjectParameter("PositionTitle", typeof(string));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var recruitingProfileIdParameter = recruitingProfileId.HasValue ?
                new ObjectParameter("RecruitingProfileId", recruitingProfileId) :
                new ObjectParameter("RecruitingProfileId", typeof(int));
    
            var onBoardingProfileIdParameter = onBoardingProfileId.HasValue ?
                new ObjectParameter("OnBoardingProfileId", onBoardingProfileId) :
                new ObjectParameter("OnBoardingProfileId", typeof(int));
    
            var compensationProfileIdParameter = compensationProfileId.HasValue ?
                new ObjectParameter("CompensationProfileId", compensationProfileId) :
                new ObjectParameter("CompensationProfileId", typeof(int));
    
            var trainingTracksIdParameter = trainingTracksId.HasValue ?
                new ObjectParameter("TrainingTracksId", trainingTracksId) :
                new ObjectParameter("TrainingTracksId", typeof(int));
    
            var timeProfileIdParameter = timeProfileId.HasValue ?
                new ObjectParameter("TimeProfileId", timeProfileId) :
                new ObjectParameter("TimeProfileId", typeof(int));
    
            var workProfileIdParameter = workProfileId.HasValue ?
                new ObjectParameter("WorkProfileId", workProfileId) :
                new ObjectParameter("WorkProfileId", typeof(int));
    
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var secruityRoleIdParameter = secruityRoleId.HasValue ?
                new ObjectParameter("SecruityRoleId", secruityRoleId) :
                new ObjectParameter("SecruityRoleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var costCenter4IdParameter = costCenter4Id.HasValue ?
                new ObjectParameter("CostCenter4Id", costCenter4Id) :
                new ObjectParameter("CostCenter4Id", typeof(int));
    
            var costCenter5IdParameter = costCenter5Id.HasValue ?
                new ObjectParameter("CostCenter5Id", costCenter5Id) :
                new ObjectParameter("CostCenter5Id", typeof(int));
    
            var eEOCodeIdParameter = eEOCodeId.HasValue ?
                new ObjectParameter("EEOCodeId", eEOCodeId) :
                new ObjectParameter("EEOCodeId", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var workersCompCodeIdParameter = workersCompCodeId.HasValue ?
                new ObjectParameter("WorkersCompCodeId", workersCompCodeId) :
                new ObjectParameter("WorkersCompCodeId", typeof(int));
    
            var reportsToIdParameter = reportsToId.HasValue ?
                new ObjectParameter("ReportsToId", reportsToId) :
                new ObjectParameter("ReportsToId", typeof(int));
    
            var headOfOrganizationParameter = headOfOrganization.HasValue ?
                new ObjectParameter("HeadOfOrganization", headOfOrganization) :
                new ObjectParameter("HeadOfOrganization", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PositionDetailUpdate", positionIDParameter, companyIDParameter, positionTitleParameter, jobProfileIdParameter, recruitingProfileIdParameter, onBoardingProfileIdParameter, compensationProfileIdParameter, trainingTracksIdParameter, timeProfileIdParameter, workProfileIdParameter, budgetIdParameter, secruityRoleIdParameter, locationIdParameter, departmentIdParameter, divisionIdParameter, costCenter4IdParameter, costCenter5IdParameter, eEOCodeIdParameter, fLSAStatusParameter, workersCompCodeIdParameter, reportsToIdParameter, headOfOrganizationParameter);
        }
    
        public virtual int usp_ReportsToDetailDelete(Nullable<int> reportsToID, Nullable<int> companyID)
        {
            var reportsToIDParameter = reportsToID.HasValue ?
                new ObjectParameter("ReportsToID", reportsToID) :
                new ObjectParameter("ReportsToID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReportsToDetailDelete", reportsToIDParameter, companyIDParameter);
        }
    
        public virtual int usp_ReportsToDetailInsert(Nullable<int> companyID, string moduleName, string reportName, Nullable<int> reportDescription, Nullable<bool> isInclude, string roleName, Nullable<int> createdBy)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var reportDescriptionParameter = reportDescription.HasValue ?
                new ObjectParameter("ReportDescription", reportDescription) :
                new ObjectParameter("ReportDescription", typeof(int));
    
            var isIncludeParameter = isInclude.HasValue ?
                new ObjectParameter("IsInclude", isInclude) :
                new ObjectParameter("IsInclude", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReportsToDetailInsert", companyIDParameter, moduleNameParameter, reportNameParameter, reportDescriptionParameter, isIncludeParameter, roleNameParameter, createdByParameter);
        }
    
        public virtual int usp_ReportsToDetailSelect(Nullable<int> reportsToID, Nullable<int> companyID)
        {
            var reportsToIDParameter = reportsToID.HasValue ?
                new ObjectParameter("ReportsToID", reportsToID) :
                new ObjectParameter("ReportsToID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReportsToDetailSelect", reportsToIDParameter, companyIDParameter);
        }
    
        public virtual int usp_ReportsToDetailSelectAll(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReportsToDetailSelectAll", companyIDParameter);
        }
    
        public virtual int usp_ReportsToDetailUpdate(Nullable<int> reportsToID, Nullable<int> companyID, string moduleName, string reportName, string reportDescription, Nullable<bool> isInclude, string roleName, Nullable<int> modifiedBy)
        {
            var reportsToIDParameter = reportsToID.HasValue ?
                new ObjectParameter("ReportsToID", reportsToID) :
                new ObjectParameter("ReportsToID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var reportDescriptionParameter = reportDescription != null ?
                new ObjectParameter("ReportDescription", reportDescription) :
                new ObjectParameter("ReportDescription", typeof(string));
    
            var isIncludeParameter = isInclude.HasValue ?
                new ObjectParameter("IsInclude", isInclude) :
                new ObjectParameter("IsInclude", typeof(bool));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReportsToDetailUpdate", reportsToIDParameter, companyIDParameter, moduleNameParameter, reportNameParameter, reportDescriptionParameter, isIncludeParameter, roleNameParameter, modifiedByParameter);
        }
    
        public virtual int usp_ScheduledTasksDelete(Nullable<int> scheduledTaskId)
        {
            var scheduledTaskIdParameter = scheduledTaskId.HasValue ?
                new ObjectParameter("ScheduledTaskId", scheduledTaskId) :
                new ObjectParameter("ScheduledTaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ScheduledTasksDelete", scheduledTaskIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduledTasksInsert_Result> usp_ScheduledTasksInsert(Nullable<int> userId, Nullable<int> companyId, string title, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string backgroundColor, string borderColor, Nullable<bool> allDay, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, string createdBy, string modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var backgroundColorParameter = backgroundColor != null ?
                new ObjectParameter("BackgroundColor", backgroundColor) :
                new ObjectParameter("BackgroundColor", typeof(string));
    
            var borderColorParameter = borderColor != null ?
                new ObjectParameter("BorderColor", borderColor) :
                new ObjectParameter("BorderColor", typeof(string));
    
            var allDayParameter = allDay.HasValue ?
                new ObjectParameter("AllDay", allDay) :
                new ObjectParameter("AllDay", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduledTasksInsert_Result>("usp_ScheduledTasksInsert", userIdParameter, companyIdParameter, titleParameter, startDateParameter, endDateParameter, backgroundColorParameter, borderColorParameter, allDayParameter, createdOnParameter, modifiedOnParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_ScheduledTasksSelect_Result> usp_ScheduledTasksSelect(Nullable<int> scheduledTaskId)
        {
            var scheduledTaskIdParameter = scheduledTaskId.HasValue ?
                new ObjectParameter("ScheduledTaskId", scheduledTaskId) :
                new ObjectParameter("ScheduledTaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduledTasksSelect_Result>("usp_ScheduledTasksSelect", scheduledTaskIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduledTasksUpdate_Result> usp_ScheduledTasksUpdate(Nullable<int> scheduledTaskId, Nullable<int> userId, Nullable<int> companyId, string title, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string backgroundColor, string borderColor, Nullable<bool> allDay, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, string createdBy, string modifiedBy)
        {
            var scheduledTaskIdParameter = scheduledTaskId.HasValue ?
                new ObjectParameter("ScheduledTaskId", scheduledTaskId) :
                new ObjectParameter("ScheduledTaskId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var backgroundColorParameter = backgroundColor != null ?
                new ObjectParameter("BackgroundColor", backgroundColor) :
                new ObjectParameter("BackgroundColor", typeof(string));
    
            var borderColorParameter = borderColor != null ?
                new ObjectParameter("BorderColor", borderColor) :
                new ObjectParameter("BorderColor", typeof(string));
    
            var allDayParameter = allDay.HasValue ?
                new ObjectParameter("AllDay", allDay) :
                new ObjectParameter("AllDay", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduledTasksUpdate_Result>("usp_ScheduledTasksUpdate", scheduledTaskIdParameter, userIdParameter, companyIdParameter, titleParameter, startDateParameter, endDateParameter, backgroundColorParameter, borderColorParameter, allDayParameter, createdOnParameter, modifiedOnParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int usp_ScreenVerbiageInsert(Nullable<int> companyId, string hireWizardWelcome, string hireWizardSubmit, string hireWizardApproval)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var hireWizardWelcomeParameter = hireWizardWelcome != null ?
                new ObjectParameter("hireWizardWelcome", hireWizardWelcome) :
                new ObjectParameter("hireWizardWelcome", typeof(string));
    
            var hireWizardSubmitParameter = hireWizardSubmit != null ?
                new ObjectParameter("hireWizardSubmit", hireWizardSubmit) :
                new ObjectParameter("hireWizardSubmit", typeof(string));
    
            var hireWizardApprovalParameter = hireWizardApproval != null ?
                new ObjectParameter("hireWizardApproval", hireWizardApproval) :
                new ObjectParameter("hireWizardApproval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ScreenVerbiageInsert", companyIdParameter, hireWizardWelcomeParameter, hireWizardSubmitParameter, hireWizardApprovalParameter);
        }
    
        public virtual ObjectResult<usp_ScreenVerbiageSelect_Result> usp_ScreenVerbiageSelect(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScreenVerbiageSelect_Result>("usp_ScreenVerbiageSelect", companyIdParameter);
        }
    
        public virtual int usp_ScreenVerbiageUpdate(Nullable<int> companyId, string hireWizardWelcome, string hireWizardSubmit, string hireWizardApproval)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var hireWizardWelcomeParameter = hireWizardWelcome != null ?
                new ObjectParameter("hireWizardWelcome", hireWizardWelcome) :
                new ObjectParameter("hireWizardWelcome", typeof(string));
    
            var hireWizardSubmitParameter = hireWizardSubmit != null ?
                new ObjectParameter("hireWizardSubmit", hireWizardSubmit) :
                new ObjectParameter("hireWizardSubmit", typeof(string));
    
            var hireWizardApprovalParameter = hireWizardApproval != null ?
                new ObjectParameter("hireWizardApproval", hireWizardApproval) :
                new ObjectParameter("hireWizardApproval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ScreenVerbiageUpdate", companyIdParameter, hireWizardWelcomeParameter, hireWizardSubmitParameter, hireWizardApprovalParameter);
        }
    
        public virtual int usp_SecurityRoleDetailDelete(Nullable<int> securityId, Nullable<int> companyId)
        {
            var securityIdParameter = securityId.HasValue ?
                new ObjectParameter("SecurityId", securityId) :
                new ObjectParameter("SecurityId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SecurityRoleDetailDelete", securityIdParameter, companyIdParameter);
        }
    
        public virtual int usp_SecurityRoleDetailInsert(Nullable<int> securityId, Nullable<int> companyId, string accessibility, Nullable<int> createdBy)
        {
            var securityIdParameter = securityId.HasValue ?
                new ObjectParameter("SecurityId", securityId) :
                new ObjectParameter("SecurityId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accessibilityParameter = accessibility != null ?
                new ObjectParameter("Accessibility", accessibility) :
                new ObjectParameter("Accessibility", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SecurityRoleDetailInsert", securityIdParameter, companyIdParameter, accessibilityParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_SecurityRoleDetailSelect_Result> usp_SecurityRoleDetailSelect(Nullable<int> securityId, Nullable<int> companyId)
        {
            var securityIdParameter = securityId.HasValue ?
                new ObjectParameter("SecurityId", securityId) :
                new ObjectParameter("SecurityId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SecurityRoleDetailSelect_Result>("usp_SecurityRoleDetailSelect", securityIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SecurityRoleDetailSelectAll_Result> usp_SecurityRoleDetailSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SecurityRoleDetailSelectAll_Result>("usp_SecurityRoleDetailSelectAll", companyIdParameter);
        }
    
        public virtual int usp_SecurityRoleDetailUpdate(Nullable<int> securityId, Nullable<int> companyId, string accessibility, Nullable<int> modifiedBy)
        {
            var securityIdParameter = securityId.HasValue ?
                new ObjectParameter("SecurityId", securityId) :
                new ObjectParameter("SecurityId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accessibilityParameter = accessibility != null ?
                new ObjectParameter("Accessibility", accessibility) :
                new ObjectParameter("Accessibility", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SecurityRoleDetailUpdate", securityIdParameter, companyIdParameter, accessibilityParameter, modifiedByParameter);
        }
    
        public virtual int usp_TimeProfileDetailDelete(Nullable<int> timeProfileID, Nullable<int> companyID)
        {
            var timeProfileIDParameter = timeProfileID.HasValue ?
                new ObjectParameter("TimeProfileID", timeProfileID) :
                new ObjectParameter("TimeProfileID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeProfileDetailDelete", timeProfileIDParameter, companyIDParameter);
        }
    
        public virtual int usp_TimeProfileDetailInsert(Nullable<int> timeProfileID, Nullable<int> companyID, string timeProfileName, string payPeriod, Nullable<decimal> payRate, Nullable<decimal> billRate, string schedule, string lunchCode, string holiday, string rounding, string rateMatrix, string shift, string shiftGroup, string compensatoryCode, string payPolicy, string pTOCode, string selectionType, string noOffDays, string timesheetType, Nullable<bool> alloTimesheet, Nullable<int> createdBy)
        {
            var timeProfileIDParameter = timeProfileID.HasValue ?
                new ObjectParameter("TimeProfileID", timeProfileID) :
                new ObjectParameter("TimeProfileID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var timeProfileNameParameter = timeProfileName != null ?
                new ObjectParameter("TimeProfileName", timeProfileName) :
                new ObjectParameter("TimeProfileName", typeof(string));
    
            var payPeriodParameter = payPeriod != null ?
                new ObjectParameter("PayPeriod", payPeriod) :
                new ObjectParameter("PayPeriod", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(decimal));
    
            var billRateParameter = billRate.HasValue ?
                new ObjectParameter("BillRate", billRate) :
                new ObjectParameter("BillRate", typeof(decimal));
    
            var scheduleParameter = schedule != null ?
                new ObjectParameter("Schedule", schedule) :
                new ObjectParameter("Schedule", typeof(string));
    
            var lunchCodeParameter = lunchCode != null ?
                new ObjectParameter("LunchCode", lunchCode) :
                new ObjectParameter("LunchCode", typeof(string));
    
            var holidayParameter = holiday != null ?
                new ObjectParameter("Holiday", holiday) :
                new ObjectParameter("Holiday", typeof(string));
    
            var roundingParameter = rounding != null ?
                new ObjectParameter("Rounding", rounding) :
                new ObjectParameter("Rounding", typeof(string));
    
            var rateMatrixParameter = rateMatrix != null ?
                new ObjectParameter("RateMatrix", rateMatrix) :
                new ObjectParameter("RateMatrix", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var shiftGroupParameter = shiftGroup != null ?
                new ObjectParameter("ShiftGroup", shiftGroup) :
                new ObjectParameter("ShiftGroup", typeof(string));
    
            var compensatoryCodeParameter = compensatoryCode != null ?
                new ObjectParameter("CompensatoryCode", compensatoryCode) :
                new ObjectParameter("CompensatoryCode", typeof(string));
    
            var payPolicyParameter = payPolicy != null ?
                new ObjectParameter("PayPolicy", payPolicy) :
                new ObjectParameter("PayPolicy", typeof(string));
    
            var pTOCodeParameter = pTOCode != null ?
                new ObjectParameter("PTOCode", pTOCode) :
                new ObjectParameter("PTOCode", typeof(string));
    
            var selectionTypeParameter = selectionType != null ?
                new ObjectParameter("SelectionType", selectionType) :
                new ObjectParameter("SelectionType", typeof(string));
    
            var noOffDaysParameter = noOffDays != null ?
                new ObjectParameter("NoOffDays", noOffDays) :
                new ObjectParameter("NoOffDays", typeof(string));
    
            var timesheetTypeParameter = timesheetType != null ?
                new ObjectParameter("TimesheetType", timesheetType) :
                new ObjectParameter("TimesheetType", typeof(string));
    
            var alloTimesheetParameter = alloTimesheet.HasValue ?
                new ObjectParameter("AlloTimesheet", alloTimesheet) :
                new ObjectParameter("AlloTimesheet", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeProfileDetailInsert", timeProfileIDParameter, companyIDParameter, timeProfileNameParameter, payPeriodParameter, payRateParameter, billRateParameter, scheduleParameter, lunchCodeParameter, holidayParameter, roundingParameter, rateMatrixParameter, shiftParameter, shiftGroupParameter, compensatoryCodeParameter, payPolicyParameter, pTOCodeParameter, selectionTypeParameter, noOffDaysParameter, timesheetTypeParameter, alloTimesheetParameter, createdByParameter);
        }
    
        public virtual int usp_TimeProfileDetailSelect(Nullable<int> timeProfileID, Nullable<int> companyID)
        {
            var timeProfileIDParameter = timeProfileID.HasValue ?
                new ObjectParameter("TimeProfileID", timeProfileID) :
                new ObjectParameter("TimeProfileID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeProfileDetailSelect", timeProfileIDParameter, companyIDParameter);
        }
    
        public virtual int usp_TimeProfileDetailSelectAll(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeProfileDetailSelectAll", companyIDParameter);
        }
    
        public virtual int usp_TimeProfileDetailUpdate(Nullable<int> timeProfileID, Nullable<int> companyID, string timeProfileName, string payPeriod, Nullable<decimal> payRate, Nullable<decimal> billRate, string schedule, string lunchCode, string holiday, string rounding, string rateMatrix, string shift, string shiftGroup, string compensatoryCode, string payPolicy, string pTOCode, string selectionType, string noOffDays, string timesheetType, Nullable<bool> alloTimesheet, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var timeProfileIDParameter = timeProfileID.HasValue ?
                new ObjectParameter("TimeProfileID", timeProfileID) :
                new ObjectParameter("TimeProfileID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var timeProfileNameParameter = timeProfileName != null ?
                new ObjectParameter("TimeProfileName", timeProfileName) :
                new ObjectParameter("TimeProfileName", typeof(string));
    
            var payPeriodParameter = payPeriod != null ?
                new ObjectParameter("PayPeriod", payPeriod) :
                new ObjectParameter("PayPeriod", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(decimal));
    
            var billRateParameter = billRate.HasValue ?
                new ObjectParameter("BillRate", billRate) :
                new ObjectParameter("BillRate", typeof(decimal));
    
            var scheduleParameter = schedule != null ?
                new ObjectParameter("Schedule", schedule) :
                new ObjectParameter("Schedule", typeof(string));
    
            var lunchCodeParameter = lunchCode != null ?
                new ObjectParameter("LunchCode", lunchCode) :
                new ObjectParameter("LunchCode", typeof(string));
    
            var holidayParameter = holiday != null ?
                new ObjectParameter("Holiday", holiday) :
                new ObjectParameter("Holiday", typeof(string));
    
            var roundingParameter = rounding != null ?
                new ObjectParameter("Rounding", rounding) :
                new ObjectParameter("Rounding", typeof(string));
    
            var rateMatrixParameter = rateMatrix != null ?
                new ObjectParameter("RateMatrix", rateMatrix) :
                new ObjectParameter("RateMatrix", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var shiftGroupParameter = shiftGroup != null ?
                new ObjectParameter("ShiftGroup", shiftGroup) :
                new ObjectParameter("ShiftGroup", typeof(string));
    
            var compensatoryCodeParameter = compensatoryCode != null ?
                new ObjectParameter("CompensatoryCode", compensatoryCode) :
                new ObjectParameter("CompensatoryCode", typeof(string));
    
            var payPolicyParameter = payPolicy != null ?
                new ObjectParameter("PayPolicy", payPolicy) :
                new ObjectParameter("PayPolicy", typeof(string));
    
            var pTOCodeParameter = pTOCode != null ?
                new ObjectParameter("PTOCode", pTOCode) :
                new ObjectParameter("PTOCode", typeof(string));
    
            var selectionTypeParameter = selectionType != null ?
                new ObjectParameter("SelectionType", selectionType) :
                new ObjectParameter("SelectionType", typeof(string));
    
            var noOffDaysParameter = noOffDays != null ?
                new ObjectParameter("NoOffDays", noOffDays) :
                new ObjectParameter("NoOffDays", typeof(string));
    
            var timesheetTypeParameter = timesheetType != null ?
                new ObjectParameter("TimesheetType", timesheetType) :
                new ObjectParameter("TimesheetType", typeof(string));
    
            var alloTimesheetParameter = alloTimesheet.HasValue ?
                new ObjectParameter("AlloTimesheet", alloTimesheet) :
                new ObjectParameter("AlloTimesheet", typeof(bool));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeProfileDetailUpdate", timeProfileIDParameter, companyIDParameter, timeProfileNameParameter, payPeriodParameter, payRateParameter, billRateParameter, scheduleParameter, lunchCodeParameter, holidayParameter, roundingParameter, rateMatrixParameter, shiftParameter, shiftGroupParameter, compensatoryCodeParameter, payPolicyParameter, pTOCodeParameter, selectionTypeParameter, noOffDaysParameter, timesheetTypeParameter, alloTimesheetParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_TrainingTracksDetailDelete(Nullable<int> trainingTracksID, Nullable<int> companyID)
        {
            var trainingTracksIDParameter = trainingTracksID.HasValue ?
                new ObjectParameter("TrainingTracksID", trainingTracksID) :
                new ObjectParameter("TrainingTracksID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTracksDetailDelete", trainingTracksIDParameter, companyIDParameter);
        }
    
        public virtual int usp_TrainingTracksDetailInsert(Nullable<int> trainingTracksID, Nullable<int> companyID, string name, string description, Nullable<System.DateTime> createOn, Nullable<System.DateTime> modifiedOn)
        {
            var trainingTracksIDParameter = trainingTracksID.HasValue ?
                new ObjectParameter("TrainingTracksID", trainingTracksID) :
                new ObjectParameter("TrainingTracksID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createOnParameter = createOn.HasValue ?
                new ObjectParameter("CreateOn", createOn) :
                new ObjectParameter("CreateOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTracksDetailInsert", trainingTracksIDParameter, companyIDParameter, nameParameter, descriptionParameter, createOnParameter, modifiedOnParameter);
        }
    
        public virtual int usp_TrainingTracksDetailSelect(Nullable<int> trainingTracksID, Nullable<int> companyID)
        {
            var trainingTracksIDParameter = trainingTracksID.HasValue ?
                new ObjectParameter("TrainingTracksID", trainingTracksID) :
                new ObjectParameter("TrainingTracksID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTracksDetailSelect", trainingTracksIDParameter, companyIDParameter);
        }
    
        public virtual int usp_TrainingTracksDetailSelectAll(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTracksDetailSelectAll", companyIDParameter);
        }
    
        public virtual int usp_TrainingTracksDetailUpdate(Nullable<int> trainingTracksID, Nullable<int> companyID, string name, string description, Nullable<System.DateTime> createOn, Nullable<System.DateTime> modifiedOn)
        {
            var trainingTracksIDParameter = trainingTracksID.HasValue ?
                new ObjectParameter("TrainingTracksID", trainingTracksID) :
                new ObjectParameter("TrainingTracksID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createOnParameter = createOn.HasValue ?
                new ObjectParameter("CreateOn", createOn) :
                new ObjectParameter("CreateOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTracksDetailUpdate", trainingTracksIDParameter, companyIDParameter, nameParameter, descriptionParameter, createOnParameter, modifiedOnParameter);
        }
    
        public virtual ObjectResult<usp_usp_CompensationPlanSelect_Result> usp_usp_CompensationPlanSelect(Nullable<int> compensationID, Nullable<int> companyId)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_usp_CompensationPlanSelect_Result>("usp_usp_CompensationPlanSelect", compensationIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_usp_CompensationPlanSelectAllSelect_Result> usp_usp_CompensationPlanSelectAllSelect(Nullable<int> compensationID, Nullable<int> companyId)
        {
            var compensationIDParameter = compensationID.HasValue ?
                new ObjectParameter("CompensationID", compensationID) :
                new ObjectParameter("CompensationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_usp_CompensationPlanSelectAllSelect_Result>("usp_usp_CompensationPlanSelectAllSelect", compensationIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_WorkAuthorizationInsertORUpdate_Result> usp_WorkAuthorizationInsertORUpdate(Nullable<int> workAuthorizationId, Nullable<int> companyId, Nullable<int> userId, Nullable<int> transactionId, Nullable<System.DateTime> signatureDate, string iPAddress, Nullable<int> citizenOfUS, string alienNumber, Nullable<System.DateTime> permanentResidentExpire, Nullable<int> alienCitizenof, Nullable<System.DateTime> alienAuthorisedDate, Nullable<int> alienAuthorisedCitizenof, Nullable<bool> federalLaw, Nullable<bool> isSSN, Nullable<bool> isEmployeeSign, string confirmation, Nullable<System.DateTime> employmentOn, Nullable<bool> isEmployerSign, string employerUserId, string employerTransactionId, Nullable<System.DateTime> employerSignDate, Nullable<System.DateTime> certificationDate, byte[] attachment, string attachmentType, string attachmentName, string alienRegistrationNumber, string admissionNumber, string passportNumber, Nullable<int> countryof, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var workAuthorizationIdParameter = workAuthorizationId.HasValue ?
                new ObjectParameter("WorkAuthorizationId", workAuthorizationId) :
                new ObjectParameter("WorkAuthorizationId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var signatureDateParameter = signatureDate.HasValue ?
                new ObjectParameter("SignatureDate", signatureDate) :
                new ObjectParameter("SignatureDate", typeof(System.DateTime));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var citizenOfUSParameter = citizenOfUS.HasValue ?
                new ObjectParameter("CitizenOfUS", citizenOfUS) :
                new ObjectParameter("CitizenOfUS", typeof(int));
    
            var alienNumberParameter = alienNumber != null ?
                new ObjectParameter("AlienNumber", alienNumber) :
                new ObjectParameter("AlienNumber", typeof(string));
    
            var permanentResidentExpireParameter = permanentResidentExpire.HasValue ?
                new ObjectParameter("PermanentResidentExpire", permanentResidentExpire) :
                new ObjectParameter("PermanentResidentExpire", typeof(System.DateTime));
    
            var alienCitizenofParameter = alienCitizenof.HasValue ?
                new ObjectParameter("AlienCitizenof", alienCitizenof) :
                new ObjectParameter("AlienCitizenof", typeof(int));
    
            var alienAuthorisedDateParameter = alienAuthorisedDate.HasValue ?
                new ObjectParameter("AlienAuthorisedDate", alienAuthorisedDate) :
                new ObjectParameter("AlienAuthorisedDate", typeof(System.DateTime));
    
            var alienAuthorisedCitizenofParameter = alienAuthorisedCitizenof.HasValue ?
                new ObjectParameter("AlienAuthorisedCitizenof", alienAuthorisedCitizenof) :
                new ObjectParameter("AlienAuthorisedCitizenof", typeof(int));
    
            var federalLawParameter = federalLaw.HasValue ?
                new ObjectParameter("FederalLaw", federalLaw) :
                new ObjectParameter("FederalLaw", typeof(bool));
    
            var isSSNParameter = isSSN.HasValue ?
                new ObjectParameter("IsSSN", isSSN) :
                new ObjectParameter("IsSSN", typeof(bool));
    
            var isEmployeeSignParameter = isEmployeeSign.HasValue ?
                new ObjectParameter("IsEmployeeSign", isEmployeeSign) :
                new ObjectParameter("IsEmployeeSign", typeof(bool));
    
            var confirmationParameter = confirmation != null ?
                new ObjectParameter("Confirmation", confirmation) :
                new ObjectParameter("Confirmation", typeof(string));
    
            var employmentOnParameter = employmentOn.HasValue ?
                new ObjectParameter("EmploymentOn", employmentOn) :
                new ObjectParameter("EmploymentOn", typeof(System.DateTime));
    
            var isEmployerSignParameter = isEmployerSign.HasValue ?
                new ObjectParameter("IsEmployerSign", isEmployerSign) :
                new ObjectParameter("IsEmployerSign", typeof(bool));
    
            var employerUserIdParameter = employerUserId != null ?
                new ObjectParameter("EmployerUserId", employerUserId) :
                new ObjectParameter("EmployerUserId", typeof(string));
    
            var employerTransactionIdParameter = employerTransactionId != null ?
                new ObjectParameter("EmployerTransactionId", employerTransactionId) :
                new ObjectParameter("EmployerTransactionId", typeof(string));
    
            var employerSignDateParameter = employerSignDate.HasValue ?
                new ObjectParameter("EmployerSignDate", employerSignDate) :
                new ObjectParameter("EmployerSignDate", typeof(System.DateTime));
    
            var certificationDateParameter = certificationDate.HasValue ?
                new ObjectParameter("CertificationDate", certificationDate) :
                new ObjectParameter("CertificationDate", typeof(System.DateTime));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(byte[]));
    
            var attachmentTypeParameter = attachmentType != null ?
                new ObjectParameter("AttachmentType", attachmentType) :
                new ObjectParameter("AttachmentType", typeof(string));
    
            var attachmentNameParameter = attachmentName != null ?
                new ObjectParameter("AttachmentName", attachmentName) :
                new ObjectParameter("AttachmentName", typeof(string));
    
            var alienRegistrationNumberParameter = alienRegistrationNumber != null ?
                new ObjectParameter("AlienRegistrationNumber", alienRegistrationNumber) :
                new ObjectParameter("AlienRegistrationNumber", typeof(string));
    
            var admissionNumberParameter = admissionNumber != null ?
                new ObjectParameter("AdmissionNumber", admissionNumber) :
                new ObjectParameter("AdmissionNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var countryofParameter = countryof.HasValue ?
                new ObjectParameter("Countryof", countryof) :
                new ObjectParameter("Countryof", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WorkAuthorizationInsertORUpdate_Result>("usp_WorkAuthorizationInsertORUpdate", workAuthorizationIdParameter, companyIdParameter, userIdParameter, transactionIdParameter, signatureDateParameter, iPAddressParameter, citizenOfUSParameter, alienNumberParameter, permanentResidentExpireParameter, alienCitizenofParameter, alienAuthorisedDateParameter, alienAuthorisedCitizenofParameter, federalLawParameter, isSSNParameter, isEmployeeSignParameter, confirmationParameter, employmentOnParameter, isEmployerSignParameter, employerUserIdParameter, employerTransactionIdParameter, employerSignDateParameter, certificationDateParameter, attachmentParameter, attachmentTypeParameter, attachmentNameParameter, alienRegistrationNumberParameter, admissionNumberParameter, passportNumberParameter, countryofParameter, createdOnParameter, modifiedOnParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int usp_CompanyInfoDelete(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyInfoDelete", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyInfoSelect_Result> usp_CompanyInfoSelect(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoSelect_Result>("usp_CompanyInfoSelect", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyInfoSelectAllByCompanyId_Result> usp_CompanyInfoSelectAllByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoSelectAllByCompanyId_Result>("usp_CompanyInfoSelectAllByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyInfoSelectAllByRoleId_Result> usp_CompanyInfoSelectAllByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoSelectAllByRoleId_Result>("usp_CompanyInfoSelectAllByRoleId", roleIdParameter);
        }
    
        public virtual int usp_FilesDBDelete(Nullable<int> filesDBId)
        {
            var filesDBIdParameter = filesDBId.HasValue ?
                new ObjectParameter("FilesDBId", filesDBId) :
                new ObjectParameter("FilesDBId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FilesDBDelete", filesDBIdParameter);
        }
    
        public virtual ObjectResult<usp_FilesDBSelect_Result> usp_FilesDBSelect(Nullable<int> filesDBId)
        {
            var filesDBIdParameter = filesDBId.HasValue ?
                new ObjectParameter("FilesDBId", filesDBId) :
                new ObjectParameter("FilesDBId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesDBSelect_Result>("usp_FilesDBSelect", filesDBIdParameter);
        }
    
        public virtual ObjectResult<usp_FilesDBSelectAll_Result> usp_FilesDBSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesDBSelectAll_Result>("usp_FilesDBSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_FilesDBUpdate_Result> usp_FilesDBUpdate(Nullable<int> filesDBId, Nullable<System.Guid> fileId, byte[] fileBytes, string fileName, string fileSize, string contentType, string fileExtension, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn)
        {
            var filesDBIdParameter = filesDBId.HasValue ?
                new ObjectParameter("FilesDBId", filesDBId) :
                new ObjectParameter("FilesDBId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(System.Guid));
    
            var fileBytesParameter = fileBytes != null ?
                new ObjectParameter("FileBytes", fileBytes) :
                new ObjectParameter("FileBytes", typeof(byte[]));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesDBUpdate_Result>("usp_FilesDBUpdate", filesDBIdParameter, fileIdParameter, fileBytesParameter, fileNameParameter, fileSizeParameter, contentTypeParameter, fileExtensionParameter, createdOnParameter, modifiedOnParameter);
        }
    
        public virtual int usp_RoleMasterDelete(Nullable<int> roleMasterId)
        {
            var roleMasterIdParameter = roleMasterId.HasValue ?
                new ObjectParameter("RoleMasterId", roleMasterId) :
                new ObjectParameter("RoleMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoleMasterDelete", roleMasterIdParameter);
        }
    
        public virtual ObjectResult<usp_RoleMasterSelect_Result> usp_RoleMasterSelect(Nullable<int> roleMasterId)
        {
            var roleMasterIdParameter = roleMasterId.HasValue ?
                new ObjectParameter("RoleMasterId", roleMasterId) :
                new ObjectParameter("RoleMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleMasterSelect_Result>("usp_RoleMasterSelect", roleMasterIdParameter);
        }
    
        public virtual ObjectResult<usp_RoleMasterSelectAll_Result> usp_RoleMasterSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleMasterSelectAll_Result>("usp_RoleMasterSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RoleMasterUpdate_Result> usp_RoleMasterUpdate(Nullable<int> roleMasterId, string roleName, string description, Nullable<int> companyId, Nullable<bool> status, Nullable<bool> isDefault, ObjectParameter errorCode)
        {
            var roleMasterIdParameter = roleMasterId.HasValue ?
                new ObjectParameter("RoleMasterId", roleMasterId) :
                new ObjectParameter("RoleMasterId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleMasterUpdate_Result>("usp_RoleMasterUpdate", roleMasterIdParameter, roleNameParameter, descriptionParameter, companyIdParameter, statusParameter, isDefaultParameter, errorCode);
        }
    
        public virtual int usp_ResetPassword(string userEmail, string newPassword)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ResetPassword", userEmailParameter, newPasswordParameter);
        }
    
        public virtual int usp_SetPassword(string oldPassword, Nullable<int> userId, string newPassword)
        {
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetPassword", oldPasswordParameter, userIdParameter, newPasswordParameter);
        }
    
        public virtual int usp_UpdateNewHireStatus(Nullable<int> userId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewHireStatus", userIdParameter, statusParameter);
        }
    
        public virtual int usp_UserInfoDelete(Nullable<int> userInfoID)
        {
            var userInfoIDParameter = userInfoID.HasValue ?
                new ObjectParameter("UserInfoID", userInfoID) :
                new ObjectParameter("UserInfoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserInfoDelete", userInfoIDParameter);
        }
    
        public virtual int usp_UserInfoInsert(Nullable<System.Guid> userInfoCode, string salutation, string fName, string mName, string lName, string suffix, string email, string address1, string address2, string city, string zIP, Nullable<int> countryID, Nullable<int> stateID, string sSN, string workPhone, string homePhone, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> maritalStatus, string homeEmail, string workEmail, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, Nullable<int> companyID)
        {
            var userInfoCodeParameter = userInfoCode.HasValue ?
                new ObjectParameter("UserInfoCode", userInfoCode) :
                new ObjectParameter("UserInfoCode", typeof(System.Guid));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserInfoInsert", userInfoCodeParameter, salutationParameter, fNameParameter, mNameParameter, lNameParameter, suffixParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIDParameter, stateIDParameter, sSNParameter, workPhoneParameter, homePhoneParameter, birthDateParameter, genderParameter, maritalStatusParameter, homeEmailParameter, workEmailParameter, createdOnParameter, modifiedOnParameter, companyIDParameter);
        }
    
        public virtual int usp_UserInfoSelect(Nullable<int> userID, Nullable<int> companyId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserInfoSelect", userIDParameter, companyIdParameter);
        }
    
        public virtual int usp_UserInfoUpdate(string salutation, string firstName, string middleName, string lastName, string suffix, string email, string address1, string address2, string city, string zIP, Nullable<int> countryID, Nullable<int> stateID, string sSN, string workPhone, string homePhone, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> maritalStatus, string homeEmail, string workEmail, Nullable<int> userID)
        {
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserInfoUpdate", salutationParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIDParameter, stateIDParameter, sSNParameter, workPhoneParameter, homePhoneParameter, birthDateParameter, genderParameter, maritalStatusParameter, homeEmailParameter, workEmailParameter, userIDParameter);
        }
    
        public virtual int usp_UserRoleDelete(Nullable<int> roleId, Nullable<int> userId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserRoleDelete", roleIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_UserRoleInsert_Result> usp_UserRoleInsert(Nullable<int> roleId, Nullable<int> userId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserRoleInsert_Result>("usp_UserRoleInsert", roleIdParameter, userIdParameter);
        }
    
        public virtual int usp_UserRoleSelect(Nullable<int> roleId, Nullable<int> userId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserRoleSelect", roleIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_UserRoleUpdate_Result> usp_UserRoleUpdate(Nullable<int> roleId, Nullable<int> userId, ObjectParameter errorCode)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserRoleUpdate_Result>("usp_UserRoleUpdate", roleIdParameter, userIdParameter, errorCode);
        }
    
        public virtual int usp_HolidaysDelete(Nullable<int> holidayId, Nullable<int> companyId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidaysDelete", holidayIdParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidaysInsert(string holidayName, Nullable<System.DateTime> holidayDate, Nullable<int> companyId)
        {
            var holidayNameParameter = holidayName != null ?
                new ObjectParameter("HolidayName", holidayName) :
                new ObjectParameter("HolidayName", typeof(string));
    
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidaysInsert", holidayNameParameter, holidayDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HolidaysSelect_Result> usp_HolidaysSelect(Nullable<int> holidayId, Nullable<int> companyId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidaysSelect_Result>("usp_HolidaysSelect", holidayIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HolidaysSelectAll_Result> usp_HolidaysSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidaysSelectAll_Result>("usp_HolidaysSelectAll", companyIdParameter);
        }
    
        public virtual int usp_HolidaysUpdate(Nullable<int> holidayId, string holidayName, Nullable<System.DateTime> holidayDate, Nullable<int> companyId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var holidayNameParameter = holidayName != null ?
                new ObjectParameter("HolidayName", holidayName) :
                new ObjectParameter("HolidayName", typeof(string));
    
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidaysUpdate", holidayIdParameter, holidayNameParameter, holidayDateParameter, companyIdParameter);
        }
    
        public virtual int usp_LunchDelete(Nullable<int> lunchId, Nullable<int> companyId)
        {
            var lunchIdParameter = lunchId.HasValue ?
                new ObjectParameter("LunchId", lunchId) :
                new ObjectParameter("LunchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LunchDelete", lunchIdParameter, companyIdParameter);
        }
    
        public virtual int usp_LunchInsert(Nullable<System.Guid> lunchCode, string lunchDescription, Nullable<double> minimumWorkTime, Nullable<double> lunchMinutes, Nullable<System.DateTime> lunchTime, Nullable<int> companyId)
        {
            var lunchCodeParameter = lunchCode.HasValue ?
                new ObjectParameter("LunchCode", lunchCode) :
                new ObjectParameter("LunchCode", typeof(System.Guid));
    
            var lunchDescriptionParameter = lunchDescription != null ?
                new ObjectParameter("LunchDescription", lunchDescription) :
                new ObjectParameter("LunchDescription", typeof(string));
    
            var minimumWorkTimeParameter = minimumWorkTime.HasValue ?
                new ObjectParameter("MinimumWorkTime", minimumWorkTime) :
                new ObjectParameter("MinimumWorkTime", typeof(double));
    
            var lunchMinutesParameter = lunchMinutes.HasValue ?
                new ObjectParameter("LunchMinutes", lunchMinutes) :
                new ObjectParameter("LunchMinutes", typeof(double));
    
            var lunchTimeParameter = lunchTime.HasValue ?
                new ObjectParameter("LunchTime", lunchTime) :
                new ObjectParameter("LunchTime", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LunchInsert", lunchCodeParameter, lunchDescriptionParameter, minimumWorkTimeParameter, lunchMinutesParameter, lunchTimeParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_LunchSelect_Result> usp_LunchSelect(Nullable<int> lunchId, Nullable<int> companyId)
        {
            var lunchIdParameter = lunchId.HasValue ?
                new ObjectParameter("LunchId", lunchId) :
                new ObjectParameter("LunchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LunchSelect_Result>("usp_LunchSelect", lunchIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_LunchSelectAll_Result> usp_LunchSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LunchSelectAll_Result>("usp_LunchSelectAll", companyIdParameter);
        }
    
        public virtual int usp_LunchUpdate(Nullable<int> lunchId, Nullable<int> companyId, string lunchDescription, Nullable<double> minimumWorkTime, Nullable<double> lunchMinutes, Nullable<System.DateTime> lunchTime)
        {
            var lunchIdParameter = lunchId.HasValue ?
                new ObjectParameter("LunchId", lunchId) :
                new ObjectParameter("LunchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var lunchDescriptionParameter = lunchDescription != null ?
                new ObjectParameter("LunchDescription", lunchDescription) :
                new ObjectParameter("LunchDescription", typeof(string));
    
            var minimumWorkTimeParameter = minimumWorkTime.HasValue ?
                new ObjectParameter("MinimumWorkTime", minimumWorkTime) :
                new ObjectParameter("MinimumWorkTime", typeof(double));
    
            var lunchMinutesParameter = lunchMinutes.HasValue ?
                new ObjectParameter("LunchMinutes", lunchMinutes) :
                new ObjectParameter("LunchMinutes", typeof(double));
    
            var lunchTimeParameter = lunchTime.HasValue ?
                new ObjectParameter("LunchTime", lunchTime) :
                new ObjectParameter("LunchTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LunchUpdate", lunchIdParameter, companyIdParameter, lunchDescriptionParameter, minimumWorkTimeParameter, lunchMinutesParameter, lunchTimeParameter);
        }
    
        public virtual int usp_OverTimePolicyDelete(Nullable<int> overtimeId, Nullable<int> companyId)
        {
            var overtimeIdParameter = overtimeId.HasValue ?
                new ObjectParameter("OvertimeId", overtimeId) :
                new ObjectParameter("OvertimeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OverTimePolicyDelete", overtimeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_OverTimePolicyInsert(string oTPolicyName, Nullable<int> oTPolicytype, Nullable<double> dailyOTHours, Nullable<double> weeklyOTHours, Nullable<double> dailyDTHours, Nullable<double> weeklyDTHours, Nullable<short> satPayType, Nullable<short> sunPayType, Nullable<float> satDolPremium, Nullable<float> sunDolPremium, Nullable<bool> cRDailyRules, Nullable<double> cRDailyOTHours, Nullable<double> cRDailyDTHours, Nullable<bool> cRWeeklyRule, Nullable<double> cRWeeklyOTHours, Nullable<double> cRWeeklyDTHours, Nullable<bool> consecutiveDayRules, Nullable<int> cDRMinimumWorkDays, Nullable<double> cDRMinimumWorkHours, Nullable<double> cDROTHours, Nullable<double> cDRDTHours, Nullable<bool> forceApproval, Nullable<int> companyId)
        {
            var oTPolicyNameParameter = oTPolicyName != null ?
                new ObjectParameter("OTPolicyName", oTPolicyName) :
                new ObjectParameter("OTPolicyName", typeof(string));
    
            var oTPolicytypeParameter = oTPolicytype.HasValue ?
                new ObjectParameter("OTPolicytype", oTPolicytype) :
                new ObjectParameter("OTPolicytype", typeof(int));
    
            var dailyOTHoursParameter = dailyOTHours.HasValue ?
                new ObjectParameter("DailyOTHours", dailyOTHours) :
                new ObjectParameter("DailyOTHours", typeof(double));
    
            var weeklyOTHoursParameter = weeklyOTHours.HasValue ?
                new ObjectParameter("WeeklyOTHours", weeklyOTHours) :
                new ObjectParameter("WeeklyOTHours", typeof(double));
    
            var dailyDTHoursParameter = dailyDTHours.HasValue ?
                new ObjectParameter("DailyDTHours", dailyDTHours) :
                new ObjectParameter("DailyDTHours", typeof(double));
    
            var weeklyDTHoursParameter = weeklyDTHours.HasValue ?
                new ObjectParameter("WeeklyDTHours", weeklyDTHours) :
                new ObjectParameter("WeeklyDTHours", typeof(double));
    
            var satPayTypeParameter = satPayType.HasValue ?
                new ObjectParameter("SatPayType", satPayType) :
                new ObjectParameter("SatPayType", typeof(short));
    
            var sunPayTypeParameter = sunPayType.HasValue ?
                new ObjectParameter("SunPayType", sunPayType) :
                new ObjectParameter("SunPayType", typeof(short));
    
            var satDolPremiumParameter = satDolPremium.HasValue ?
                new ObjectParameter("SatDolPremium", satDolPremium) :
                new ObjectParameter("SatDolPremium", typeof(float));
    
            var sunDolPremiumParameter = sunDolPremium.HasValue ?
                new ObjectParameter("SunDolPremium", sunDolPremium) :
                new ObjectParameter("SunDolPremium", typeof(float));
    
            var cRDailyRulesParameter = cRDailyRules.HasValue ?
                new ObjectParameter("CRDailyRules", cRDailyRules) :
                new ObjectParameter("CRDailyRules", typeof(bool));
    
            var cRDailyOTHoursParameter = cRDailyOTHours.HasValue ?
                new ObjectParameter("CRDailyOTHours", cRDailyOTHours) :
                new ObjectParameter("CRDailyOTHours", typeof(double));
    
            var cRDailyDTHoursParameter = cRDailyDTHours.HasValue ?
                new ObjectParameter("CRDailyDTHours", cRDailyDTHours) :
                new ObjectParameter("CRDailyDTHours", typeof(double));
    
            var cRWeeklyRuleParameter = cRWeeklyRule.HasValue ?
                new ObjectParameter("CRWeeklyRule", cRWeeklyRule) :
                new ObjectParameter("CRWeeklyRule", typeof(bool));
    
            var cRWeeklyOTHoursParameter = cRWeeklyOTHours.HasValue ?
                new ObjectParameter("CRWeeklyOTHours", cRWeeklyOTHours) :
                new ObjectParameter("CRWeeklyOTHours", typeof(double));
    
            var cRWeeklyDTHoursParameter = cRWeeklyDTHours.HasValue ?
                new ObjectParameter("CRWeeklyDTHours", cRWeeklyDTHours) :
                new ObjectParameter("CRWeeklyDTHours", typeof(double));
    
            var consecutiveDayRulesParameter = consecutiveDayRules.HasValue ?
                new ObjectParameter("ConsecutiveDayRules", consecutiveDayRules) :
                new ObjectParameter("ConsecutiveDayRules", typeof(bool));
    
            var cDRMinimumWorkDaysParameter = cDRMinimumWorkDays.HasValue ?
                new ObjectParameter("CDRMinimumWorkDays", cDRMinimumWorkDays) :
                new ObjectParameter("CDRMinimumWorkDays", typeof(int));
    
            var cDRMinimumWorkHoursParameter = cDRMinimumWorkHours.HasValue ?
                new ObjectParameter("CDRMinimumWorkHours", cDRMinimumWorkHours) :
                new ObjectParameter("CDRMinimumWorkHours", typeof(double));
    
            var cDROTHoursParameter = cDROTHours.HasValue ?
                new ObjectParameter("CDROTHours", cDROTHours) :
                new ObjectParameter("CDROTHours", typeof(double));
    
            var cDRDTHoursParameter = cDRDTHours.HasValue ?
                new ObjectParameter("CDRDTHours", cDRDTHours) :
                new ObjectParameter("CDRDTHours", typeof(double));
    
            var forceApprovalParameter = forceApproval.HasValue ?
                new ObjectParameter("ForceApproval", forceApproval) :
                new ObjectParameter("ForceApproval", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OverTimePolicyInsert", oTPolicyNameParameter, oTPolicytypeParameter, dailyOTHoursParameter, weeklyOTHoursParameter, dailyDTHoursParameter, weeklyDTHoursParameter, satPayTypeParameter, sunPayTypeParameter, satDolPremiumParameter, sunDolPremiumParameter, cRDailyRulesParameter, cRDailyOTHoursParameter, cRDailyDTHoursParameter, cRWeeklyRuleParameter, cRWeeklyOTHoursParameter, cRWeeklyDTHoursParameter, consecutiveDayRulesParameter, cDRMinimumWorkDaysParameter, cDRMinimumWorkHoursParameter, cDROTHoursParameter, cDRDTHoursParameter, forceApprovalParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_OverTimePolicySelect_Result> usp_OverTimePolicySelect(Nullable<int> overtimeId, Nullable<int> companyId)
        {
            var overtimeIdParameter = overtimeId.HasValue ?
                new ObjectParameter("OvertimeId", overtimeId) :
                new ObjectParameter("OvertimeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OverTimePolicySelect_Result>("usp_OverTimePolicySelect", overtimeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_OverTimePolicySelectAll_Result> usp_OverTimePolicySelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OverTimePolicySelectAll_Result>("usp_OverTimePolicySelectAll", companyIdParameter);
        }
    
        public virtual int usp_OverTimePolicyUpdate(Nullable<int> overtimeId, string oTPolicyName, Nullable<int> oTPolicytype, Nullable<double> dailyOTHours, Nullable<double> weeklyOTHours, Nullable<double> dailyDTHours, Nullable<double> weeklyDTHours, Nullable<short> satPayType, Nullable<short> sunPayType, Nullable<float> satDolPremium, Nullable<float> sunDolPremium, Nullable<bool> cRDailyRules, Nullable<double> cRDailyOTHours, Nullable<double> cRDailyDTHours, Nullable<bool> cRWeeklyRule, Nullable<double> cRWeeklyOTHours, Nullable<double> cRWeeklyDTHours, Nullable<bool> consecutiveDayRules, Nullable<int> cDRMinimumWorkDays, Nullable<double> cDRMinimumWorkHours, Nullable<double> cDROTHours, Nullable<double> cDRDTHours, Nullable<bool> forceApproval, Nullable<int> companyId)
        {
            var overtimeIdParameter = overtimeId.HasValue ?
                new ObjectParameter("OvertimeId", overtimeId) :
                new ObjectParameter("OvertimeId", typeof(int));
    
            var oTPolicyNameParameter = oTPolicyName != null ?
                new ObjectParameter("OTPolicyName", oTPolicyName) :
                new ObjectParameter("OTPolicyName", typeof(string));
    
            var oTPolicytypeParameter = oTPolicytype.HasValue ?
                new ObjectParameter("OTPolicytype", oTPolicytype) :
                new ObjectParameter("OTPolicytype", typeof(int));
    
            var dailyOTHoursParameter = dailyOTHours.HasValue ?
                new ObjectParameter("DailyOTHours", dailyOTHours) :
                new ObjectParameter("DailyOTHours", typeof(double));
    
            var weeklyOTHoursParameter = weeklyOTHours.HasValue ?
                new ObjectParameter("WeeklyOTHours", weeklyOTHours) :
                new ObjectParameter("WeeklyOTHours", typeof(double));
    
            var dailyDTHoursParameter = dailyDTHours.HasValue ?
                new ObjectParameter("DailyDTHours", dailyDTHours) :
                new ObjectParameter("DailyDTHours", typeof(double));
    
            var weeklyDTHoursParameter = weeklyDTHours.HasValue ?
                new ObjectParameter("WeeklyDTHours", weeklyDTHours) :
                new ObjectParameter("WeeklyDTHours", typeof(double));
    
            var satPayTypeParameter = satPayType.HasValue ?
                new ObjectParameter("SatPayType", satPayType) :
                new ObjectParameter("SatPayType", typeof(short));
    
            var sunPayTypeParameter = sunPayType.HasValue ?
                new ObjectParameter("SunPayType", sunPayType) :
                new ObjectParameter("SunPayType", typeof(short));
    
            var satDolPremiumParameter = satDolPremium.HasValue ?
                new ObjectParameter("SatDolPremium", satDolPremium) :
                new ObjectParameter("SatDolPremium", typeof(float));
    
            var sunDolPremiumParameter = sunDolPremium.HasValue ?
                new ObjectParameter("SunDolPremium", sunDolPremium) :
                new ObjectParameter("SunDolPremium", typeof(float));
    
            var cRDailyRulesParameter = cRDailyRules.HasValue ?
                new ObjectParameter("CRDailyRules", cRDailyRules) :
                new ObjectParameter("CRDailyRules", typeof(bool));
    
            var cRDailyOTHoursParameter = cRDailyOTHours.HasValue ?
                new ObjectParameter("CRDailyOTHours", cRDailyOTHours) :
                new ObjectParameter("CRDailyOTHours", typeof(double));
    
            var cRDailyDTHoursParameter = cRDailyDTHours.HasValue ?
                new ObjectParameter("CRDailyDTHours", cRDailyDTHours) :
                new ObjectParameter("CRDailyDTHours", typeof(double));
    
            var cRWeeklyRuleParameter = cRWeeklyRule.HasValue ?
                new ObjectParameter("CRWeeklyRule", cRWeeklyRule) :
                new ObjectParameter("CRWeeklyRule", typeof(bool));
    
            var cRWeeklyOTHoursParameter = cRWeeklyOTHours.HasValue ?
                new ObjectParameter("CRWeeklyOTHours", cRWeeklyOTHours) :
                new ObjectParameter("CRWeeklyOTHours", typeof(double));
    
            var cRWeeklyDTHoursParameter = cRWeeklyDTHours.HasValue ?
                new ObjectParameter("CRWeeklyDTHours", cRWeeklyDTHours) :
                new ObjectParameter("CRWeeklyDTHours", typeof(double));
    
            var consecutiveDayRulesParameter = consecutiveDayRules.HasValue ?
                new ObjectParameter("ConsecutiveDayRules", consecutiveDayRules) :
                new ObjectParameter("ConsecutiveDayRules", typeof(bool));
    
            var cDRMinimumWorkDaysParameter = cDRMinimumWorkDays.HasValue ?
                new ObjectParameter("CDRMinimumWorkDays", cDRMinimumWorkDays) :
                new ObjectParameter("CDRMinimumWorkDays", typeof(int));
    
            var cDRMinimumWorkHoursParameter = cDRMinimumWorkHours.HasValue ?
                new ObjectParameter("CDRMinimumWorkHours", cDRMinimumWorkHours) :
                new ObjectParameter("CDRMinimumWorkHours", typeof(double));
    
            var cDROTHoursParameter = cDROTHours.HasValue ?
                new ObjectParameter("CDROTHours", cDROTHours) :
                new ObjectParameter("CDROTHours", typeof(double));
    
            var cDRDTHoursParameter = cDRDTHours.HasValue ?
                new ObjectParameter("CDRDTHours", cDRDTHours) :
                new ObjectParameter("CDRDTHours", typeof(double));
    
            var forceApprovalParameter = forceApproval.HasValue ?
                new ObjectParameter("ForceApproval", forceApproval) :
                new ObjectParameter("ForceApproval", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OverTimePolicyUpdate", overtimeIdParameter, oTPolicyNameParameter, oTPolicytypeParameter, dailyOTHoursParameter, weeklyOTHoursParameter, dailyDTHoursParameter, weeklyDTHoursParameter, satPayTypeParameter, sunPayTypeParameter, satDolPremiumParameter, sunDolPremiumParameter, cRDailyRulesParameter, cRDailyOTHoursParameter, cRDailyDTHoursParameter, cRWeeklyRuleParameter, cRWeeklyOTHoursParameter, cRWeeklyDTHoursParameter, consecutiveDayRulesParameter, cDRMinimumWorkDaysParameter, cDRMinimumWorkHoursParameter, cDROTHoursParameter, cDRDTHoursParameter, forceApprovalParameter, companyIdParameter);
        }
    
        public virtual int usp_PayPeriodTypeDelete(Nullable<int> payPeriodTypeId, Nullable<int> companyId)
        {
            var payPeriodTypeIdParameter = payPeriodTypeId.HasValue ?
                new ObjectParameter("PayPeriodTypeId", payPeriodTypeId) :
                new ObjectParameter("PayPeriodTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodTypeDelete", payPeriodTypeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_PayPeriodTypeInsert(string name, string description, Nullable<int> days, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodTypeInsert", nameParameter, descriptionParameter, daysParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_PayPeriodTypeSelect_Result> usp_PayPeriodTypeSelect(Nullable<int> payPeriodTypeId, Nullable<int> companyId)
        {
            var payPeriodTypeIdParameter = payPeriodTypeId.HasValue ?
                new ObjectParameter("PayPeriodTypeId", payPeriodTypeId) :
                new ObjectParameter("PayPeriodTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayPeriodTypeSelect_Result>("usp_PayPeriodTypeSelect", payPeriodTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_PayPeriodTypeSelectAll_Result> usp_PayPeriodTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayPeriodTypeSelectAll_Result>("usp_PayPeriodTypeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_PayPeriodTypeUpdate(Nullable<int> payPeriodTypeId, string name, string description, Nullable<int> days, Nullable<int> companyId, Nullable<bool> status)
        {
            var payPeriodTypeIdParameter = payPeriodTypeId.HasValue ?
                new ObjectParameter("PayPeriodTypeId", payPeriodTypeId) :
                new ObjectParameter("PayPeriodTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodTypeUpdate", payPeriodTypeIdParameter, nameParameter, descriptionParameter, daysParameter, companyIdParameter, statusParameter);
        }
    
        public virtual int usp_PayTypeDelete(Nullable<int> payTypeId, Nullable<int> companyId)
        {
            var payTypeIdParameter = payTypeId.HasValue ?
                new ObjectParameter("PayTypeId", payTypeId) :
                new ObjectParameter("PayTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayTypeDelete", payTypeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_PayTypeInsert(string payCode, string payTypeCode, string description, string punchType, Nullable<int> timeTypeId, Nullable<bool> accrueToOT, string mapToHR, string mapToPayroll, Nullable<bool> display, Nullable<decimal> rateFactor, string gLCode, Nullable<bool> isDefault, string payrollCode, Nullable<bool> bypassBRM, Nullable<int> companyId)
        {
            var payCodeParameter = payCode != null ?
                new ObjectParameter("PayCode", payCode) :
                new ObjectParameter("PayCode", typeof(string));
    
            var payTypeCodeParameter = payTypeCode != null ?
                new ObjectParameter("PayTypeCode", payTypeCode) :
                new ObjectParameter("PayTypeCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var punchTypeParameter = punchType != null ?
                new ObjectParameter("PunchType", punchType) :
                new ObjectParameter("PunchType", typeof(string));
    
            var timeTypeIdParameter = timeTypeId.HasValue ?
                new ObjectParameter("TimeTypeId", timeTypeId) :
                new ObjectParameter("TimeTypeId", typeof(int));
    
            var accrueToOTParameter = accrueToOT.HasValue ?
                new ObjectParameter("AccrueToOT", accrueToOT) :
                new ObjectParameter("AccrueToOT", typeof(bool));
    
            var mapToHRParameter = mapToHR != null ?
                new ObjectParameter("MapToHR", mapToHR) :
                new ObjectParameter("MapToHR", typeof(string));
    
            var mapToPayrollParameter = mapToPayroll != null ?
                new ObjectParameter("MapToPayroll", mapToPayroll) :
                new ObjectParameter("MapToPayroll", typeof(string));
    
            var displayParameter = display.HasValue ?
                new ObjectParameter("Display", display) :
                new ObjectParameter("Display", typeof(bool));
    
            var rateFactorParameter = rateFactor.HasValue ?
                new ObjectParameter("RateFactor", rateFactor) :
                new ObjectParameter("RateFactor", typeof(decimal));
    
            var gLCodeParameter = gLCode != null ?
                new ObjectParameter("GLCode", gLCode) :
                new ObjectParameter("GLCode", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var payrollCodeParameter = payrollCode != null ?
                new ObjectParameter("PayrollCode", payrollCode) :
                new ObjectParameter("PayrollCode", typeof(string));
    
            var bypassBRMParameter = bypassBRM.HasValue ?
                new ObjectParameter("BypassBRM", bypassBRM) :
                new ObjectParameter("BypassBRM", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayTypeInsert", payCodeParameter, payTypeCodeParameter, descriptionParameter, punchTypeParameter, timeTypeIdParameter, accrueToOTParameter, mapToHRParameter, mapToPayrollParameter, displayParameter, rateFactorParameter, gLCodeParameter, isDefaultParameter, payrollCodeParameter, bypassBRMParameter, companyIdParameter);
        }
    
        public virtual int usp_PayTypeUpdate(Nullable<int> payTypeId, string payCode, string payTypeCode, string description, string punchType, Nullable<int> timeTypeId, Nullable<bool> accrueToOT, string mapToHR, string mapToPayroll, Nullable<bool> display, Nullable<decimal> rateFactor, string gLCode, Nullable<bool> isDefault, string payrollCode, Nullable<bool> bypassBRM, Nullable<int> companyId)
        {
            var payTypeIdParameter = payTypeId.HasValue ?
                new ObjectParameter("PayTypeId", payTypeId) :
                new ObjectParameter("PayTypeId", typeof(int));
    
            var payCodeParameter = payCode != null ?
                new ObjectParameter("PayCode", payCode) :
                new ObjectParameter("PayCode", typeof(string));
    
            var payTypeCodeParameter = payTypeCode != null ?
                new ObjectParameter("PayTypeCode", payTypeCode) :
                new ObjectParameter("PayTypeCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var punchTypeParameter = punchType != null ?
                new ObjectParameter("PunchType", punchType) :
                new ObjectParameter("PunchType", typeof(string));
    
            var timeTypeIdParameter = timeTypeId.HasValue ?
                new ObjectParameter("TimeTypeId", timeTypeId) :
                new ObjectParameter("TimeTypeId", typeof(int));
    
            var accrueToOTParameter = accrueToOT.HasValue ?
                new ObjectParameter("AccrueToOT", accrueToOT) :
                new ObjectParameter("AccrueToOT", typeof(bool));
    
            var mapToHRParameter = mapToHR != null ?
                new ObjectParameter("MapToHR", mapToHR) :
                new ObjectParameter("MapToHR", typeof(string));
    
            var mapToPayrollParameter = mapToPayroll != null ?
                new ObjectParameter("MapToPayroll", mapToPayroll) :
                new ObjectParameter("MapToPayroll", typeof(string));
    
            var displayParameter = display.HasValue ?
                new ObjectParameter("Display", display) :
                new ObjectParameter("Display", typeof(bool));
    
            var rateFactorParameter = rateFactor.HasValue ?
                new ObjectParameter("RateFactor", rateFactor) :
                new ObjectParameter("RateFactor", typeof(decimal));
    
            var gLCodeParameter = gLCode != null ?
                new ObjectParameter("GLCode", gLCode) :
                new ObjectParameter("GLCode", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var payrollCodeParameter = payrollCode != null ?
                new ObjectParameter("PayrollCode", payrollCode) :
                new ObjectParameter("PayrollCode", typeof(string));
    
            var bypassBRMParameter = bypassBRM.HasValue ?
                new ObjectParameter("BypassBRM", bypassBRM) :
                new ObjectParameter("BypassBRM", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayTypeUpdate", payTypeIdParameter, payCodeParameter, payTypeCodeParameter, descriptionParameter, punchTypeParameter, timeTypeIdParameter, accrueToOTParameter, mapToHRParameter, mapToPayrollParameter, displayParameter, rateFactorParameter, gLCodeParameter, isDefaultParameter, payrollCodeParameter, bypassBRMParameter, companyIdParameter);
        }
    
        public virtual int usp_RoundingDelete(Nullable<int> roundingId, Nullable<int> companyId)
        {
            var roundingIdParameter = roundingId.HasValue ?
                new ObjectParameter("RoundingId", roundingId) :
                new ObjectParameter("RoundingId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundingDelete", roundingIdParameter, companyIdParameter);
        }
    
        public virtual int usp_RoundingInsert(string roundingDescription, Nullable<short> startRoundType, Nullable<short> startRoundMinutes, Nullable<short> endRoundType, Nullable<short> endPunchMinutes, Nullable<short> lunchStartRoundType, Nullable<short> lunchStartRoundMinutes, Nullable<short> lunchEndRoundType, Nullable<short> lunchEndRoundTMinutes, Nullable<short> breakStartRoundType, Nullable<short> breakStartRoundMinutes, Nullable<short> breakEndRoundType, Nullable<short> breakEndRoundTMinutes, string roundingMethod, Nullable<bool> rptExceptions, Nullable<short> reportEarlyIn, Nullable<short> reportEarlyOut, Nullable<short> reportLateIn, Nullable<short> reportLateOut, Nullable<short> reportLunchUnder, Nullable<short> reportLunchOver, Nullable<int> companyId)
        {
            var roundingDescriptionParameter = roundingDescription != null ?
                new ObjectParameter("RoundingDescription", roundingDescription) :
                new ObjectParameter("RoundingDescription", typeof(string));
    
            var startRoundTypeParameter = startRoundType.HasValue ?
                new ObjectParameter("StartRoundType", startRoundType) :
                new ObjectParameter("StartRoundType", typeof(short));
    
            var startRoundMinutesParameter = startRoundMinutes.HasValue ?
                new ObjectParameter("StartRoundMinutes", startRoundMinutes) :
                new ObjectParameter("StartRoundMinutes", typeof(short));
    
            var endRoundTypeParameter = endRoundType.HasValue ?
                new ObjectParameter("EndRoundType", endRoundType) :
                new ObjectParameter("EndRoundType", typeof(short));
    
            var endPunchMinutesParameter = endPunchMinutes.HasValue ?
                new ObjectParameter("EndPunchMinutes", endPunchMinutes) :
                new ObjectParameter("EndPunchMinutes", typeof(short));
    
            var lunchStartRoundTypeParameter = lunchStartRoundType.HasValue ?
                new ObjectParameter("LunchStartRoundType", lunchStartRoundType) :
                new ObjectParameter("LunchStartRoundType", typeof(short));
    
            var lunchStartRoundMinutesParameter = lunchStartRoundMinutes.HasValue ?
                new ObjectParameter("LunchStartRoundMinutes", lunchStartRoundMinutes) :
                new ObjectParameter("LunchStartRoundMinutes", typeof(short));
    
            var lunchEndRoundTypeParameter = lunchEndRoundType.HasValue ?
                new ObjectParameter("LunchEndRoundType", lunchEndRoundType) :
                new ObjectParameter("LunchEndRoundType", typeof(short));
    
            var lunchEndRoundTMinutesParameter = lunchEndRoundTMinutes.HasValue ?
                new ObjectParameter("LunchEndRoundTMinutes", lunchEndRoundTMinutes) :
                new ObjectParameter("LunchEndRoundTMinutes", typeof(short));
    
            var breakStartRoundTypeParameter = breakStartRoundType.HasValue ?
                new ObjectParameter("BreakStartRoundType", breakStartRoundType) :
                new ObjectParameter("BreakStartRoundType", typeof(short));
    
            var breakStartRoundMinutesParameter = breakStartRoundMinutes.HasValue ?
                new ObjectParameter("BreakStartRoundMinutes", breakStartRoundMinutes) :
                new ObjectParameter("BreakStartRoundMinutes", typeof(short));
    
            var breakEndRoundTypeParameter = breakEndRoundType.HasValue ?
                new ObjectParameter("BreakEndRoundType", breakEndRoundType) :
                new ObjectParameter("BreakEndRoundType", typeof(short));
    
            var breakEndRoundTMinutesParameter = breakEndRoundTMinutes.HasValue ?
                new ObjectParameter("BreakEndRoundTMinutes", breakEndRoundTMinutes) :
                new ObjectParameter("BreakEndRoundTMinutes", typeof(short));
    
            var roundingMethodParameter = roundingMethod != null ?
                new ObjectParameter("RoundingMethod", roundingMethod) :
                new ObjectParameter("RoundingMethod", typeof(string));
    
            var rptExceptionsParameter = rptExceptions.HasValue ?
                new ObjectParameter("RptExceptions", rptExceptions) :
                new ObjectParameter("RptExceptions", typeof(bool));
    
            var reportEarlyInParameter = reportEarlyIn.HasValue ?
                new ObjectParameter("ReportEarlyIn", reportEarlyIn) :
                new ObjectParameter("ReportEarlyIn", typeof(short));
    
            var reportEarlyOutParameter = reportEarlyOut.HasValue ?
                new ObjectParameter("ReportEarlyOut", reportEarlyOut) :
                new ObjectParameter("ReportEarlyOut", typeof(short));
    
            var reportLateInParameter = reportLateIn.HasValue ?
                new ObjectParameter("ReportLateIn", reportLateIn) :
                new ObjectParameter("ReportLateIn", typeof(short));
    
            var reportLateOutParameter = reportLateOut.HasValue ?
                new ObjectParameter("ReportLateOut", reportLateOut) :
                new ObjectParameter("ReportLateOut", typeof(short));
    
            var reportLunchUnderParameter = reportLunchUnder.HasValue ?
                new ObjectParameter("ReportLunchUnder", reportLunchUnder) :
                new ObjectParameter("ReportLunchUnder", typeof(short));
    
            var reportLunchOverParameter = reportLunchOver.HasValue ?
                new ObjectParameter("ReportLunchOver", reportLunchOver) :
                new ObjectParameter("ReportLunchOver", typeof(short));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundingInsert", roundingDescriptionParameter, startRoundTypeParameter, startRoundMinutesParameter, endRoundTypeParameter, endPunchMinutesParameter, lunchStartRoundTypeParameter, lunchStartRoundMinutesParameter, lunchEndRoundTypeParameter, lunchEndRoundTMinutesParameter, breakStartRoundTypeParameter, breakStartRoundMinutesParameter, breakEndRoundTypeParameter, breakEndRoundTMinutesParameter, roundingMethodParameter, rptExceptionsParameter, reportEarlyInParameter, reportEarlyOutParameter, reportLateInParameter, reportLateOutParameter, reportLunchUnderParameter, reportLunchOverParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RoundingSelect_Result> usp_RoundingSelect(Nullable<int> roundingId, Nullable<int> companyId)
        {
            var roundingIdParameter = roundingId.HasValue ?
                new ObjectParameter("RoundingId", roundingId) :
                new ObjectParameter("RoundingId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundingSelect_Result>("usp_RoundingSelect", roundingIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RoundingSelectAll_Result> usp_RoundingSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundingSelectAll_Result>("usp_RoundingSelectAll", companyIdParameter);
        }
    
        public virtual int usp_RoundingUpdate(Nullable<int> roundingId, string roundingDescription, Nullable<short> startRoundType, Nullable<short> startRoundMinutes, Nullable<short> endRoundType, Nullable<short> endPunchMinutes, Nullable<short> lunchStartRoundType, Nullable<short> lunchStartRoundMinutes, Nullable<short> lunchEndRoundType, Nullable<short> lunchEndRoundTMinutes, Nullable<short> breakStartRoundType, Nullable<short> breakStartRoundMinutes, Nullable<short> breakEndRoundType, Nullable<short> breakEndRoundTMinutes, string roundingMethod, Nullable<bool> rptExceptions, Nullable<short> reportEarlyIn, Nullable<short> reportEarlyOut, Nullable<short> reportLateIn, Nullable<short> reportLateOut, Nullable<short> reportLunchUnder, Nullable<short> reportLunchOver, Nullable<int> companyId)
        {
            var roundingIdParameter = roundingId.HasValue ?
                new ObjectParameter("RoundingId", roundingId) :
                new ObjectParameter("RoundingId", typeof(int));
    
            var roundingDescriptionParameter = roundingDescription != null ?
                new ObjectParameter("RoundingDescription", roundingDescription) :
                new ObjectParameter("RoundingDescription", typeof(string));
    
            var startRoundTypeParameter = startRoundType.HasValue ?
                new ObjectParameter("StartRoundType", startRoundType) :
                new ObjectParameter("StartRoundType", typeof(short));
    
            var startRoundMinutesParameter = startRoundMinutes.HasValue ?
                new ObjectParameter("StartRoundMinutes", startRoundMinutes) :
                new ObjectParameter("StartRoundMinutes", typeof(short));
    
            var endRoundTypeParameter = endRoundType.HasValue ?
                new ObjectParameter("EndRoundType", endRoundType) :
                new ObjectParameter("EndRoundType", typeof(short));
    
            var endPunchMinutesParameter = endPunchMinutes.HasValue ?
                new ObjectParameter("EndPunchMinutes", endPunchMinutes) :
                new ObjectParameter("EndPunchMinutes", typeof(short));
    
            var lunchStartRoundTypeParameter = lunchStartRoundType.HasValue ?
                new ObjectParameter("LunchStartRoundType", lunchStartRoundType) :
                new ObjectParameter("LunchStartRoundType", typeof(short));
    
            var lunchStartRoundMinutesParameter = lunchStartRoundMinutes.HasValue ?
                new ObjectParameter("LunchStartRoundMinutes", lunchStartRoundMinutes) :
                new ObjectParameter("LunchStartRoundMinutes", typeof(short));
    
            var lunchEndRoundTypeParameter = lunchEndRoundType.HasValue ?
                new ObjectParameter("LunchEndRoundType", lunchEndRoundType) :
                new ObjectParameter("LunchEndRoundType", typeof(short));
    
            var lunchEndRoundTMinutesParameter = lunchEndRoundTMinutes.HasValue ?
                new ObjectParameter("LunchEndRoundTMinutes", lunchEndRoundTMinutes) :
                new ObjectParameter("LunchEndRoundTMinutes", typeof(short));
    
            var breakStartRoundTypeParameter = breakStartRoundType.HasValue ?
                new ObjectParameter("BreakStartRoundType", breakStartRoundType) :
                new ObjectParameter("BreakStartRoundType", typeof(short));
    
            var breakStartRoundMinutesParameter = breakStartRoundMinutes.HasValue ?
                new ObjectParameter("BreakStartRoundMinutes", breakStartRoundMinutes) :
                new ObjectParameter("BreakStartRoundMinutes", typeof(short));
    
            var breakEndRoundTypeParameter = breakEndRoundType.HasValue ?
                new ObjectParameter("BreakEndRoundType", breakEndRoundType) :
                new ObjectParameter("BreakEndRoundType", typeof(short));
    
            var breakEndRoundTMinutesParameter = breakEndRoundTMinutes.HasValue ?
                new ObjectParameter("BreakEndRoundTMinutes", breakEndRoundTMinutes) :
                new ObjectParameter("BreakEndRoundTMinutes", typeof(short));
    
            var roundingMethodParameter = roundingMethod != null ?
                new ObjectParameter("RoundingMethod", roundingMethod) :
                new ObjectParameter("RoundingMethod", typeof(string));
    
            var rptExceptionsParameter = rptExceptions.HasValue ?
                new ObjectParameter("RptExceptions", rptExceptions) :
                new ObjectParameter("RptExceptions", typeof(bool));
    
            var reportEarlyInParameter = reportEarlyIn.HasValue ?
                new ObjectParameter("ReportEarlyIn", reportEarlyIn) :
                new ObjectParameter("ReportEarlyIn", typeof(short));
    
            var reportEarlyOutParameter = reportEarlyOut.HasValue ?
                new ObjectParameter("ReportEarlyOut", reportEarlyOut) :
                new ObjectParameter("ReportEarlyOut", typeof(short));
    
            var reportLateInParameter = reportLateIn.HasValue ?
                new ObjectParameter("ReportLateIn", reportLateIn) :
                new ObjectParameter("ReportLateIn", typeof(short));
    
            var reportLateOutParameter = reportLateOut.HasValue ?
                new ObjectParameter("ReportLateOut", reportLateOut) :
                new ObjectParameter("ReportLateOut", typeof(short));
    
            var reportLunchUnderParameter = reportLunchUnder.HasValue ?
                new ObjectParameter("ReportLunchUnder", reportLunchUnder) :
                new ObjectParameter("ReportLunchUnder", typeof(short));
    
            var reportLunchOverParameter = reportLunchOver.HasValue ?
                new ObjectParameter("ReportLunchOver", reportLunchOver) :
                new ObjectParameter("ReportLunchOver", typeof(short));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundingUpdate", roundingIdParameter, roundingDescriptionParameter, startRoundTypeParameter, startRoundMinutesParameter, endRoundTypeParameter, endPunchMinutesParameter, lunchStartRoundTypeParameter, lunchStartRoundMinutesParameter, lunchEndRoundTypeParameter, lunchEndRoundTMinutesParameter, breakStartRoundTypeParameter, breakStartRoundMinutesParameter, breakEndRoundTypeParameter, breakEndRoundTMinutesParameter, roundingMethodParameter, rptExceptionsParameter, reportEarlyInParameter, reportEarlyOutParameter, reportLateInParameter, reportLateOutParameter, reportLunchUnderParameter, reportLunchOverParameter, companyIdParameter);
        }
    
        public virtual int usp_TimeTypeDelete(Nullable<int> timeTypeId, Nullable<int> companyId)
        {
            var timeTypeIdParameter = timeTypeId.HasValue ?
                new ObjectParameter("TimeTypeId", timeTypeId) :
                new ObjectParameter("TimeTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeTypeDelete", timeTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TimeTypeInsert_Result> usp_TimeTypeInsert(string name, string description, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TimeTypeInsert_Result>("usp_TimeTypeInsert", nameParameter, descriptionParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_TimeTypeSelect_Result> usp_TimeTypeSelect(Nullable<int> timeTypeId, Nullable<int> companyId)
        {
            var timeTypeIdParameter = timeTypeId.HasValue ?
                new ObjectParameter("TimeTypeId", timeTypeId) :
                new ObjectParameter("TimeTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TimeTypeSelect_Result>("usp_TimeTypeSelect", timeTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TimeTypeSelectAll_Result> usp_TimeTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TimeTypeSelectAll_Result>("usp_TimeTypeSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TimeTypeUpdate_Result> usp_TimeTypeUpdate(Nullable<int> timeTypeId, string name, string description, Nullable<int> companyId, Nullable<bool> status)
        {
            var timeTypeIdParameter = timeTypeId.HasValue ?
                new ObjectParameter("TimeTypeId", timeTypeId) :
                new ObjectParameter("TimeTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TimeTypeUpdate_Result>("usp_TimeTypeUpdate", timeTypeIdParameter, nameParameter, descriptionParameter, companyIdParameter, statusParameter);
        }
    
        public virtual int usp_CountryRegionDelete(string countryRegionCode)
        {
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CountryRegionDelete", countryRegionCodeParameter);
        }
    
        public virtual ObjectResult<usp_CountryRegionInsert_Result> usp_CountryRegionInsert(string countryRegionCode, string name, Nullable<System.DateTime> modifiedDate)
        {
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountryRegionInsert_Result>("usp_CountryRegionInsert", countryRegionCodeParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<usp_CountryRegionSelect_Result> usp_CountryRegionSelect(string countryRegionCode)
        {
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountryRegionSelect_Result>("usp_CountryRegionSelect", countryRegionCodeParameter);
        }
    
        public virtual ObjectResult<usp_CountryRegionSelectAll_Result> usp_CountryRegionSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountryRegionSelectAll_Result>("usp_CountryRegionSelectAll");
        }
    
        public virtual ObjectResult<usp_CountryRegionUpdate_Result> usp_CountryRegionUpdate(string countryRegionCode, string name, Nullable<System.DateTime> modifiedDate)
        {
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountryRegionUpdate_Result>("usp_CountryRegionUpdate", countryRegionCodeParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int usp_I9AcceptableDocuments1Delete(Nullable<int> i9AcceptableDocuments1ID)
        {
            var i9AcceptableDocuments1IDParameter = i9AcceptableDocuments1ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments1ID", i9AcceptableDocuments1ID) :
                new ObjectParameter("I9AcceptableDocuments1ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_I9AcceptableDocuments1Delete", i9AcceptableDocuments1IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments1Insert_Result> usp_I9AcceptableDocuments1Insert(string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments1Insert_Result>("usp_I9AcceptableDocuments1Insert", nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments1Select_Result> usp_I9AcceptableDocuments1Select(Nullable<int> i9AcceptableDocuments1ID)
        {
            var i9AcceptableDocuments1IDParameter = i9AcceptableDocuments1ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments1ID", i9AcceptableDocuments1ID) :
                new ObjectParameter("I9AcceptableDocuments1ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments1Select_Result>("usp_I9AcceptableDocuments1Select", i9AcceptableDocuments1IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments1SelectByCompanyID_Result> usp_I9AcceptableDocuments1SelectByCompanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments1SelectByCompanyID_Result>("usp_I9AcceptableDocuments1SelectByCompanyID", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments1Update_Result> usp_I9AcceptableDocuments1Update(Nullable<int> i9AcceptableDocuments1ID, string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var i9AcceptableDocuments1IDParameter = i9AcceptableDocuments1ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments1ID", i9AcceptableDocuments1ID) :
                new ObjectParameter("I9AcceptableDocuments1ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments1Update_Result>("usp_I9AcceptableDocuments1Update", i9AcceptableDocuments1IDParameter, nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual int usp_I9AcceptableDocuments2Delete(Nullable<int> i9AcceptableDocuments2ID)
        {
            var i9AcceptableDocuments2IDParameter = i9AcceptableDocuments2ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments2ID", i9AcceptableDocuments2ID) :
                new ObjectParameter("I9AcceptableDocuments2ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_I9AcceptableDocuments2Delete", i9AcceptableDocuments2IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments2Insert_Result> usp_I9AcceptableDocuments2Insert(string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments2Insert_Result>("usp_I9AcceptableDocuments2Insert", nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments2Select_Result> usp_I9AcceptableDocuments2Select(Nullable<int> i9AcceptableDocuments2ID)
        {
            var i9AcceptableDocuments2IDParameter = i9AcceptableDocuments2ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments2ID", i9AcceptableDocuments2ID) :
                new ObjectParameter("I9AcceptableDocuments2ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments2Select_Result>("usp_I9AcceptableDocuments2Select", i9AcceptableDocuments2IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments2SelectByCompanyID_Result> usp_I9AcceptableDocuments2SelectByCompanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments2SelectByCompanyID_Result>("usp_I9AcceptableDocuments2SelectByCompanyID", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments2Update_Result> usp_I9AcceptableDocuments2Update(Nullable<int> i9AcceptableDocuments2ID, string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var i9AcceptableDocuments2IDParameter = i9AcceptableDocuments2ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments2ID", i9AcceptableDocuments2ID) :
                new ObjectParameter("I9AcceptableDocuments2ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments2Update_Result>("usp_I9AcceptableDocuments2Update", i9AcceptableDocuments2IDParameter, nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual int usp_I9AcceptableDocuments3Delete(Nullable<int> i9AcceptableDocuments3ID)
        {
            var i9AcceptableDocuments3IDParameter = i9AcceptableDocuments3ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments3ID", i9AcceptableDocuments3ID) :
                new ObjectParameter("I9AcceptableDocuments3ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_I9AcceptableDocuments3Delete", i9AcceptableDocuments3IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments3Insert_Result> usp_I9AcceptableDocuments3Insert(string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments3Insert_Result>("usp_I9AcceptableDocuments3Insert", nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments3Select_Result> usp_I9AcceptableDocuments3Select(Nullable<int> i9AcceptableDocuments3ID)
        {
            var i9AcceptableDocuments3IDParameter = i9AcceptableDocuments3ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments3ID", i9AcceptableDocuments3ID) :
                new ObjectParameter("I9AcceptableDocuments3ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments3Select_Result>("usp_I9AcceptableDocuments3Select", i9AcceptableDocuments3IDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments3SelectByCompanyID_Result> usp_I9AcceptableDocuments3SelectByCompanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments3SelectByCompanyID_Result>("usp_I9AcceptableDocuments3SelectByCompanyID", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_I9AcceptableDocuments3Update_Result> usp_I9AcceptableDocuments3Update(Nullable<int> i9AcceptableDocuments3ID, string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var i9AcceptableDocuments3IDParameter = i9AcceptableDocuments3ID.HasValue ?
                new ObjectParameter("I9AcceptableDocuments3ID", i9AcceptableDocuments3ID) :
                new ObjectParameter("I9AcceptableDocuments3ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_I9AcceptableDocuments3Update_Result>("usp_I9AcceptableDocuments3Update", i9AcceptableDocuments3IDParameter, nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_LocationUpdate_Result> usp_LocationUpdate(Nullable<int> locationID, string name, Nullable<int> companyID, Nullable<bool> status, string description)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LocationUpdate_Result>("usp_LocationUpdate", locationIDParameter, nameParameter, companyIDParameter, statusParameter, descriptionParameter);
        }
    
        public virtual int usp_StateProvinceInsert(string stateProvinceCode, string countryRegionCode, Nullable<bool> isOnlyStateProvinceFlag, string name, Nullable<int> territoryID, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var stateProvinceCodeParameter = stateProvinceCode != null ?
                new ObjectParameter("StateProvinceCode", stateProvinceCode) :
                new ObjectParameter("StateProvinceCode", typeof(string));
    
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var isOnlyStateProvinceFlagParameter = isOnlyStateProvinceFlag.HasValue ?
                new ObjectParameter("IsOnlyStateProvinceFlag", isOnlyStateProvinceFlag) :
                new ObjectParameter("IsOnlyStateProvinceFlag", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StateProvinceInsert", stateProvinceCodeParameter, countryRegionCodeParameter, isOnlyStateProvinceFlagParameter, nameParameter, territoryIDParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int usp_StateProvinceUpdate(Nullable<int> stateProvinceID, string stateProvinceCode, string countryRegionCode, Nullable<bool> isOnlyStateProvinceFlag, string name, Nullable<int> territoryID, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var stateProvinceIDParameter = stateProvinceID.HasValue ?
                new ObjectParameter("StateProvinceID", stateProvinceID) :
                new ObjectParameter("StateProvinceID", typeof(int));
    
            var stateProvinceCodeParameter = stateProvinceCode != null ?
                new ObjectParameter("StateProvinceCode", stateProvinceCode) :
                new ObjectParameter("StateProvinceCode", typeof(string));
    
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var isOnlyStateProvinceFlagParameter = isOnlyStateProvinceFlag.HasValue ?
                new ObjectParameter("IsOnlyStateProvinceFlag", isOnlyStateProvinceFlag) :
                new ObjectParameter("IsOnlyStateProvinceFlag", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StateProvinceUpdate", stateProvinceIDParameter, stateProvinceCodeParameter, countryRegionCodeParameter, isOnlyStateProvinceFlagParameter, nameParameter, territoryIDParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int InsertImportCSVEmployeedata()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImportCSVEmployeedata");
        }
    
        public virtual int usp_EmployeeDependentDelete(Nullable<int> companyId, Nullable<int> employeeDependentId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeDependentIdParameter = employeeDependentId.HasValue ?
                new ObjectParameter("EmployeeDependentId", employeeDependentId) :
                new ObjectParameter("EmployeeDependentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeDependentDelete", companyIdParameter, employeeDependentIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDependentInsert_Result> usp_EmployeeDependentInsert(Nullable<int> companyId, Nullable<int> userId, string firstName, string lastName, string middleName, Nullable<int> suffix, string alias, Nullable<int> salutation, string street1, string street2, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, string homeEmail, string homePhone, string cellPhone, string sSN, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> relationShip, Nullable<bool> imputedIncome, Nullable<bool> disabled, Nullable<bool> smoker, Nullable<bool> student, string createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var suffixParameter = suffix.HasValue ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(int));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var salutationParameter = salutation.HasValue ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var relationShipParameter = relationShip.HasValue ?
                new ObjectParameter("RelationShip", relationShip) :
                new ObjectParameter("RelationShip", typeof(int));
    
            var imputedIncomeParameter = imputedIncome.HasValue ?
                new ObjectParameter("ImputedIncome", imputedIncome) :
                new ObjectParameter("ImputedIncome", typeof(bool));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            var smokerParameter = smoker.HasValue ?
                new ObjectParameter("Smoker", smoker) :
                new ObjectParameter("Smoker", typeof(bool));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("Student", student) :
                new ObjectParameter("Student", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDependentInsert_Result>("usp_EmployeeDependentInsert", companyIdParameter, userIdParameter, firstNameParameter, lastNameParameter, middleNameParameter, suffixParameter, aliasParameter, salutationParameter, street1Parameter, street2Parameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, homeEmailParameter, homePhoneParameter, cellPhoneParameter, sSNParameter, birthDateParameter, genderParameter, relationShipParameter, imputedIncomeParameter, disabledParameter, smokerParameter, studentParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDependentSelect_Result> usp_EmployeeDependentSelect(Nullable<int> companyId, Nullable<int> employeeDependentId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeDependentIdParameter = employeeDependentId.HasValue ?
                new ObjectParameter("EmployeeDependentId", employeeDependentId) :
                new ObjectParameter("EmployeeDependentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDependentSelect_Result>("usp_EmployeeDependentSelect", companyIdParameter, employeeDependentIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDependentSelectAll_Result> usp_EmployeeDependentSelectAll(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDependentSelectAll_Result>("usp_EmployeeDependentSelectAll", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDependentUpdate_Result> usp_EmployeeDependentUpdate(Nullable<int> companyId, Nullable<int> employeeDependentId, string firstName, string lastName, string middleName, Nullable<int> suffix, string alias, Nullable<int> salutation, string street1, string street2, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, string homeEmail, string homePhone, string cellPhone, string sSN, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> relationShip, Nullable<bool> imputedIncome, Nullable<bool> disabled, Nullable<bool> smoker, Nullable<bool> student, string modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeDependentIdParameter = employeeDependentId.HasValue ?
                new ObjectParameter("EmployeeDependentId", employeeDependentId) :
                new ObjectParameter("EmployeeDependentId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var suffixParameter = suffix.HasValue ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(int));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var salutationParameter = salutation.HasValue ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var relationShipParameter = relationShip.HasValue ?
                new ObjectParameter("RelationShip", relationShip) :
                new ObjectParameter("RelationShip", typeof(int));
    
            var imputedIncomeParameter = imputedIncome.HasValue ?
                new ObjectParameter("ImputedIncome", imputedIncome) :
                new ObjectParameter("ImputedIncome", typeof(bool));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            var smokerParameter = smoker.HasValue ?
                new ObjectParameter("Smoker", smoker) :
                new ObjectParameter("Smoker", typeof(bool));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("Student", student) :
                new ObjectParameter("Student", typeof(bool));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDependentUpdate_Result>("usp_EmployeeDependentUpdate", companyIdParameter, employeeDependentIdParameter, firstNameParameter, lastNameParameter, middleNameParameter, suffixParameter, aliasParameter, salutationParameter, street1Parameter, street2Parameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, homeEmailParameter, homePhoneParameter, cellPhoneParameter, sSNParameter, birthDateParameter, genderParameter, relationShipParameter, imputedIncomeParameter, disabledParameter, smokerParameter, studentParameter, modifiedByParameter);
        }
    
        public virtual int usp_EmployeeDirectDepositDelete(Nullable<int> employeeDirectDepositId)
        {
            var employeeDirectDepositIdParameter = employeeDirectDepositId.HasValue ?
                new ObjectParameter("EmployeeDirectDepositId", employeeDirectDepositId) :
                new ObjectParameter("EmployeeDirectDepositId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeDirectDepositDelete", employeeDirectDepositIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDirectDepositInsert_Result> usp_EmployeeDirectDepositInsert(Nullable<int> companyId, Nullable<int> userId, Nullable<int> accountType, string transitorABANumber, string accountNumber, string amount)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var transitorABANumberParameter = transitorABANumber != null ?
                new ObjectParameter("TransitorABANumber", transitorABANumber) :
                new ObjectParameter("TransitorABANumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDirectDepositInsert_Result>("usp_EmployeeDirectDepositInsert", companyIdParameter, userIdParameter, accountTypeParameter, transitorABANumberParameter, accountNumberParameter, amountParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDirectDepositSelect_Result> usp_EmployeeDirectDepositSelect(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDirectDepositSelect_Result>("usp_EmployeeDirectDepositSelect", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDirectDepositSelectById_Result> usp_EmployeeDirectDepositSelectById(Nullable<int> directDepositId, Nullable<int> companyId, Nullable<int> userId)
        {
            var directDepositIdParameter = directDepositId.HasValue ?
                new ObjectParameter("DirectDepositId", directDepositId) :
                new ObjectParameter("DirectDepositId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDirectDepositSelectById_Result>("usp_EmployeeDirectDepositSelectById", directDepositIdParameter, companyIdParameter, userIdParameter);
        }
    
        public virtual int usp_EmployeeEmergencyContactDelete(Nullable<int> employeeEmergencyContactId, ObjectParameter errorCode)
        {
            var employeeEmergencyContactIdParameter = employeeEmergencyContactId.HasValue ?
                new ObjectParameter("EmployeeEmergencyContactId", employeeEmergencyContactId) :
                new ObjectParameter("EmployeeEmergencyContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeEmergencyContactDelete", employeeEmergencyContactIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_EmployeeEmergencyContactInsert_Result> usp_EmployeeEmergencyContactInsert(Nullable<int> companyId, Nullable<int> userId, string name, string homePhone, string workPhone, string cellPhone, string personalEmail, string workEmail, Nullable<int> relationship, string street1, string street2, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, Nullable<bool> isPrimaryContact, string createdBy, string modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var personalEmailParameter = personalEmail != null ?
                new ObjectParameter("PersonalEmail", personalEmail) :
                new ObjectParameter("PersonalEmail", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var isPrimaryContactParameter = isPrimaryContact.HasValue ?
                new ObjectParameter("IsPrimaryContact", isPrimaryContact) :
                new ObjectParameter("IsPrimaryContact", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeEmergencyContactInsert_Result>("usp_EmployeeEmergencyContactInsert", companyIdParameter, userIdParameter, nameParameter, homePhoneParameter, workPhoneParameter, cellPhoneParameter, personalEmailParameter, workEmailParameter, relationshipParameter, street1Parameter, street2Parameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, isPrimaryContactParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeEmergencyContactSelect_Result> usp_EmployeeEmergencyContactSelect(Nullable<int> companyId, Nullable<int> employeeEmergencyContactId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeEmergencyContactIdParameter = employeeEmergencyContactId.HasValue ?
                new ObjectParameter("EmployeeEmergencyContactId", employeeEmergencyContactId) :
                new ObjectParameter("EmployeeEmergencyContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeEmergencyContactSelect_Result>("usp_EmployeeEmergencyContactSelect", companyIdParameter, employeeEmergencyContactIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeOSHASelectById_Result> usp_EmployeeOSHASelectById(Nullable<int> employeeOSHAId, Nullable<int> companyId)
        {
            var employeeOSHAIdParameter = employeeOSHAId.HasValue ?
                new ObjectParameter("EmployeeOSHAId", employeeOSHAId) :
                new ObjectParameter("EmployeeOSHAId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeOSHASelectById_Result>("usp_EmployeeOSHASelectById", employeeOSHAIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeOSHAUpdate_Result> usp_EmployeeOSHAUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> caseNumber, Nullable<int> employeeOSHAId, Nullable<System.DateTime> incidentDateTime, Nullable<bool> isNotReported, string medicalCosts, string advisor, Nullable<System.DateTime> caseClosedOn, string completedBy, string workPhone, Nullable<System.DateTime> filedOn, string claimType, string outCome, Nullable<bool> isEmployeeinEmergency, Nullable<bool> isEmployeeInPatient, string physician, string street, string facility, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, string incidentDetailsMisc1, string incidentDetailsMisc2, string incidentDetailsMisc3, string injuryDetailsMisc1, string injuryDetailsMisc2, string injuryDetailsMisc3, string createdBy, string modifiedBy, Nullable<int> jobTitle)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var caseNumberParameter = caseNumber.HasValue ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(int));
    
            var employeeOSHAIdParameter = employeeOSHAId.HasValue ?
                new ObjectParameter("EmployeeOSHAId", employeeOSHAId) :
                new ObjectParameter("EmployeeOSHAId", typeof(int));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var isNotReportedParameter = isNotReported.HasValue ?
                new ObjectParameter("IsNotReported", isNotReported) :
                new ObjectParameter("IsNotReported", typeof(bool));
    
            var medicalCostsParameter = medicalCosts != null ?
                new ObjectParameter("MedicalCosts", medicalCosts) :
                new ObjectParameter("MedicalCosts", typeof(string));
    
            var advisorParameter = advisor != null ?
                new ObjectParameter("Advisor", advisor) :
                new ObjectParameter("Advisor", typeof(string));
    
            var caseClosedOnParameter = caseClosedOn.HasValue ?
                new ObjectParameter("CaseClosedOn", caseClosedOn) :
                new ObjectParameter("CaseClosedOn", typeof(System.DateTime));
    
            var completedByParameter = completedBy != null ?
                new ObjectParameter("CompletedBy", completedBy) :
                new ObjectParameter("CompletedBy", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var filedOnParameter = filedOn.HasValue ?
                new ObjectParameter("FiledOn", filedOn) :
                new ObjectParameter("FiledOn", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var outComeParameter = outCome != null ?
                new ObjectParameter("OutCome", outCome) :
                new ObjectParameter("OutCome", typeof(string));
    
            var isEmployeeinEmergencyParameter = isEmployeeinEmergency.HasValue ?
                new ObjectParameter("IsEmployeeinEmergency", isEmployeeinEmergency) :
                new ObjectParameter("IsEmployeeinEmergency", typeof(bool));
    
            var isEmployeeInPatientParameter = isEmployeeInPatient.HasValue ?
                new ObjectParameter("IsEmployeeInPatient", isEmployeeInPatient) :
                new ObjectParameter("IsEmployeeInPatient", typeof(bool));
    
            var physicianParameter = physician != null ?
                new ObjectParameter("Physician", physician) :
                new ObjectParameter("Physician", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var facilityParameter = facility != null ?
                new ObjectParameter("Facility", facility) :
                new ObjectParameter("Facility", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var incidentDetailsMisc1Parameter = incidentDetailsMisc1 != null ?
                new ObjectParameter("IncidentDetailsMisc1", incidentDetailsMisc1) :
                new ObjectParameter("IncidentDetailsMisc1", typeof(string));
    
            var incidentDetailsMisc2Parameter = incidentDetailsMisc2 != null ?
                new ObjectParameter("IncidentDetailsMisc2", incidentDetailsMisc2) :
                new ObjectParameter("IncidentDetailsMisc2", typeof(string));
    
            var incidentDetailsMisc3Parameter = incidentDetailsMisc3 != null ?
                new ObjectParameter("IncidentDetailsMisc3", incidentDetailsMisc3) :
                new ObjectParameter("IncidentDetailsMisc3", typeof(string));
    
            var injuryDetailsMisc1Parameter = injuryDetailsMisc1 != null ?
                new ObjectParameter("InjuryDetailsMisc1", injuryDetailsMisc1) :
                new ObjectParameter("InjuryDetailsMisc1", typeof(string));
    
            var injuryDetailsMisc2Parameter = injuryDetailsMisc2 != null ?
                new ObjectParameter("InjuryDetailsMisc2", injuryDetailsMisc2) :
                new ObjectParameter("InjuryDetailsMisc2", typeof(string));
    
            var injuryDetailsMisc3Parameter = injuryDetailsMisc3 != null ?
                new ObjectParameter("InjuryDetailsMisc3", injuryDetailsMisc3) :
                new ObjectParameter("InjuryDetailsMisc3", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var jobTitleParameter = jobTitle.HasValue ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeOSHAUpdate_Result>("usp_EmployeeOSHAUpdate", userIdParameter, companyIdParameter, caseNumberParameter, employeeOSHAIdParameter, incidentDateTimeParameter, isNotReportedParameter, medicalCostsParameter, advisorParameter, caseClosedOnParameter, completedByParameter, workPhoneParameter, filedOnParameter, claimTypeParameter, outComeParameter, isEmployeeinEmergencyParameter, isEmployeeInPatientParameter, physicianParameter, streetParameter, facilityParameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, incidentDetailsMisc1Parameter, incidentDetailsMisc2Parameter, incidentDetailsMisc3Parameter, injuryDetailsMisc1Parameter, injuryDetailsMisc2Parameter, injuryDetailsMisc3Parameter, createdByParameter, modifiedByParameter, jobTitleParameter);
        }
    
        public virtual int usp_EmployeePayDelete(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeePayDelete", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_EmployeeTaxDelete(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeTaxDelete", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeTaxSelect_Result> usp_EmployeeTaxSelect(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeTaxSelect_Result>("usp_EmployeeTaxSelect", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidayGroupDelete(Nullable<int> holidayGroupId, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayGroupDelete", holidayGroupIdParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidayGroupInsert(string holidayGroupName, string holidayDescription, Nullable<int> companyId, ObjectParameter holidayGroupId)
        {
            var holidayGroupNameParameter = holidayGroupName != null ?
                new ObjectParameter("HolidayGroupName", holidayGroupName) :
                new ObjectParameter("HolidayGroupName", typeof(string));
    
            var holidayDescriptionParameter = holidayDescription != null ?
                new ObjectParameter("HolidayDescription", holidayDescription) :
                new ObjectParameter("HolidayDescription", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayGroupInsert", holidayGroupNameParameter, holidayDescriptionParameter, companyIdParameter, holidayGroupId);
        }
    
        public virtual ObjectResult<usp_HolidayGroupSelect_Result> usp_HolidayGroupSelect(Nullable<int> holidayGroupId, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidayGroupSelect_Result>("usp_HolidayGroupSelect", holidayGroupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HolidayGroupSelectAll_Result> usp_HolidayGroupSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidayGroupSelectAll_Result>("usp_HolidayGroupSelectAll", companyIdParameter);
        }
    
        public virtual int usp_HolidayGroupUpdate(Nullable<int> holidayGroupId, string holidayGroupName, string holidayDescription, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var holidayGroupNameParameter = holidayGroupName != null ?
                new ObjectParameter("HolidayGroupName", holidayGroupName) :
                new ObjectParameter("HolidayGroupName", typeof(string));
    
            var holidayDescriptionParameter = holidayDescription != null ?
                new ObjectParameter("HolidayDescription", holidayDescription) :
                new ObjectParameter("HolidayDescription", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayGroupUpdate", holidayGroupIdParameter, holidayGroupNameParameter, holidayDescriptionParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidayMasterDelete(Nullable<int> holidayMasterId, Nullable<int> companyId)
        {
            var holidayMasterIdParameter = holidayMasterId.HasValue ?
                new ObjectParameter("HolidayMasterId", holidayMasterId) :
                new ObjectParameter("HolidayMasterId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayMasterDelete", holidayMasterIdParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidayMasterGridSelectList(Nullable<int> holidayGroupId, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayMasterGridSelectList", holidayGroupIdParameter, companyIdParameter);
        }
    
        public virtual int usp_HolidayMasterInsert(Nullable<int> holidayGroupId, Nullable<int> holidayId, Nullable<double> hoursBenefit, Nullable<bool> workBenefit, Nullable<bool> overTimeBenefit, Nullable<bool> doubleTimeBenefit, Nullable<int> daysBefore, Nullable<int> daysAfter, Nullable<decimal> dollarPerHour, Nullable<bool> bankHoursIfWorked, string bankToAccount, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var hoursBenefitParameter = hoursBenefit.HasValue ?
                new ObjectParameter("HoursBenefit", hoursBenefit) :
                new ObjectParameter("HoursBenefit", typeof(double));
    
            var workBenefitParameter = workBenefit.HasValue ?
                new ObjectParameter("WorkBenefit", workBenefit) :
                new ObjectParameter("WorkBenefit", typeof(bool));
    
            var overTimeBenefitParameter = overTimeBenefit.HasValue ?
                new ObjectParameter("OverTimeBenefit", overTimeBenefit) :
                new ObjectParameter("OverTimeBenefit", typeof(bool));
    
            var doubleTimeBenefitParameter = doubleTimeBenefit.HasValue ?
                new ObjectParameter("DoubleTimeBenefit", doubleTimeBenefit) :
                new ObjectParameter("DoubleTimeBenefit", typeof(bool));
    
            var daysBeforeParameter = daysBefore.HasValue ?
                new ObjectParameter("DaysBefore", daysBefore) :
                new ObjectParameter("DaysBefore", typeof(int));
    
            var daysAfterParameter = daysAfter.HasValue ?
                new ObjectParameter("DaysAfter", daysAfter) :
                new ObjectParameter("DaysAfter", typeof(int));
    
            var dollarPerHourParameter = dollarPerHour.HasValue ?
                new ObjectParameter("DollarPerHour", dollarPerHour) :
                new ObjectParameter("DollarPerHour", typeof(decimal));
    
            var bankHoursIfWorkedParameter = bankHoursIfWorked.HasValue ?
                new ObjectParameter("BankHoursIfWorked", bankHoursIfWorked) :
                new ObjectParameter("BankHoursIfWorked", typeof(bool));
    
            var bankToAccountParameter = bankToAccount != null ?
                new ObjectParameter("BankToAccount", bankToAccount) :
                new ObjectParameter("BankToAccount", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayMasterInsert", holidayGroupIdParameter, holidayIdParameter, hoursBenefitParameter, workBenefitParameter, overTimeBenefitParameter, doubleTimeBenefitParameter, daysBeforeParameter, daysAfterParameter, dollarPerHourParameter, bankHoursIfWorkedParameter, bankToAccountParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HolidayMasterSelect_Result> usp_HolidayMasterSelect(Nullable<int> holidayMasterId, Nullable<int> companyId)
        {
            var holidayMasterIdParameter = holidayMasterId.HasValue ?
                new ObjectParameter("HolidayMasterId", holidayMasterId) :
                new ObjectParameter("HolidayMasterId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidayMasterSelect_Result>("usp_HolidayMasterSelect", holidayMasterIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HolidayMasterSelectAll_Result> usp_HolidayMasterSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidayMasterSelectAll_Result>("usp_HolidayMasterSelectAll", companyIdParameter);
        }
    
        public virtual int usp_HolidayMasterUpdate(Nullable<int> holidayMasterId, Nullable<int> holidayGroupId, Nullable<int> holidayId, Nullable<double> hoursBenefit, Nullable<bool> workBenefit, Nullable<bool> overTimeBenefit, Nullable<bool> doubleTimeBenefit, Nullable<int> daysBefore, Nullable<int> daysAfter, Nullable<decimal> dollarPerHour, Nullable<bool> bankHoursIfWorked, string bankToAccount, Nullable<int> companyId)
        {
            var holidayMasterIdParameter = holidayMasterId.HasValue ?
                new ObjectParameter("HolidayMasterId", holidayMasterId) :
                new ObjectParameter("HolidayMasterId", typeof(int));
    
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var hoursBenefitParameter = hoursBenefit.HasValue ?
                new ObjectParameter("HoursBenefit", hoursBenefit) :
                new ObjectParameter("HoursBenefit", typeof(double));
    
            var workBenefitParameter = workBenefit.HasValue ?
                new ObjectParameter("WorkBenefit", workBenefit) :
                new ObjectParameter("WorkBenefit", typeof(bool));
    
            var overTimeBenefitParameter = overTimeBenefit.HasValue ?
                new ObjectParameter("OverTimeBenefit", overTimeBenefit) :
                new ObjectParameter("OverTimeBenefit", typeof(bool));
    
            var doubleTimeBenefitParameter = doubleTimeBenefit.HasValue ?
                new ObjectParameter("DoubleTimeBenefit", doubleTimeBenefit) :
                new ObjectParameter("DoubleTimeBenefit", typeof(bool));
    
            var daysBeforeParameter = daysBefore.HasValue ?
                new ObjectParameter("DaysBefore", daysBefore) :
                new ObjectParameter("DaysBefore", typeof(int));
    
            var daysAfterParameter = daysAfter.HasValue ?
                new ObjectParameter("DaysAfter", daysAfter) :
                new ObjectParameter("DaysAfter", typeof(int));
    
            var dollarPerHourParameter = dollarPerHour.HasValue ?
                new ObjectParameter("DollarPerHour", dollarPerHour) :
                new ObjectParameter("DollarPerHour", typeof(decimal));
    
            var bankHoursIfWorkedParameter = bankHoursIfWorked.HasValue ?
                new ObjectParameter("BankHoursIfWorked", bankHoursIfWorked) :
                new ObjectParameter("BankHoursIfWorked", typeof(bool));
    
            var bankToAccountParameter = bankToAccount != null ?
                new ObjectParameter("BankToAccount", bankToAccount) :
                new ObjectParameter("BankToAccount", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayMasterUpdate", holidayMasterIdParameter, holidayGroupIdParameter, holidayIdParameter, hoursBenefitParameter, workBenefitParameter, overTimeBenefitParameter, doubleTimeBenefitParameter, daysBeforeParameter, daysAfterParameter, dollarPerHourParameter, bankHoursIfWorkedParameter, bankToAccountParameter, companyIdParameter);
        }
    
        public virtual int usp_ScheduleEmployeeDelete(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ScheduleEmployeeDelete", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleEmployeeInsert_Result> usp_ScheduleEmployeeInsert(Nullable<int> userId, Nullable<System.DateTime> scheduleDate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> lunchMinutes, Nullable<int> departmentId, Nullable<int> jobId, Nullable<int> projectId, Nullable<bool> isScheduleActive, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var lunchMinutesParameter = lunchMinutes.HasValue ?
                new ObjectParameter("LunchMinutes", lunchMinutes) :
                new ObjectParameter("LunchMinutes", typeof(double));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var isScheduleActiveParameter = isScheduleActive.HasValue ?
                new ObjectParameter("IsScheduleActive", isScheduleActive) :
                new ObjectParameter("IsScheduleActive", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleEmployeeInsert_Result>("usp_ScheduleEmployeeInsert", userIdParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, lunchMinutesParameter, departmentIdParameter, jobIdParameter, projectIdParameter, isScheduleActiveParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleEmployeeSelect_Result> usp_ScheduleEmployeeSelect(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleEmployeeSelect_Result>("usp_ScheduleEmployeeSelect", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleEmployeeSelectAll_Result> usp_ScheduleEmployeeSelectAll(Nullable<int> scheduleEmployeeId, Nullable<int> companyId)
        {
            var scheduleEmployeeIdParameter = scheduleEmployeeId.HasValue ?
                new ObjectParameter("ScheduleEmployeeId", scheduleEmployeeId) :
                new ObjectParameter("ScheduleEmployeeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleEmployeeSelectAll_Result>("usp_ScheduleEmployeeSelectAll", scheduleEmployeeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleEmployeeUpdate_Result> usp_ScheduleEmployeeUpdate(Nullable<int> scheduleEmployeeId, Nullable<int> userId, Nullable<System.DateTime> scheduleDate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> lunchMinutes, Nullable<int> departmentId, Nullable<int> jobId, Nullable<int> projectId, Nullable<bool> isScheduleActive, Nullable<int> companyId)
        {
            var scheduleEmployeeIdParameter = scheduleEmployeeId.HasValue ?
                new ObjectParameter("ScheduleEmployeeId", scheduleEmployeeId) :
                new ObjectParameter("ScheduleEmployeeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var lunchMinutesParameter = lunchMinutes.HasValue ?
                new ObjectParameter("LunchMinutes", lunchMinutes) :
                new ObjectParameter("LunchMinutes", typeof(double));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var isScheduleActiveParameter = isScheduleActive.HasValue ?
                new ObjectParameter("IsScheduleActive", isScheduleActive) :
                new ObjectParameter("IsScheduleActive", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleEmployeeUpdate_Result>("usp_ScheduleEmployeeUpdate", scheduleEmployeeIdParameter, userIdParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, lunchMinutesParameter, departmentIdParameter, jobIdParameter, projectIdParameter, isScheduleActiveParameter, companyIdParameter);
        }
    
        public virtual int usp_ScheduleGroupDelete(Nullable<int> scheduleGroupId, Nullable<int> companyId)
        {
            var scheduleGroupIdParameter = scheduleGroupId.HasValue ?
                new ObjectParameter("ScheduleGroupId", scheduleGroupId) :
                new ObjectParameter("ScheduleGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ScheduleGroupDelete", scheduleGroupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleGroupInsert_Result> usp_ScheduleGroupInsert(string scheduleGroupName, string description, Nullable<int> companyId)
        {
            var scheduleGroupNameParameter = scheduleGroupName != null ?
                new ObjectParameter("ScheduleGroupName", scheduleGroupName) :
                new ObjectParameter("ScheduleGroupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleGroupInsert_Result>("usp_ScheduleGroupInsert", scheduleGroupNameParameter, descriptionParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleGroupSelect_Result> usp_ScheduleGroupSelect(Nullable<int> scheduleGroupId, Nullable<int> companyId)
        {
            var scheduleGroupIdParameter = scheduleGroupId.HasValue ?
                new ObjectParameter("ScheduleGroupId", scheduleGroupId) :
                new ObjectParameter("ScheduleGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleGroupSelect_Result>("usp_ScheduleGroupSelect", scheduleGroupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleGroupSelectAll_Result> usp_ScheduleGroupSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleGroupSelectAll_Result>("usp_ScheduleGroupSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ScheduleGroupUpdate_Result> usp_ScheduleGroupUpdate(Nullable<int> scheduleGroupId, string scheduleGroupName, string description, Nullable<int> companyId)
        {
            var scheduleGroupIdParameter = scheduleGroupId.HasValue ?
                new ObjectParameter("ScheduleGroupId", scheduleGroupId) :
                new ObjectParameter("ScheduleGroupId", typeof(int));
    
            var scheduleGroupNameParameter = scheduleGroupName != null ?
                new ObjectParameter("ScheduleGroupName", scheduleGroupName) :
                new ObjectParameter("ScheduleGroupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScheduleGroupUpdate_Result>("usp_ScheduleGroupUpdate", scheduleGroupIdParameter, scheduleGroupNameParameter, descriptionParameter, companyIdParameter);
        }
    
        public virtual int usp_SelectAllPayPeriodEmployeesScheduleByCompanyIdPayPeriodId(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SelectAllPayPeriodEmployeesScheduleByCompanyIdPayPeriodId", companyIDParameter);
        }
    
        public virtual int usp_TimeAttendanceData(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeAttendanceData", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_AlertSendTypeSelect_Result> usp_AlertSendTypeSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AlertSendTypeSelect_Result>("usp_AlertSendTypeSelect");
        }
    
        public virtual ObjectResult<usp_EmployeeSelectAll_Result> usp_EmployeeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSelectAll_Result>("usp_EmployeeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_TimesheetPoliciesDelete(Nullable<int> timesheetPolicyId, Nullable<int> companyId)
        {
            var timesheetPolicyIdParameter = timesheetPolicyId.HasValue ?
                new ObjectParameter("TimesheetPolicyId", timesheetPolicyId) :
                new ObjectParameter("TimesheetPolicyId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimesheetPoliciesDelete", timesheetPolicyIdParameter, companyIdParameter);
        }
    
        public virtual int usp_TimesheetPoliciesInsert(Nullable<int> userId, Nullable<int> reportToUserId, Nullable<bool> allowTimesheet, Nullable<int> employmentStatus, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> jobProfileId, Nullable<int> level4Id, Nullable<int> level5Id, Nullable<int> payPeriodId, Nullable<decimal> payRate, Nullable<decimal> billRate, Nullable<int> holidayGroupId, Nullable<int> lunchId, Nullable<int> roundingId, Nullable<int> overtimeId, Nullable<bool> isScheduleRequire, Nullable<System.DateTime> benefitAnnivarsaryDate, Nullable<System.DateTime> benefitStartDate, Nullable<decimal> workedToDdateHours, Nullable<System.DateTime> nextScheduleStartDate, string notes, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reportToUserIdParameter = reportToUserId.HasValue ?
                new ObjectParameter("ReportToUserId", reportToUserId) :
                new ObjectParameter("ReportToUserId", typeof(int));
    
            var allowTimesheetParameter = allowTimesheet.HasValue ?
                new ObjectParameter("AllowTimesheet", allowTimesheet) :
                new ObjectParameter("AllowTimesheet", typeof(bool));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var level4IdParameter = level4Id.HasValue ?
                new ObjectParameter("Level4Id", level4Id) :
                new ObjectParameter("Level4Id", typeof(int));
    
            var level5IdParameter = level5Id.HasValue ?
                new ObjectParameter("Level5Id", level5Id) :
                new ObjectParameter("Level5Id", typeof(int));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(decimal));
    
            var billRateParameter = billRate.HasValue ?
                new ObjectParameter("BillRate", billRate) :
                new ObjectParameter("BillRate", typeof(decimal));
    
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var lunchIdParameter = lunchId.HasValue ?
                new ObjectParameter("LunchId", lunchId) :
                new ObjectParameter("LunchId", typeof(int));
    
            var roundingIdParameter = roundingId.HasValue ?
                new ObjectParameter("RoundingId", roundingId) :
                new ObjectParameter("RoundingId", typeof(int));
    
            var overtimeIdParameter = overtimeId.HasValue ?
                new ObjectParameter("OvertimeId", overtimeId) :
                new ObjectParameter("OvertimeId", typeof(int));
    
            var isScheduleRequireParameter = isScheduleRequire.HasValue ?
                new ObjectParameter("IsScheduleRequire", isScheduleRequire) :
                new ObjectParameter("IsScheduleRequire", typeof(bool));
    
            var benefitAnnivarsaryDateParameter = benefitAnnivarsaryDate.HasValue ?
                new ObjectParameter("BenefitAnnivarsaryDate", benefitAnnivarsaryDate) :
                new ObjectParameter("BenefitAnnivarsaryDate", typeof(System.DateTime));
    
            var benefitStartDateParameter = benefitStartDate.HasValue ?
                new ObjectParameter("BenefitStartDate", benefitStartDate) :
                new ObjectParameter("BenefitStartDate", typeof(System.DateTime));
    
            var workedToDdateHoursParameter = workedToDdateHours.HasValue ?
                new ObjectParameter("WorkedToDdateHours", workedToDdateHours) :
                new ObjectParameter("WorkedToDdateHours", typeof(decimal));
    
            var nextScheduleStartDateParameter = nextScheduleStartDate.HasValue ?
                new ObjectParameter("NextScheduleStartDate", nextScheduleStartDate) :
                new ObjectParameter("NextScheduleStartDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimesheetPoliciesInsert", userIdParameter, reportToUserIdParameter, allowTimesheetParameter, employmentStatusParameter, divisionIdParameter, departmentIdParameter, jobProfileIdParameter, level4IdParameter, level5IdParameter, payPeriodIdParameter, payRateParameter, billRateParameter, holidayGroupIdParameter, lunchIdParameter, roundingIdParameter, overtimeIdParameter, isScheduleRequireParameter, benefitAnnivarsaryDateParameter, benefitStartDateParameter, workedToDdateHoursParameter, nextScheduleStartDateParameter, notesParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TimesheetPoliciesSelect_Result> usp_TimesheetPoliciesSelect(Nullable<int> userID, Nullable<int> companyId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TimesheetPoliciesSelect_Result>("usp_TimesheetPoliciesSelect", userIDParameter, companyIdParameter);
        }
    
        public virtual int usp_TimesheetPoliciesUpdate(Nullable<int> timesheetPolicyId, Nullable<int> userId, Nullable<int> reportToUserId, Nullable<bool> allowTimesheet, Nullable<int> employmentStatus, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> jobProfileId, Nullable<int> level4Id, Nullable<int> level5Id, Nullable<int> payPeriodId, Nullable<decimal> payRate, Nullable<decimal> billRate, Nullable<int> holidayGroupId, Nullable<int> lunchId, Nullable<int> roundingId, Nullable<int> overtimeId, Nullable<bool> isScheduleRequire, Nullable<System.DateTime> benefitAnnivarsaryDate, Nullable<System.DateTime> benefitStartDate, Nullable<decimal> workedToDdateHours, Nullable<System.DateTime> nextScheduleStartDate, string notes, Nullable<int> companyId)
        {
            var timesheetPolicyIdParameter = timesheetPolicyId.HasValue ?
                new ObjectParameter("TimesheetPolicyId", timesheetPolicyId) :
                new ObjectParameter("TimesheetPolicyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reportToUserIdParameter = reportToUserId.HasValue ?
                new ObjectParameter("ReportToUserId", reportToUserId) :
                new ObjectParameter("ReportToUserId", typeof(int));
    
            var allowTimesheetParameter = allowTimesheet.HasValue ?
                new ObjectParameter("AllowTimesheet", allowTimesheet) :
                new ObjectParameter("AllowTimesheet", typeof(bool));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var level4IdParameter = level4Id.HasValue ?
                new ObjectParameter("Level4Id", level4Id) :
                new ObjectParameter("Level4Id", typeof(int));
    
            var level5IdParameter = level5Id.HasValue ?
                new ObjectParameter("Level5Id", level5Id) :
                new ObjectParameter("Level5Id", typeof(int));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(decimal));
    
            var billRateParameter = billRate.HasValue ?
                new ObjectParameter("BillRate", billRate) :
                new ObjectParameter("BillRate", typeof(decimal));
    
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var lunchIdParameter = lunchId.HasValue ?
                new ObjectParameter("LunchId", lunchId) :
                new ObjectParameter("LunchId", typeof(int));
    
            var roundingIdParameter = roundingId.HasValue ?
                new ObjectParameter("RoundingId", roundingId) :
                new ObjectParameter("RoundingId", typeof(int));
    
            var overtimeIdParameter = overtimeId.HasValue ?
                new ObjectParameter("OvertimeId", overtimeId) :
                new ObjectParameter("OvertimeId", typeof(int));
    
            var isScheduleRequireParameter = isScheduleRequire.HasValue ?
                new ObjectParameter("IsScheduleRequire", isScheduleRequire) :
                new ObjectParameter("IsScheduleRequire", typeof(bool));
    
            var benefitAnnivarsaryDateParameter = benefitAnnivarsaryDate.HasValue ?
                new ObjectParameter("BenefitAnnivarsaryDate", benefitAnnivarsaryDate) :
                new ObjectParameter("BenefitAnnivarsaryDate", typeof(System.DateTime));
    
            var benefitStartDateParameter = benefitStartDate.HasValue ?
                new ObjectParameter("BenefitStartDate", benefitStartDate) :
                new ObjectParameter("BenefitStartDate", typeof(System.DateTime));
    
            var workedToDdateHoursParameter = workedToDdateHours.HasValue ?
                new ObjectParameter("WorkedToDdateHours", workedToDdateHours) :
                new ObjectParameter("WorkedToDdateHours", typeof(decimal));
    
            var nextScheduleStartDateParameter = nextScheduleStartDate.HasValue ?
                new ObjectParameter("NextScheduleStartDate", nextScheduleStartDate) :
                new ObjectParameter("NextScheduleStartDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimesheetPoliciesUpdate", timesheetPolicyIdParameter, userIdParameter, reportToUserIdParameter, allowTimesheetParameter, employmentStatusParameter, divisionIdParameter, departmentIdParameter, jobProfileIdParameter, level4IdParameter, level5IdParameter, payPeriodIdParameter, payRateParameter, billRateParameter, holidayGroupIdParameter, lunchIdParameter, roundingIdParameter, overtimeIdParameter, isScheduleRequireParameter, benefitAnnivarsaryDateParameter, benefitStartDateParameter, workedToDdateHoursParameter, nextScheduleStartDateParameter, notesParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeById_Result> usp_SelectEmployeeById(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeById_Result>("usp_SelectEmployeeById", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_AlertSendCriteriaSelect_Result> usp_AlertSendCriteriaSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AlertSendCriteriaSelect_Result>("usp_AlertSendCriteriaSelect");
        }
    
        public virtual ObjectResult<usp_SelectAllManagers_Result> usp_SelectAllManagers(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllManagers_Result>("usp_SelectAllManagers", companyIdParameter);
        }
    
        public virtual int usp_EmployeeSignDelete(Nullable<int> employeeSignId)
        {
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeSignDelete", employeeSignIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSignSelect_Result> usp_EmployeeSignSelect(Nullable<int> employeeSignId)
        {
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSignSelect_Result>("usp_EmployeeSignSelect", employeeSignIdParameter);
        }
    
        public virtual int usp_AlertCriteriaSaveLogInsert(Nullable<int> alertSendCriteriaId, Nullable<int> alertTemplateId, Nullable<int> selectedId)
        {
            var alertSendCriteriaIdParameter = alertSendCriteriaId.HasValue ?
                new ObjectParameter("AlertSendCriteriaId", alertSendCriteriaId) :
                new ObjectParameter("AlertSendCriteriaId", typeof(int));
    
            var alertTemplateIdParameter = alertTemplateId.HasValue ?
                new ObjectParameter("AlertTemplateId", alertTemplateId) :
                new ObjectParameter("AlertTemplateId", typeof(int));
    
            var selectedIdParameter = selectedId.HasValue ?
                new ObjectParameter("SelectedId", selectedId) :
                new ObjectParameter("SelectedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AlertCriteriaSaveLogInsert", alertSendCriteriaIdParameter, alertTemplateIdParameter, selectedIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByDepartment_Result> usp_SelectEmployeeByDepartment(Nullable<int> companyId, Nullable<int> departmentId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByDepartment_Result>("usp_SelectEmployeeByDepartment", companyIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByEmploymentStatus_Result> usp_SelectEmployeeByEmploymentStatus(Nullable<int> companyId, Nullable<int> employmentStatusId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employmentStatusIdParameter = employmentStatusId.HasValue ?
                new ObjectParameter("EmploymentStatusId", employmentStatusId) :
                new ObjectParameter("EmploymentStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByEmploymentStatus_Result>("usp_SelectEmployeeByEmploymentStatus", companyIdParameter, employmentStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByLocation_Result> usp_SelectEmployeeByLocation(Nullable<int> companyId, Nullable<int> locationId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByLocation_Result>("usp_SelectEmployeeByLocation", companyIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByPosition_Result> usp_SelectEmployeeByPosition(Nullable<int> companyId, Nullable<int> positionId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByPosition_Result>("usp_SelectEmployeeByPosition", companyIdParameter, positionIdParameter);
        }
    
        public virtual ObjectResult<usp_LookUpDataSelect_Result> usp_LookUpDataSelect(string tableName, Nullable<int> companyID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookUpDataSelect_Result>("usp_LookUpDataSelect", tableNameParameter, companyIDParameter);
        }
    
        public virtual int usp_EmployeeNotesDelete(Nullable<int> employeeNotesId)
        {
            var employeeNotesIdParameter = employeeNotesId.HasValue ?
                new ObjectParameter("EmployeeNotesId", employeeNotesId) :
                new ObjectParameter("EmployeeNotesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeNotesDelete", employeeNotesIdParameter);
        }
    
        public virtual int usp_EmployeePhotoDelete(Nullable<int> employeePhotoId)
        {
            var employeePhotoIdParameter = employeePhotoId.HasValue ?
                new ObjectParameter("EmployeePhotoId", employeePhotoId) :
                new ObjectParameter("EmployeePhotoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeePhotoDelete", employeePhotoIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePhotoInsert_Result> usp_EmployeePhotoInsert(Nullable<int> userId, Nullable<int> photoFileId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var photoFileIdParameter = photoFileId.HasValue ?
                new ObjectParameter("PhotoFileId", photoFileId) :
                new ObjectParameter("PhotoFileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePhotoInsert_Result>("usp_EmployeePhotoInsert", userIdParameter, photoFileIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePhotoSelect_Result> usp_EmployeePhotoSelect(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePhotoSelect_Result>("usp_EmployeePhotoSelect", userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePhotoUpdate_Result> usp_EmployeePhotoUpdate(Nullable<int> userId, Nullable<int> photoFileId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var photoFileIdParameter = photoFileId.HasValue ?
                new ObjectParameter("PhotoFileId", photoFileId) :
                new ObjectParameter("PhotoFileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePhotoUpdate_Result>("usp_EmployeePhotoUpdate", userIdParameter, photoFileIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeNotesUpdate_Result> usp_EmployeeNotesUpdate(Nullable<int> employeeNotesId, string description, string notesContent, string documentName, Nullable<int> documentId, Nullable<int> attachmentFileId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var employeeNotesIdParameter = employeeNotesId.HasValue ?
                new ObjectParameter("EmployeeNotesId", employeeNotesId) :
                new ObjectParameter("EmployeeNotesId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var notesContentParameter = notesContent != null ?
                new ObjectParameter("NotesContent", notesContent) :
                new ObjectParameter("NotesContent", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var attachmentFileIdParameter = attachmentFileId.HasValue ?
                new ObjectParameter("AttachmentFileId", attachmentFileId) :
                new ObjectParameter("AttachmentFileId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeNotesUpdate_Result>("usp_EmployeeNotesUpdate", employeeNotesIdParameter, descriptionParameter, notesContentParameter, documentNameParameter, documentIdParameter, attachmentFileIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSignUpdate_Result> usp_EmployeeSignUpdate(Nullable<int> employeeSignId, Nullable<int> userId, Nullable<int> companyId, string name, Nullable<int> employeeSignFileId)
        {
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var employeeSignFileIdParameter = employeeSignFileId.HasValue ?
                new ObjectParameter("EmployeeSignFileId", employeeSignFileId) :
                new ObjectParameter("EmployeeSignFileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSignUpdate_Result>("usp_EmployeeSignUpdate", employeeSignIdParameter, userIdParameter, companyIdParameter, nameParameter, employeeSignFileIdParameter);
        }
    
        public virtual int usp_HolidayGroupInsertMaster(string holidayGroupName, string holidayDescription, Nullable<int> companyId, ObjectParameter holidayGroupId)
        {
            var holidayGroupNameParameter = holidayGroupName != null ?
                new ObjectParameter("HolidayGroupName", holidayGroupName) :
                new ObjectParameter("HolidayGroupName", typeof(string));
    
            var holidayDescriptionParameter = holidayDescription != null ?
                new ObjectParameter("HolidayDescription", holidayDescription) :
                new ObjectParameter("HolidayDescription", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HolidayGroupInsertMaster", holidayGroupNameParameter, holidayDescriptionParameter, companyIdParameter, holidayGroupId);
        }
    
        public virtual ObjectResult<usp_HolidayMasterByHolidayGroupSelectAll_Result> usp_HolidayMasterByHolidayGroupSelectAll(Nullable<int> holidayGroupId, Nullable<int> companyId)
        {
            var holidayGroupIdParameter = holidayGroupId.HasValue ?
                new ObjectParameter("HolidayGroupId", holidayGroupId) :
                new ObjectParameter("HolidayGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HolidayMasterByHolidayGroupSelectAll_Result>("usp_HolidayMasterByHolidayGroupSelectAll", holidayGroupIdParameter, companyIdParameter);
        }
    
        public virtual int usp_OTPayTypeDelete(Nullable<int> oTPayTypeId, Nullable<int> companyId)
        {
            var oTPayTypeIdParameter = oTPayTypeId.HasValue ?
                new ObjectParameter("OTPayTypeId", oTPayTypeId) :
                new ObjectParameter("OTPayTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPayTypeDelete", oTPayTypeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_OTPayTypeInsert(string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPayTypeInsert", nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_OTPayTypeSelect_Result> usp_OTPayTypeSelect(Nullable<int> oTPayTypeId, Nullable<int> companyId)
        {
            var oTPayTypeIdParameter = oTPayTypeId.HasValue ?
                new ObjectParameter("OTPayTypeId", oTPayTypeId) :
                new ObjectParameter("OTPayTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OTPayTypeSelect_Result>("usp_OTPayTypeSelect", oTPayTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_OTPayTypeSelectAll_Result> usp_OTPayTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OTPayTypeSelectAll_Result>("usp_OTPayTypeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_OTPayTypeUpdate(Nullable<int> oTPayTypeId, string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var oTPayTypeIdParameter = oTPayTypeId.HasValue ?
                new ObjectParameter("OTPayTypeId", oTPayTypeId) :
                new ObjectParameter("OTPayTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPayTypeUpdate", oTPayTypeIdParameter, nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual int usp_OTPolicyTypeDelete(Nullable<int> oTPolicyTypeId, Nullable<int> companyId)
        {
            var oTPolicyTypeIdParameter = oTPolicyTypeId.HasValue ?
                new ObjectParameter("OTPolicyTypeId", oTPolicyTypeId) :
                new ObjectParameter("OTPolicyTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPolicyTypeDelete", oTPolicyTypeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_OTPolicyTypeInsert(string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPolicyTypeInsert", nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_OTPolicyTypeSelect_Result> usp_OTPolicyTypeSelect(Nullable<int> oTPolicyTypeId, Nullable<int> companyId)
        {
            var oTPolicyTypeIdParameter = oTPolicyTypeId.HasValue ?
                new ObjectParameter("OTPolicyTypeId", oTPolicyTypeId) :
                new ObjectParameter("OTPolicyTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OTPolicyTypeSelect_Result>("usp_OTPolicyTypeSelect", oTPolicyTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_OTPolicyTypeSelectAll_Result> usp_OTPolicyTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OTPolicyTypeSelectAll_Result>("usp_OTPolicyTypeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_OTPolicyTypeUpdate(Nullable<int> oTPolicyTypeId, string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var oTPolicyTypeIdParameter = oTPolicyTypeId.HasValue ?
                new ObjectParameter("OTPolicyTypeId", oTPolicyTypeId) :
                new ObjectParameter("OTPolicyTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OTPolicyTypeUpdate", oTPolicyTypeIdParameter, nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual int usp_RoundMinutesDelete(Nullable<int> roundMinutesId, Nullable<int> companyId)
        {
            var roundMinutesIdParameter = roundMinutesId.HasValue ?
                new ObjectParameter("RoundMinutesId", roundMinutesId) :
                new ObjectParameter("RoundMinutesId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundMinutesDelete", roundMinutesIdParameter, companyIdParameter);
        }
    
        public virtual int usp_RoundMinutesInsert(string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundMinutesInsert", nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_RoundMinutesSelect_Result> usp_RoundMinutesSelect(Nullable<int> roundMinutesId, Nullable<int> companyId)
        {
            var roundMinutesIdParameter = roundMinutesId.HasValue ?
                new ObjectParameter("RoundMinutesId", roundMinutesId) :
                new ObjectParameter("RoundMinutesId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundMinutesSelect_Result>("usp_RoundMinutesSelect", roundMinutesIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RoundMinutesSelectAll_Result> usp_RoundMinutesSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundMinutesSelectAll_Result>("usp_RoundMinutesSelectAll", companyIdParameter);
        }
    
        public virtual int usp_RoundMinutesUpdate(Nullable<int> roundMinutesId, string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var roundMinutesIdParameter = roundMinutesId.HasValue ?
                new ObjectParameter("RoundMinutesId", roundMinutesId) :
                new ObjectParameter("RoundMinutesId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundMinutesUpdate", roundMinutesIdParameter, nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual int usp_RoundTypeDelete(Nullable<int> roundTypeId, Nullable<int> companyId)
        {
            var roundTypeIdParameter = roundTypeId.HasValue ?
                new ObjectParameter("RoundTypeId", roundTypeId) :
                new ObjectParameter("RoundTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundTypeDelete", roundTypeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_RoundTypeInsert(string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundTypeInsert", nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_RoundTypeSelect_Result> usp_RoundTypeSelect(Nullable<int> roundTypeId, Nullable<int> companyId)
        {
            var roundTypeIdParameter = roundTypeId.HasValue ?
                new ObjectParameter("RoundTypeId", roundTypeId) :
                new ObjectParameter("RoundTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundTypeSelect_Result>("usp_RoundTypeSelect", roundTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RoundTypeSelectAll_Result> usp_RoundTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoundTypeSelectAll_Result>("usp_RoundTypeSelectAll", companyIdParameter);
        }
    
        public virtual int usp_RoundTypeUpdate(Nullable<int> roundTypeId, string name, Nullable<int> value, Nullable<int> companyId, Nullable<bool> status)
        {
            var roundTypeIdParameter = roundTypeId.HasValue ?
                new ObjectParameter("RoundTypeId", roundTypeId) :
                new ObjectParameter("RoundTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoundTypeUpdate", roundTypeIdParameter, nameParameter, valueParameter, companyIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllEmployeesByPayPeriodIdAndCompanyIdForSchedule_Result> usp_SelectAllEmployeesByPayPeriodIdAndCompanyIdForSchedule(Nullable<int> payPeriodId, Nullable<int> companyID)
        {
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmployeesByPayPeriodIdAndCompanyIdForSchedule_Result>("usp_SelectAllEmployeesByPayPeriodIdAndCompanyIdForSchedule", payPeriodIdParameter, companyIDParameter);
        }
    
        public virtual int usp_TAMasterTableSelect(string tableName, Nullable<int> companyID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TAMasterTableSelect", tableNameParameter, companyIDParameter);
        }
    
        public virtual int usp_EmployeeAssetDelete(Nullable<int> employeeAssetId)
        {
            var employeeAssetIdParameter = employeeAssetId.HasValue ?
                new ObjectParameter("EmployeeAssetId", employeeAssetId) :
                new ObjectParameter("EmployeeAssetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeAssetDelete", employeeAssetIdParameter);
        }
    
        public virtual int usp_EmployeeAlertUpdate(string employeeEmail, Nullable<int> employeeId, Nullable<bool> status)
        {
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeAlertUpdate", employeeEmailParameter, employeeIdParameter, statusParameter);
        }
    
        public virtual int usp_EmployeeAssetInsert(string asset, string description, string manufacturer, string model, string serialNumber, Nullable<decimal> assetCost, Nullable<System.DateTime> purchasedDate, string accountNumber, Nullable<System.DateTime> outOn, Nullable<System.DateTime> dueBack, Nullable<System.DateTime> returned, string comment, Nullable<int> userId, Nullable<int> companyId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var assetParameter = asset != null ?
                new ObjectParameter("Asset", asset) :
                new ObjectParameter("Asset", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var assetCostParameter = assetCost.HasValue ?
                new ObjectParameter("AssetCost", assetCost) :
                new ObjectParameter("AssetCost", typeof(decimal));
    
            var purchasedDateParameter = purchasedDate.HasValue ?
                new ObjectParameter("PurchasedDate", purchasedDate) :
                new ObjectParameter("PurchasedDate", typeof(System.DateTime));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var outOnParameter = outOn.HasValue ?
                new ObjectParameter("OutOn", outOn) :
                new ObjectParameter("OutOn", typeof(System.DateTime));
    
            var dueBackParameter = dueBack.HasValue ?
                new ObjectParameter("DueBack", dueBack) :
                new ObjectParameter("DueBack", typeof(System.DateTime));
    
            var returnedParameter = returned.HasValue ?
                new ObjectParameter("Returned", returned) :
                new ObjectParameter("Returned", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeAssetInsert", assetParameter, descriptionParameter, manufacturerParameter, modelParameter, serialNumberParameter, assetCostParameter, purchasedDateParameter, accountNumberParameter, outOnParameter, dueBackParameter, returnedParameter, commentParameter, userIdParameter, companyIdParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_EmployeeNotesInsert(Nullable<int> userId, Nullable<int> companyId, string description, string notesContent, string documentName, Nullable<int> documentId, Nullable<int> attachmentFileId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, ObjectParameter errorCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var notesContentParameter = notesContent != null ?
                new ObjectParameter("NotesContent", notesContent) :
                new ObjectParameter("NotesContent", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var attachmentFileIdParameter = attachmentFileId.HasValue ?
                new ObjectParameter("AttachmentFileId", attachmentFileId) :
                new ObjectParameter("AttachmentFileId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeNotesInsert", userIdParameter, companyIdParameter, descriptionParameter, notesContentParameter, documentNameParameter, documentIdParameter, attachmentFileIdParameter, createdByParameter, createdDateParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_EmployeeNotesSelectAll_Result> usp_EmployeeNotesSelectAll(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeNotesSelectAll_Result>("usp_EmployeeNotesSelectAll", userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeNotesSelectById_Result> usp_EmployeeNotesSelectById(Nullable<int> employeeNotesId)
        {
            var employeeNotesIdParameter = employeeNotesId.HasValue ?
                new ObjectParameter("EmployeeNotesId", employeeNotesId) :
                new ObjectParameter("EmployeeNotesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeNotesSelectById_Result>("usp_EmployeeNotesSelectById", employeeNotesIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeAssetSelectAll_Result> usp_EmployeeAssetSelectAll(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeAssetSelectAll_Result>("usp_EmployeeAssetSelectAll", userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeAssetSelectById_Result> usp_EmployeeAssetSelectById(Nullable<int> employeeAssetId)
        {
            var employeeAssetIdParameter = employeeAssetId.HasValue ?
                new ObjectParameter("EmployeeAssetId", employeeAssetId) :
                new ObjectParameter("EmployeeAssetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeAssetSelectById_Result>("usp_EmployeeAssetSelectById", employeeAssetIdParameter);
        }
    
        public virtual int usp_CompetencyDelete(Nullable<int> competencyId)
        {
            var competencyIdParameter = competencyId.HasValue ?
                new ObjectParameter("CompetencyId", competencyId) :
                new ObjectParameter("CompetencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompetencyDelete", competencyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompetencySelect_Result> usp_CompetencySelect(Nullable<int> companyId, Nullable<int> competencyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var competencyIdParameter = competencyId.HasValue ?
                new ObjectParameter("CompetencyId", competencyId) :
                new ObjectParameter("CompetencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompetencySelect_Result>("usp_CompetencySelect", companyIdParameter, competencyIdParameter);
        }
    
        public virtual int usp_TalentManagementDelete(Nullable<int> talentManagementId)
        {
            var talentManagementIdParameter = talentManagementId.HasValue ?
                new ObjectParameter("TalentManagementId", talentManagementId) :
                new ObjectParameter("TalentManagementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TalentManagementDelete", talentManagementIdParameter);
        }
    
        public virtual int usp_TrainingEmployeeViewDelete(Nullable<int> trainingEmployeeViewId)
        {
            var trainingEmployeeViewIdParameter = trainingEmployeeViewId.HasValue ?
                new ObjectParameter("TrainingEmployeeViewId", trainingEmployeeViewId) :
                new ObjectParameter("TrainingEmployeeViewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingEmployeeViewDelete", trainingEmployeeViewIdParameter);
        }
    
        public virtual ObjectResult<usp_TrainingEmployeeViewSelect_Result> usp_TrainingEmployeeViewSelect(Nullable<int> companyId, Nullable<int> trainingEmployeeViewId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trainingEmployeeViewIdParameter = trainingEmployeeViewId.HasValue ?
                new ObjectParameter("TrainingEmployeeViewId", trainingEmployeeViewId) :
                new ObjectParameter("TrainingEmployeeViewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEmployeeViewSelect_Result>("usp_TrainingEmployeeViewSelect", companyIdParameter, trainingEmployeeViewIdParameter);
        }
    
        public virtual int usp_EmployeeAssetUpdate(Nullable<int> employeeAssetId, string asset, string description, string manufacturer, string model, string serialNumber, Nullable<decimal> assetCost, Nullable<System.DateTime> purchasedDate, string accountNumber, Nullable<System.DateTime> outOn, Nullable<System.DateTime> dueBack, Nullable<System.DateTime> returned, string comment, Nullable<int> userId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var employeeAssetIdParameter = employeeAssetId.HasValue ?
                new ObjectParameter("EmployeeAssetId", employeeAssetId) :
                new ObjectParameter("EmployeeAssetId", typeof(int));
    
            var assetParameter = asset != null ?
                new ObjectParameter("Asset", asset) :
                new ObjectParameter("Asset", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var assetCostParameter = assetCost.HasValue ?
                new ObjectParameter("AssetCost", assetCost) :
                new ObjectParameter("AssetCost", typeof(decimal));
    
            var purchasedDateParameter = purchasedDate.HasValue ?
                new ObjectParameter("PurchasedDate", purchasedDate) :
                new ObjectParameter("PurchasedDate", typeof(System.DateTime));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var outOnParameter = outOn.HasValue ?
                new ObjectParameter("OutOn", outOn) :
                new ObjectParameter("OutOn", typeof(System.DateTime));
    
            var dueBackParameter = dueBack.HasValue ?
                new ObjectParameter("DueBack", dueBack) :
                new ObjectParameter("DueBack", typeof(System.DateTime));
    
            var returnedParameter = returned.HasValue ?
                new ObjectParameter("Returned", returned) :
                new ObjectParameter("Returned", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeAssetUpdate", employeeAssetIdParameter, assetParameter, descriptionParameter, manufacturerParameter, modelParameter, serialNumberParameter, assetCostParameter, purchasedDateParameter, accountNumberParameter, outOnParameter, dueBackParameter, returnedParameter, commentParameter, userIdParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_JobRecruiterInsert(Nullable<int> jobId, Nullable<int> employeeId, ObjectParameter errorCode)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobRecruiterInsert", jobIdParameter, employeeIdParameter, errorCode);
        }
    
        public virtual int usp_CertificationLicensesDelete(Nullable<int> certificationLicensesId)
        {
            var certificationLicensesIdParameter = certificationLicensesId.HasValue ?
                new ObjectParameter("CertificationLicensesId", certificationLicensesId) :
                new ObjectParameter("CertificationLicensesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CertificationLicensesDelete", certificationLicensesIdParameter);
        }
    
        public virtual int usp_EmployeeFolderInsert(Nullable<int> userId, Nullable<int> companyId, string documentName, Nullable<int> filesDBId, Nullable<int> categoryId, Nullable<bool> shared, ObjectParameter errorCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var filesDBIdParameter = filesDBId.HasValue ?
                new ObjectParameter("FilesDBId", filesDBId) :
                new ObjectParameter("FilesDBId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var sharedParameter = shared.HasValue ?
                new ObjectParameter("Shared", shared) :
                new ObjectParameter("Shared", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeFolderInsert", userIdParameter, companyIdParameter, documentNameParameter, filesDBIdParameter, categoryIdParameter, sharedParameter, errorCode);
        }
    
        public virtual int usp_LookUpDataInsert(string tableName, Nullable<int> companyID, string name, string description, Nullable<bool> status)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LookUpDataInsert", tableNameParameter, companyIDParameter, nameParameter, descriptionParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_LookUpDataSelectById_Result> usp_LookUpDataSelectById(string tableName, Nullable<int> companyID, Nullable<int> primaryID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var primaryIDParameter = primaryID.HasValue ?
                new ObjectParameter("PrimaryID", primaryID) :
                new ObjectParameter("PrimaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookUpDataSelectById_Result>("usp_LookUpDataSelectById", tableNameParameter, companyIDParameter, primaryIDParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeFolderUpdate_Result> usp_EmployeeFolderUpdate(Nullable<int> employeeFolderId, Nullable<int> userId, Nullable<int> companyId, string documentName, Nullable<int> filesDBId, Nullable<int> categoryId, Nullable<bool> shared)
        {
            var employeeFolderIdParameter = employeeFolderId.HasValue ?
                new ObjectParameter("EmployeeFolderId", employeeFolderId) :
                new ObjectParameter("EmployeeFolderId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var filesDBIdParameter = filesDBId.HasValue ?
                new ObjectParameter("FilesDBId", filesDBId) :
                new ObjectParameter("FilesDBId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var sharedParameter = shared.HasValue ?
                new ObjectParameter("Shared", shared) :
                new ObjectParameter("Shared", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeFolderUpdate_Result>("usp_EmployeeFolderUpdate", employeeFolderIdParameter, userIdParameter, companyIdParameter, documentNameParameter, filesDBIdParameter, categoryIdParameter, sharedParameter);
        }
    
        public virtual ObjectResult<usp_CompanyInfoInsert_Result> usp_CompanyInfoInsert(string companyName, string address1, string address2, string city, string zIP, Nullable<int> countryId, Nullable<int> stateId, string phone, string companyEmail, Nullable<int> controlType, string connectionString, string primaryControlId, string controlId, Nullable<int> corporateStructureId, Nullable<int> legalStructureId, Nullable<int> parentId, string description, string fEIN, string status, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activity, string website, Nullable<System.DateTime> fISCYear, string currency, string language, string timeZone, string association, string subscriptionCode, string type, string databaseName, string serverName, Nullable<bool> isPositionManaged, string timeProvider, string payrollProvider, Nullable<int> userId, ObjectParameter errorCode)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("CompanyEmail", companyEmail) :
                new ObjectParameter("CompanyEmail", typeof(string));
    
            var controlTypeParameter = controlType.HasValue ?
                new ObjectParameter("ControlType", controlType) :
                new ObjectParameter("ControlType", typeof(int));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(string));
    
            var primaryControlIdParameter = primaryControlId != null ?
                new ObjectParameter("PrimaryControlId", primaryControlId) :
                new ObjectParameter("PrimaryControlId", typeof(string));
    
            var controlIdParameter = controlId != null ?
                new ObjectParameter("ControlId", controlId) :
                new ObjectParameter("ControlId", typeof(string));
    
            var corporateStructureIdParameter = corporateStructureId.HasValue ?
                new ObjectParameter("CorporateStructureId", corporateStructureId) :
                new ObjectParameter("CorporateStructureId", typeof(int));
    
            var legalStructureIdParameter = legalStructureId.HasValue ?
                new ObjectParameter("LegalStructureId", legalStructureId) :
                new ObjectParameter("LegalStructureId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fEINParameter = fEIN != null ?
                new ObjectParameter("FEIN", fEIN) :
                new ObjectParameter("FEIN", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fISCYearParameter = fISCYear.HasValue ?
                new ObjectParameter("FISCYear", fISCYear) :
                new ObjectParameter("FISCYear", typeof(System.DateTime));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var associationParameter = association != null ?
                new ObjectParameter("Association", association) :
                new ObjectParameter("Association", typeof(string));
    
            var subscriptionCodeParameter = subscriptionCode != null ?
                new ObjectParameter("SubscriptionCode", subscriptionCode) :
                new ObjectParameter("SubscriptionCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("DatabaseName", databaseName) :
                new ObjectParameter("DatabaseName", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var isPositionManagedParameter = isPositionManaged.HasValue ?
                new ObjectParameter("IsPositionManaged", isPositionManaged) :
                new ObjectParameter("IsPositionManaged", typeof(bool));
    
            var timeProviderParameter = timeProvider != null ?
                new ObjectParameter("TimeProvider", timeProvider) :
                new ObjectParameter("TimeProvider", typeof(string));
    
            var payrollProviderParameter = payrollProvider != null ?
                new ObjectParameter("PayrollProvider", payrollProvider) :
                new ObjectParameter("PayrollProvider", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoInsert_Result>("usp_CompanyInfoInsert", companyNameParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIdParameter, stateIdParameter, phoneParameter, companyEmailParameter, controlTypeParameter, connectionStringParameter, primaryControlIdParameter, controlIdParameter, corporateStructureIdParameter, legalStructureIdParameter, parentIdParameter, descriptionParameter, fEINParameter, statusParameter, fromDateParameter, toDateParameter, activityParameter, websiteParameter, fISCYearParameter, currencyParameter, languageParameter, timeZoneParameter, associationParameter, subscriptionCodeParameter, typeParameter, databaseNameParameter, serverNameParameter, isPositionManagedParameter, timeProviderParameter, payrollProviderParameter, userIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_CompanyInfoUpdate_Result> usp_CompanyInfoUpdate(Nullable<int> companyId, string companyName, string address1, string address2, string city, string zIP, Nullable<int> countryId, Nullable<int> stateID, string phone, string companyEmail, Nullable<int> controlType, string connectionString, string primaryControlId, string controlId, Nullable<int> corporateStructureId, Nullable<int> legalStructureId, Nullable<int> parentId, string description, string fEIN, string status, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activity, string website, Nullable<System.DateTime> fISCYear, string currency, string language, string timeZone, string association, string subscriptionCode, string type, string databaseName, string serverName, Nullable<bool> isPositionManaged, string timeProvider, string payrollProvider, string createdBy, string modifiedBy, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("CompanyEmail", companyEmail) :
                new ObjectParameter("CompanyEmail", typeof(string));
    
            var controlTypeParameter = controlType.HasValue ?
                new ObjectParameter("ControlType", controlType) :
                new ObjectParameter("ControlType", typeof(int));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(string));
    
            var primaryControlIdParameter = primaryControlId != null ?
                new ObjectParameter("PrimaryControlId", primaryControlId) :
                new ObjectParameter("PrimaryControlId", typeof(string));
    
            var controlIdParameter = controlId != null ?
                new ObjectParameter("ControlId", controlId) :
                new ObjectParameter("ControlId", typeof(string));
    
            var corporateStructureIdParameter = corporateStructureId.HasValue ?
                new ObjectParameter("CorporateStructureId", corporateStructureId) :
                new ObjectParameter("CorporateStructureId", typeof(int));
    
            var legalStructureIdParameter = legalStructureId.HasValue ?
                new ObjectParameter("LegalStructureId", legalStructureId) :
                new ObjectParameter("LegalStructureId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fEINParameter = fEIN != null ?
                new ObjectParameter("FEIN", fEIN) :
                new ObjectParameter("FEIN", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var fISCYearParameter = fISCYear.HasValue ?
                new ObjectParameter("FISCYear", fISCYear) :
                new ObjectParameter("FISCYear", typeof(System.DateTime));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var associationParameter = association != null ?
                new ObjectParameter("Association", association) :
                new ObjectParameter("Association", typeof(string));
    
            var subscriptionCodeParameter = subscriptionCode != null ?
                new ObjectParameter("SubscriptionCode", subscriptionCode) :
                new ObjectParameter("SubscriptionCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("DatabaseName", databaseName) :
                new ObjectParameter("DatabaseName", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var isPositionManagedParameter = isPositionManaged.HasValue ?
                new ObjectParameter("IsPositionManaged", isPositionManaged) :
                new ObjectParameter("IsPositionManaged", typeof(bool));
    
            var timeProviderParameter = timeProvider != null ?
                new ObjectParameter("TimeProvider", timeProvider) :
                new ObjectParameter("TimeProvider", typeof(string));
    
            var payrollProviderParameter = payrollProvider != null ?
                new ObjectParameter("PayrollProvider", payrollProvider) :
                new ObjectParameter("PayrollProvider", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoUpdate_Result>("usp_CompanyInfoUpdate", companyIdParameter, companyNameParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIdParameter, stateIDParameter, phoneParameter, companyEmailParameter, controlTypeParameter, connectionStringParameter, primaryControlIdParameter, controlIdParameter, corporateStructureIdParameter, legalStructureIdParameter, parentIdParameter, descriptionParameter, fEINParameter, statusParameter, fromDateParameter, toDateParameter, activityParameter, websiteParameter, fISCYearParameter, currencyParameter, languageParameter, timeZoneParameter, associationParameter, subscriptionCodeParameter, typeParameter, databaseNameParameter, serverNameParameter, isPositionManagedParameter, timeProviderParameter, payrollProviderParameter, createdByParameter, modifiedByParameter, createdOnParameter, modifiedOnParameter);
        }
    
        public virtual int usp_LookUpDataUpdate(string tableName, Nullable<int> companyID, string name, string description, Nullable<bool> status, Nullable<int> primaryID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var primaryIDParameter = primaryID.HasValue ?
                new ObjectParameter("PrimaryID", primaryID) :
                new ObjectParameter("PrimaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LookUpDataUpdate", tableNameParameter, companyIDParameter, nameParameter, descriptionParameter, statusParameter, primaryIDParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSnapshotSelectAll_Result> usp_EmployeeSnapshotSelectAll(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSnapshotSelectAll_Result>("usp_EmployeeSnapshotSelectAll", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_EmployeeFolderDelete(Nullable<int> employeeFolderId)
        {
            var employeeFolderIdParameter = employeeFolderId.HasValue ?
                new ObjectParameter("EmployeeFolderId", employeeFolderId) :
                new ObjectParameter("EmployeeFolderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeFolderDelete", employeeFolderIdParameter);
        }
    
        public virtual int usp_CompanyDocumentDelete(Nullable<int> companyDocumentId)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyDocumentDelete", companyDocumentIdParameter);
        }
    
        public virtual int usp_CompanyLinkDelete(Nullable<int> companyLinkId)
        {
            var companyLinkIdParameter = companyLinkId.HasValue ?
                new ObjectParameter("CompanyLinkId", companyLinkId) :
                new ObjectParameter("CompanyLinkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyLinkDelete", companyLinkIdParameter);
        }
    
        public virtual int usp_CompanyLinkUpdate(Nullable<int> companyLinkId, string name, string url, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var companyLinkIdParameter = companyLinkId.HasValue ?
                new ObjectParameter("CompanyLinkId", companyLinkId) :
                new ObjectParameter("CompanyLinkId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyLinkUpdate", companyLinkIdParameter, nameParameter, urlParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int usp_TalentManagementInsert(Nullable<int> companyId, string schoolName, string location, Nullable<System.DateTime> startDate, Nullable<int> graduated, Nullable<System.DateTime> graduationDate, Nullable<int> gPA, Nullable<int> honoraryRecognition, Nullable<int> level, Nullable<System.DateTime> verificationDate, string major, string secondMajor, string minor, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var graduatedParameter = graduated.HasValue ?
                new ObjectParameter("Graduated", graduated) :
                new ObjectParameter("Graduated", typeof(int));
    
            var graduationDateParameter = graduationDate.HasValue ?
                new ObjectParameter("GraduationDate", graduationDate) :
                new ObjectParameter("GraduationDate", typeof(System.DateTime));
    
            var gPAParameter = gPA.HasValue ?
                new ObjectParameter("GPA", gPA) :
                new ObjectParameter("GPA", typeof(int));
    
            var honoraryRecognitionParameter = honoraryRecognition.HasValue ?
                new ObjectParameter("HonoraryRecognition", honoraryRecognition) :
                new ObjectParameter("HonoraryRecognition", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var verificationDateParameter = verificationDate.HasValue ?
                new ObjectParameter("VerificationDate", verificationDate) :
                new ObjectParameter("VerificationDate", typeof(System.DateTime));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var secondMajorParameter = secondMajor != null ?
                new ObjectParameter("SecondMajor", secondMajor) :
                new ObjectParameter("SecondMajor", typeof(string));
    
            var minorParameter = minor != null ?
                new ObjectParameter("Minor", minor) :
                new ObjectParameter("Minor", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TalentManagementInsert", companyIdParameter, schoolNameParameter, locationParameter, startDateParameter, graduatedParameter, graduationDateParameter, gPAParameter, honoraryRecognitionParameter, levelParameter, verificationDateParameter, majorParameter, secondMajorParameter, minorParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_TalentManagementUpdate(Nullable<int> talentManagementId, Nullable<int> companyId, string schoolName, string location, Nullable<System.DateTime> startDate, Nullable<int> graduated, Nullable<System.DateTime> graduationDate, Nullable<int> gPA, Nullable<int> honoraryRecognition, Nullable<int> level, Nullable<System.DateTime> verificationDate, string major, string secondMajor, string minor, Nullable<int> modifiedBy)
        {
            var talentManagementIdParameter = talentManagementId.HasValue ?
                new ObjectParameter("TalentManagementId", talentManagementId) :
                new ObjectParameter("TalentManagementId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var graduatedParameter = graduated.HasValue ?
                new ObjectParameter("Graduated", graduated) :
                new ObjectParameter("Graduated", typeof(int));
    
            var graduationDateParameter = graduationDate.HasValue ?
                new ObjectParameter("GraduationDate", graduationDate) :
                new ObjectParameter("GraduationDate", typeof(System.DateTime));
    
            var gPAParameter = gPA.HasValue ?
                new ObjectParameter("GPA", gPA) :
                new ObjectParameter("GPA", typeof(int));
    
            var honoraryRecognitionParameter = honoraryRecognition.HasValue ?
                new ObjectParameter("HonoraryRecognition", honoraryRecognition) :
                new ObjectParameter("HonoraryRecognition", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var verificationDateParameter = verificationDate.HasValue ?
                new ObjectParameter("VerificationDate", verificationDate) :
                new ObjectParameter("VerificationDate", typeof(System.DateTime));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var secondMajorParameter = secondMajor != null ?
                new ObjectParameter("SecondMajor", secondMajor) :
                new ObjectParameter("SecondMajor", typeof(string));
    
            var minorParameter = minor != null ?
                new ObjectParameter("Minor", minor) :
                new ObjectParameter("Minor", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TalentManagementUpdate", talentManagementIdParameter, companyIdParameter, schoolNameParameter, locationParameter, startDateParameter, graduatedParameter, graduationDateParameter, gPAParameter, honoraryRecognitionParameter, levelParameter, verificationDateParameter, majorParameter, secondMajorParameter, minorParameter, modifiedByParameter);
        }
    
        public virtual int usp_TrainingEmployeeViewInsert(Nullable<int> companyId, string className, Nullable<System.DateTime> completionDate, Nullable<System.DateTime> expirationDate, Nullable<int> certificateFile, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var certificateFileParameter = certificateFile.HasValue ?
                new ObjectParameter("CertificateFile", certificateFile) :
                new ObjectParameter("CertificateFile", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingEmployeeViewInsert", companyIdParameter, classNameParameter, completionDateParameter, expirationDateParameter, certificateFileParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_TrainingEmployeeViewUpdate(Nullable<int> trainingEmployeeViewId, Nullable<int> companyId, string className, Nullable<System.DateTime> completionDate, Nullable<System.DateTime> expirationDate, Nullable<int> certificateFile, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var trainingEmployeeViewIdParameter = trainingEmployeeViewId.HasValue ?
                new ObjectParameter("TrainingEmployeeViewId", trainingEmployeeViewId) :
                new ObjectParameter("TrainingEmployeeViewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var certificateFileParameter = certificateFile.HasValue ?
                new ObjectParameter("CertificateFile", certificateFile) :
                new ObjectParameter("CertificateFile", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingEmployeeViewUpdate", trainingEmployeeViewIdParameter, companyIdParameter, classNameParameter, completionDateParameter, expirationDateParameter, certificateFileParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_CompetencySelectAll_Result> usp_CompetencySelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompetencySelectAll_Result>("usp_CompetencySelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TrainingEmployeeViewSelectAll_Result> usp_TrainingEmployeeViewSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEmployeeViewSelectAll_Result>("usp_TrainingEmployeeViewSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ListCompanyMenu_Result> usp_ListCompanyMenu(Nullable<int> companyId, Nullable<int> roleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListCompanyMenu_Result>("usp_ListCompanyMenu", companyIdParameter, roleIdParameter);
        }
    
        public virtual int usp_EmployeeDocumentDelete(Nullable<int> employeeDocumentId)
        {
            var employeeDocumentIdParameter = employeeDocumentId.HasValue ?
                new ObjectParameter("EmployeeDocumentId", employeeDocumentId) :
                new ObjectParameter("EmployeeDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeDocumentDelete", employeeDocumentIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDocumentInsert_Result> usp_EmployeeDocumentInsert(Nullable<int> companyDocumentId, Nullable<int> employeeId, string employeeName, string employeeEmail, Nullable<bool> status)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDocumentInsert_Result>("usp_EmployeeDocumentInsert", companyDocumentIdParameter, employeeIdParameter, employeeNameParameter, employeeEmailParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDocumentSelect_Result> usp_EmployeeDocumentSelect(Nullable<int> employeeDocumentId)
        {
            var employeeDocumentIdParameter = employeeDocumentId.HasValue ?
                new ObjectParameter("EmployeeDocumentId", employeeDocumentId) :
                new ObjectParameter("EmployeeDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDocumentSelect_Result>("usp_EmployeeDocumentSelect", employeeDocumentIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDocumentSelectAll_Result> usp_EmployeeDocumentSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDocumentSelectAll_Result>("usp_EmployeeDocumentSelectAll");
        }
    
        public virtual ObjectResult<usp_EmployeeDocumentUpdate_Result> usp_EmployeeDocumentUpdate(Nullable<int> employeeDocumentId, Nullable<int> companyDocumentId, Nullable<int> employeeId, string employeeName, string employeeEmail, Nullable<bool> status)
        {
            var employeeDocumentIdParameter = employeeDocumentId.HasValue ?
                new ObjectParameter("EmployeeDocumentId", employeeDocumentId) :
                new ObjectParameter("EmployeeDocumentId", typeof(int));
    
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDocumentUpdate_Result>("usp_EmployeeDocumentUpdate", employeeDocumentIdParameter, companyDocumentIdParameter, employeeIdParameter, employeeNameParameter, employeeEmailParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_ListModuleLevelSecurity_Result> usp_ListModuleLevelSecurity(Nullable<int> companyId, Nullable<int> roleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListModuleLevelSecurity_Result>("usp_ListModuleLevelSecurity", companyIdParameter, roleIdParameter);
        }
    
        public virtual int usp_FilesDBInsert(Nullable<int> companyId, byte[] fileBytes, string fileName, string fileSize, string contentType, string fileExtension, Nullable<int> createdBy, string fileType, Nullable<int> userId, ObjectParameter errorCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var fileBytesParameter = fileBytes != null ?
                new ObjectParameter("FileBytes", fileBytes) :
                new ObjectParameter("FileBytes", typeof(byte[]));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FilesDBInsert", companyIdParameter, fileBytesParameter, fileNameParameter, fileSizeParameter, contentTypeParameter, fileExtensionParameter, createdByParameter, fileTypeParameter, userIdParameter, errorCode);
        }
    
        public virtual int usp_UpdateEmployeePhoto(Nullable<int> userId, Nullable<int> photoFileId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var photoFileIdParameter = photoFileId.HasValue ?
                new ObjectParameter("PhotoFileId", photoFileId) :
                new ObjectParameter("PhotoFileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmployeePhoto", userIdParameter, photoFileIdParameter);
        }
    
        public virtual ObjectResult<usp_ListFormLevelSecurity_Result> usp_ListFormLevelSecurity(Nullable<int> companyId, Nullable<int> roleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListFormLevelSecurity_Result>("usp_ListFormLevelSecurity", companyIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyInfoSelectAllCompanies_Result> usp_CompanyInfoSelectAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyInfoSelectAllCompanies_Result>("usp_CompanyInfoSelectAllCompanies");
        }
    
        public virtual int usp_JobProfileDelete(Nullable<int> jobProfileID, Nullable<int> companyId)
        {
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobProfileDelete", jobProfileIDParameter, companyIdParameter);
        }
    
        public virtual int usp_FormsUpdate(Nullable<int> formId, Nullable<int> moduleId, string controllerName, string actionName, string routeAttribute, Nullable<int> companyId, Nullable<int> orderNo, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var routeAttributeParameter = routeAttribute != null ?
                new ObjectParameter("RouteAttribute", routeAttribute) :
                new ObjectParameter("RouteAttribute", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FormsUpdate", formIdParameter, moduleIdParameter, controllerNameParameter, actionNameParameter, routeAttributeParameter, companyIdParameter, orderNoParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_DocumentSendCriteriaDelete(Nullable<int> documentSendCriteriaId)
        {
            var documentSendCriteriaIdParameter = documentSendCriteriaId.HasValue ?
                new ObjectParameter("DocumentSendCriteriaId", documentSendCriteriaId) :
                new ObjectParameter("DocumentSendCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentSendCriteriaDelete", documentSendCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendCriteriaInsert_Result> usp_DocumentSendCriteriaInsert(string documentSendCriteriaName)
        {
            var documentSendCriteriaNameParameter = documentSendCriteriaName != null ?
                new ObjectParameter("DocumentSendCriteriaName", documentSendCriteriaName) :
                new ObjectParameter("DocumentSendCriteriaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendCriteriaInsert_Result>("usp_DocumentSendCriteriaInsert", documentSendCriteriaNameParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendCriteriaSelect_Result> usp_DocumentSendCriteriaSelect(Nullable<int> documentSendCriteriaId)
        {
            var documentSendCriteriaIdParameter = documentSendCriteriaId.HasValue ?
                new ObjectParameter("DocumentSendCriteriaId", documentSendCriteriaId) :
                new ObjectParameter("DocumentSendCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendCriteriaSelect_Result>("usp_DocumentSendCriteriaSelect", documentSendCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendCriteriaUpdate_Result> usp_DocumentSendCriteriaUpdate(Nullable<int> documentSendCriteriaId, string documentSendCriteriaName)
        {
            var documentSendCriteriaIdParameter = documentSendCriteriaId.HasValue ?
                new ObjectParameter("DocumentSendCriteriaId", documentSendCriteriaId) :
                new ObjectParameter("DocumentSendCriteriaId", typeof(int));
    
            var documentSendCriteriaNameParameter = documentSendCriteriaName != null ?
                new ObjectParameter("DocumentSendCriteriaName", documentSendCriteriaName) :
                new ObjectParameter("DocumentSendCriteriaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendCriteriaUpdate_Result>("usp_DocumentSendCriteriaUpdate", documentSendCriteriaIdParameter, documentSendCriteriaNameParameter);
        }
    
        public virtual int usp_DocumentSendTypeDelete(Nullable<int> documentSendTypeId)
        {
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentSendTypeDelete", documentSendTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendTypeInsert_Result> usp_DocumentSendTypeInsert(string documentSendTypeName)
        {
            var documentSendTypeNameParameter = documentSendTypeName != null ?
                new ObjectParameter("DocumentSendTypeName", documentSendTypeName) :
                new ObjectParameter("DocumentSendTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendTypeInsert_Result>("usp_DocumentSendTypeInsert", documentSendTypeNameParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendTypeSelect_Result> usp_DocumentSendTypeSelect(Nullable<int> documentSendTypeId)
        {
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendTypeSelect_Result>("usp_DocumentSendTypeSelect", documentSendTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentSendTypeSelectAll_Result> usp_DocumentSendTypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendTypeSelectAll_Result>("usp_DocumentSendTypeSelectAll");
        }
    
        public virtual ObjectResult<usp_DocumentSendTypeUpdate_Result> usp_DocumentSendTypeUpdate(Nullable<int> documentSendTypeId, string documentSendTypeName)
        {
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            var documentSendTypeNameParameter = documentSendTypeName != null ?
                new ObjectParameter("DocumentSendTypeName", documentSendTypeName) :
                new ObjectParameter("DocumentSendTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendTypeUpdate_Result>("usp_DocumentSendTypeUpdate", documentSendTypeIdParameter, documentSendTypeNameParameter);
        }
    
        public virtual int usp_ImportBulkEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ImportBulkEmployee");
        }
    
        public virtual ObjectResult<usp_DocumentSendCriteriaSelectAll_Result> usp_DocumentSendCriteriaSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentSendCriteriaSelectAll_Result>("usp_DocumentSendCriteriaSelectAll");
        }
    
        public virtual int usp_CompanyLinkInsert(string name, string url, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> companyId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyLinkInsert", nameParameter, urlParameter, createdByParameter, createdDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyLinkSelect_Result> usp_CompanyLinkSelect(Nullable<int> companyLinkId)
        {
            var companyLinkIdParameter = companyLinkId.HasValue ?
                new ObjectParameter("CompanyLinkId", companyLinkId) :
                new ObjectParameter("CompanyLinkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyLinkSelect_Result>("usp_CompanyLinkSelect", companyLinkIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyLinkSelectAll_Result> usp_CompanyLinkSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyLinkSelectAll_Result>("usp_CompanyLinkSelectAll", companyIdParameter);
        }
    
        public virtual int usp_FormsInsert(string formName, string displayName, Nullable<int> moduleId, string controllerName, string actionName, string routeAttribute, Nullable<int> companyId, Nullable<bool> isVisible, Nullable<int> orderNo, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var routeAttributeParameter = routeAttribute != null ?
                new ObjectParameter("RouteAttribute", routeAttribute) :
                new ObjectParameter("RouteAttribute", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FormsInsert", formNameParameter, displayNameParameter, moduleIdParameter, controllerNameParameter, actionNameParameter, routeAttributeParameter, companyIdParameter, isVisibleParameter, orderNoParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual int usp_JobRecruiterDelete(Nullable<int> jobId, Nullable<int> employeeId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobRecruiterDelete", jobIdParameter, employeeIdParameter);
        }
    
        public virtual int ManageFormAuthorizationByRole(Nullable<int> companyId, Nullable<int> roleId, Nullable<bool> canHire, Nullable<bool> canViewHires, Nullable<bool> canAccessDashBoard, Nullable<int> modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var canHireParameter = canHire.HasValue ?
                new ObjectParameter("CanHire", canHire) :
                new ObjectParameter("CanHire", typeof(bool));
    
            var canViewHiresParameter = canViewHires.HasValue ?
                new ObjectParameter("CanViewHires", canViewHires) :
                new ObjectParameter("CanViewHires", typeof(bool));
    
            var canAccessDashBoardParameter = canAccessDashBoard.HasValue ?
                new ObjectParameter("CanAccessDashBoard", canAccessDashBoard) :
                new ObjectParameter("CanAccessDashBoard", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageFormAuthorizationByRole", companyIdParameter, roleIdParameter, canHireParameter, canViewHiresParameter, canAccessDashBoardParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByCompanyId_Result> usp_SelectEmployeeByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByCompanyId_Result>("usp_SelectEmployeeByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByEmploymentType_Result> usp_SelectEmployeeByEmploymentType(Nullable<int> companyId, Nullable<int> employmentTypeId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employmentTypeIdParameter = employmentTypeId.HasValue ?
                new ObjectParameter("EmploymentTypeId", employmentTypeId) :
                new ObjectParameter("EmploymentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByEmploymentType_Result>("usp_SelectEmployeeByEmploymentType", companyIdParameter, employmentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByJob_Result> usp_SelectEmployeeByJob(Nullable<int> companyId, Nullable<int> jobId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByJob_Result>("usp_SelectEmployeeByJob", companyIdParameter, jobIdParameter);
        }
    
        public virtual int usp_JobProfileVisitorCountUpdate(Nullable<int> jobProfileID, Nullable<int> companyId, Nullable<int> visitorCount, ObjectParameter errorCode)
        {
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var visitorCountParameter = visitorCount.HasValue ?
                new ObjectParameter("VisitorCount", visitorCount) :
                new ObjectParameter("VisitorCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobProfileVisitorCountUpdate", jobProfileIDParameter, companyIdParameter, visitorCountParameter, errorCode);
        }
    
        public virtual int usp_CompanyAnnouncementInsert(Nullable<int> companyId, string title, string message, Nullable<System.DateTime> publishStartDate, Nullable<System.DateTime> publishEndDate, Nullable<bool> acknowledgementReq, Nullable<int> attachmentId, Nullable<bool> isDraft, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var publishStartDateParameter = publishStartDate.HasValue ?
                new ObjectParameter("PublishStartDate", publishStartDate) :
                new ObjectParameter("PublishStartDate", typeof(System.DateTime));
    
            var publishEndDateParameter = publishEndDate.HasValue ?
                new ObjectParameter("PublishEndDate", publishEndDate) :
                new ObjectParameter("PublishEndDate", typeof(System.DateTime));
    
            var acknowledgementReqParameter = acknowledgementReq.HasValue ?
                new ObjectParameter("AcknowledgementReq", acknowledgementReq) :
                new ObjectParameter("AcknowledgementReq", typeof(bool));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyAnnouncementInsert", companyIdParameter, titleParameter, messageParameter, publishStartDateParameter, publishEndDateParameter, acknowledgementReqParameter, attachmentIdParameter, isDraftParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<usp_CompanyAnnouncementSelect_Result> usp_CompanyAnnouncementSelect(Nullable<int> companyAnnouncementId)
        {
            var companyAnnouncementIdParameter = companyAnnouncementId.HasValue ?
                new ObjectParameter("CompanyAnnouncementId", companyAnnouncementId) :
                new ObjectParameter("CompanyAnnouncementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyAnnouncementSelect_Result>("usp_CompanyAnnouncementSelect", companyAnnouncementIdParameter);
        }
    
        public virtual int usp_CompanyAnnouncementUpdate(Nullable<int> companyAnnouncementId, Nullable<int> companyId, string title, string message, Nullable<System.DateTime> publishStartDate, Nullable<System.DateTime> publishEndDate, Nullable<bool> acknowledgementReq, Nullable<int> attachmentId, Nullable<bool> isDraft, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var companyAnnouncementIdParameter = companyAnnouncementId.HasValue ?
                new ObjectParameter("CompanyAnnouncementId", companyAnnouncementId) :
                new ObjectParameter("CompanyAnnouncementId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var publishStartDateParameter = publishStartDate.HasValue ?
                new ObjectParameter("PublishStartDate", publishStartDate) :
                new ObjectParameter("PublishStartDate", typeof(System.DateTime));
    
            var publishEndDateParameter = publishEndDate.HasValue ?
                new ObjectParameter("PublishEndDate", publishEndDate) :
                new ObjectParameter("PublishEndDate", typeof(System.DateTime));
    
            var acknowledgementReqParameter = acknowledgementReq.HasValue ?
                new ObjectParameter("AcknowledgementReq", acknowledgementReq) :
                new ObjectParameter("AcknowledgementReq", typeof(bool));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyAnnouncementUpdate", companyAnnouncementIdParameter, companyIdParameter, titleParameter, messageParameter, publishStartDateParameter, publishEndDateParameter, acknowledgementReqParameter, attachmentIdParameter, isDraftParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int usp_CreateDefaultSecurityforRole(Nullable<int> companyId, ObjectParameter errorCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateDefaultSecurityforRole", companyIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_ListFormLevelSecurityForManaging_Result> usp_ListFormLevelSecurityForManaging(Nullable<int> companyId, Nullable<int> roleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListFormLevelSecurityForManaging_Result>("usp_ListFormLevelSecurityForManaging", companyIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<usp_ListModuleLevelSecurityForManaging_Result> usp_ListModuleLevelSecurityForManaging(Nullable<int> companyId, Nullable<int> roleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListModuleLevelSecurityForManaging_Result>("usp_ListModuleLevelSecurityForManaging", companyIdParameter, roleIdParameter);
        }
    
        public virtual int usp_CompanyAnnouncementDelete(Nullable<int> companyAnnouncementId)
        {
            var companyAnnouncementIdParameter = companyAnnouncementId.HasValue ?
                new ObjectParameter("CompanyAnnouncementId", companyAnnouncementId) :
                new ObjectParameter("CompanyAnnouncementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyAnnouncementDelete", companyAnnouncementIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyAnnouncementSelectAll_Result> usp_CompanyAnnouncementSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyAnnouncementSelectAll_Result>("usp_CompanyAnnouncementSelectAll", companyIdParameter);
        }
    
        public virtual int usp_ManageFormAuthorizationByRole(Nullable<int> companyId, Nullable<int> roleId, Nullable<bool> canHire, Nullable<bool> canViewHires, Nullable<bool> canAccessDashBoard, Nullable<int> employeeFilterCriteriaId, Nullable<int> modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var canHireParameter = canHire.HasValue ?
                new ObjectParameter("CanHire", canHire) :
                new ObjectParameter("CanHire", typeof(bool));
    
            var canViewHiresParameter = canViewHires.HasValue ?
                new ObjectParameter("CanViewHires", canViewHires) :
                new ObjectParameter("CanViewHires", typeof(bool));
    
            var canAccessDashBoardParameter = canAccessDashBoard.HasValue ?
                new ObjectParameter("CanAccessDashBoard", canAccessDashBoard) :
                new ObjectParameter("CanAccessDashBoard", typeof(bool));
    
            var employeeFilterCriteriaIdParameter = employeeFilterCriteriaId.HasValue ?
                new ObjectParameter("EmployeeFilterCriteriaId", employeeFilterCriteriaId) :
                new ObjectParameter("EmployeeFilterCriteriaId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ManageFormAuthorizationByRole", companyIdParameter, roleIdParameter, canHireParameter, canViewHiresParameter, canAccessDashBoardParameter, employeeFilterCriteriaIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_GetDutiesCategoryByID_Result> usp_GetDutiesCategoryByID(Nullable<int> dutiesID)
        {
            var dutiesIDParameter = dutiesID.HasValue ?
                new ObjectParameter("DutiesID", dutiesID) :
                new ObjectParameter("DutiesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDutiesCategoryByID_Result>("usp_GetDutiesCategoryByID", dutiesIDParameter);
        }
    
        public virtual int usp_GetSelectedProfileDuties(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSelectedProfileDuties", profileIDParameter);
        }
    
        public virtual int usp_CompanyDocumentInsert(string companyDocumentTitle, string companyDocumentText, Nullable<int> companyId, Nullable<int> attachmentId, Nullable<int> categoryId, Nullable<bool> isShowDocumentOnHomePage, string fromAddress, Nullable<bool> status, Nullable<int> sendTo, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, ObjectParameter errorCode)
        {
            var companyDocumentTitleParameter = companyDocumentTitle != null ?
                new ObjectParameter("CompanyDocumentTitle", companyDocumentTitle) :
                new ObjectParameter("CompanyDocumentTitle", typeof(string));
    
            var companyDocumentTextParameter = companyDocumentText != null ?
                new ObjectParameter("CompanyDocumentText", companyDocumentText) :
                new ObjectParameter("CompanyDocumentText", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var isShowDocumentOnHomePageParameter = isShowDocumentOnHomePage.HasValue ?
                new ObjectParameter("IsShowDocumentOnHomePage", isShowDocumentOnHomePage) :
                new ObjectParameter("IsShowDocumentOnHomePage", typeof(bool));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var sendToParameter = sendTo.HasValue ?
                new ObjectParameter("SendTo", sendTo) :
                new ObjectParameter("SendTo", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyDocumentInsert", companyDocumentTitleParameter, companyDocumentTextParameter, companyIdParameter, attachmentIdParameter, categoryIdParameter, isShowDocumentOnHomePageParameter, fromAddressParameter, statusParameter, sendToParameter, createdOnParameter, createdByParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_CompanyDocumentSelect_Result> usp_CompanyDocumentSelect(Nullable<int> companyDocumentId)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyDocumentSelect_Result>("usp_CompanyDocumentSelect", companyDocumentIdParameter);
        }
    
        public virtual int usp_CompanyDocumentUpdate(Nullable<int> companyDocumentId, string companyDocumentTitle, string companyDocumentText, Nullable<int> companyId, Nullable<int> attachmentId, Nullable<int> categoryId, Nullable<bool> isShowDocumentOnHomePage, string fromAddress, Nullable<bool> status, Nullable<int> sendTo, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var companyDocumentTitleParameter = companyDocumentTitle != null ?
                new ObjectParameter("CompanyDocumentTitle", companyDocumentTitle) :
                new ObjectParameter("CompanyDocumentTitle", typeof(string));
    
            var companyDocumentTextParameter = companyDocumentText != null ?
                new ObjectParameter("CompanyDocumentText", companyDocumentText) :
                new ObjectParameter("CompanyDocumentText", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var isShowDocumentOnHomePageParameter = isShowDocumentOnHomePage.HasValue ?
                new ObjectParameter("IsShowDocumentOnHomePage", isShowDocumentOnHomePage) :
                new ObjectParameter("IsShowDocumentOnHomePage", typeof(bool));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var sendToParameter = sendTo.HasValue ?
                new ObjectParameter("SendTo", sendTo) :
                new ObjectParameter("SendTo", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyDocumentUpdate", companyDocumentIdParameter, companyDocumentTitleParameter, companyDocumentTextParameter, companyIdParameter, attachmentIdParameter, categoryIdParameter, isShowDocumentOnHomePageParameter, fromAddressParameter, statusParameter, sendToParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_CompanyDocumentSelectAll_Result> usp_CompanyDocumentSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyDocumentSelectAll_Result>("usp_CompanyDocumentSelectAll", companyIdParameter);
        }
    
        public virtual int usp_DocumentAdvancedCriteriaDelete(Nullable<int> documentAdvancedCriteriaId)
        {
            var documentAdvancedCriteriaIdParameter = documentAdvancedCriteriaId.HasValue ?
                new ObjectParameter("DocumentAdvancedCriteriaId", documentAdvancedCriteriaId) :
                new ObjectParameter("DocumentAdvancedCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentAdvancedCriteriaDelete", documentAdvancedCriteriaIdParameter);
        }
    
        public virtual int usp_DocumentBasicCriteriaDelete(Nullable<int> documentBasicCriteriaId)
        {
            var documentBasicCriteriaIdParameter = documentBasicCriteriaId.HasValue ?
                new ObjectParameter("DocumentBasicCriteriaId", documentBasicCriteriaId) :
                new ObjectParameter("DocumentBasicCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentBasicCriteriaDelete", documentBasicCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentBasicCriteriaInsert_Result> usp_DocumentBasicCriteriaInsert(Nullable<int> companyDocumentId, Nullable<int> documentSendTypeId, Nullable<int> selectedCriteriaListId)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            var selectedCriteriaListIdParameter = selectedCriteriaListId.HasValue ?
                new ObjectParameter("SelectedCriteriaListId", selectedCriteriaListId) :
                new ObjectParameter("SelectedCriteriaListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentBasicCriteriaInsert_Result>("usp_DocumentBasicCriteriaInsert", companyDocumentIdParameter, documentSendTypeIdParameter, selectedCriteriaListIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentBasicCriteriaSelect_Result> usp_DocumentBasicCriteriaSelect(Nullable<int> documentBasicCriteriaId)
        {
            var documentBasicCriteriaIdParameter = documentBasicCriteriaId.HasValue ?
                new ObjectParameter("DocumentBasicCriteriaId", documentBasicCriteriaId) :
                new ObjectParameter("DocumentBasicCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentBasicCriteriaSelect_Result>("usp_DocumentBasicCriteriaSelect", documentBasicCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentBasicCriteriaSelectAll_Result> usp_DocumentBasicCriteriaSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentBasicCriteriaSelectAll_Result>("usp_DocumentBasicCriteriaSelectAll");
        }
    
        public virtual ObjectResult<usp_DocumentBasicCriteriaUpdate_Result> usp_DocumentBasicCriteriaUpdate(Nullable<int> documentBasicCriteriaId, Nullable<int> companyDocumentId, Nullable<int> documentSendTypeId, Nullable<int> selectedCriteriaListId)
        {
            var documentBasicCriteriaIdParameter = documentBasicCriteriaId.HasValue ?
                new ObjectParameter("DocumentBasicCriteriaId", documentBasicCriteriaId) :
                new ObjectParameter("DocumentBasicCriteriaId", typeof(int));
    
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            var selectedCriteriaListIdParameter = selectedCriteriaListId.HasValue ?
                new ObjectParameter("SelectedCriteriaListId", selectedCriteriaListId) :
                new ObjectParameter("SelectedCriteriaListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentBasicCriteriaUpdate_Result>("usp_DocumentBasicCriteriaUpdate", documentBasicCriteriaIdParameter, companyDocumentIdParameter, documentSendTypeIdParameter, selectedCriteriaListIdParameter);
        }
    
        public virtual int usp_EmployeeAlertInsert(Nullable<int> alertTemplateId, Nullable<int> employeeId, Nullable<bool> status, string employeeEmail, string employeeName, ObjectParameter errorCode)
        {
            var alertTemplateIdParameter = alertTemplateId.HasValue ?
                new ObjectParameter("AlertTemplateId", alertTemplateId) :
                new ObjectParameter("AlertTemplateId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeAlertInsert", alertTemplateIdParameter, employeeIdParameter, statusParameter, employeeEmailParameter, employeeNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_SelectSuperAdmins_Result> usp_SelectSuperAdmins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectSuperAdmins_Result>("usp_SelectSuperAdmins");
        }
    
        public virtual int usp_UpdateReviewByCompanyId(Nullable<int> id, Nullable<int> companyId, string name, Nullable<int> status, Nullable<int> departmentId, Nullable<int> positionId, Nullable<int> jobTitleId, Nullable<int> employeeId, string type, Nullable<int> daysToComplete, Nullable<System.DateTime> fromDate, string fromSchedule, Nullable<int> intervalType, Nullable<int> scheduleValue, Nullable<double> accountability, Nullable<double> competency, Nullable<double> goal, Nullable<double> question, Nullable<bool> weightedAverage, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var jobTitleIdParameter = jobTitleId.HasValue ?
                new ObjectParameter("JobTitleId", jobTitleId) :
                new ObjectParameter("JobTitleId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var daysToCompleteParameter = daysToComplete.HasValue ?
                new ObjectParameter("DaysToComplete", daysToComplete) :
                new ObjectParameter("DaysToComplete", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var fromScheduleParameter = fromSchedule != null ?
                new ObjectParameter("FromSchedule", fromSchedule) :
                new ObjectParameter("FromSchedule", typeof(string));
    
            var intervalTypeParameter = intervalType.HasValue ?
                new ObjectParameter("IntervalType", intervalType) :
                new ObjectParameter("IntervalType", typeof(int));
    
            var scheduleValueParameter = scheduleValue.HasValue ?
                new ObjectParameter("ScheduleValue", scheduleValue) :
                new ObjectParameter("ScheduleValue", typeof(int));
    
            var accountabilityParameter = accountability.HasValue ?
                new ObjectParameter("Accountability", accountability) :
                new ObjectParameter("Accountability", typeof(double));
    
            var competencyParameter = competency.HasValue ?
                new ObjectParameter("Competency", competency) :
                new ObjectParameter("Competency", typeof(double));
    
            var goalParameter = goal.HasValue ?
                new ObjectParameter("Goal", goal) :
                new ObjectParameter("Goal", typeof(double));
    
            var questionParameter = question.HasValue ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(double));
    
            var weightedAverageParameter = weightedAverage.HasValue ?
                new ObjectParameter("WeightedAverage", weightedAverage) :
                new ObjectParameter("WeightedAverage", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewByCompanyId", idParameter, companyIdParameter, nameParameter, statusParameter, departmentIdParameter, positionIdParameter, jobTitleIdParameter, employeeIdParameter, typeParameter, daysToCompleteParameter, fromDateParameter, fromScheduleParameter, intervalTypeParameter, scheduleValueParameter, accountabilityParameter, competencyParameter, goalParameter, questionParameter, weightedAverageParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual ObjectResult<usp_DocumentAdvancedCriteriaInsert_Result> usp_DocumentAdvancedCriteriaInsert(Nullable<int> companyDocumentId, Nullable<int> documentSendTypeId, Nullable<int> documentSendCriteriaId, Nullable<int> selectedCriteriaListId)
        {
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            var documentSendCriteriaIdParameter = documentSendCriteriaId.HasValue ?
                new ObjectParameter("DocumentSendCriteriaId", documentSendCriteriaId) :
                new ObjectParameter("DocumentSendCriteriaId", typeof(int));
    
            var selectedCriteriaListIdParameter = selectedCriteriaListId.HasValue ?
                new ObjectParameter("SelectedCriteriaListId", selectedCriteriaListId) :
                new ObjectParameter("SelectedCriteriaListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentAdvancedCriteriaInsert_Result>("usp_DocumentAdvancedCriteriaInsert", companyDocumentIdParameter, documentSendTypeIdParameter, documentSendCriteriaIdParameter, selectedCriteriaListIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentAdvancedCriteriaSelect_Result> usp_DocumentAdvancedCriteriaSelect(Nullable<int> documentAdvancedCriteriaId)
        {
            var documentAdvancedCriteriaIdParameter = documentAdvancedCriteriaId.HasValue ?
                new ObjectParameter("DocumentAdvancedCriteriaId", documentAdvancedCriteriaId) :
                new ObjectParameter("DocumentAdvancedCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentAdvancedCriteriaSelect_Result>("usp_DocumentAdvancedCriteriaSelect", documentAdvancedCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentAdvancedCriteriaSelectAll_Result> usp_DocumentAdvancedCriteriaSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentAdvancedCriteriaSelectAll_Result>("usp_DocumentAdvancedCriteriaSelectAll");
        }
    
        public virtual ObjectResult<usp_DocumentAdvancedCriteriaUpdate_Result> usp_DocumentAdvancedCriteriaUpdate(Nullable<int> documentAdvancedCriteriaId, Nullable<int> companyDocumentId, Nullable<int> documentSendTypeId, Nullable<int> documentSendCriteriaId, Nullable<int> selectedCriteriaListId)
        {
            var documentAdvancedCriteriaIdParameter = documentAdvancedCriteriaId.HasValue ?
                new ObjectParameter("DocumentAdvancedCriteriaId", documentAdvancedCriteriaId) :
                new ObjectParameter("DocumentAdvancedCriteriaId", typeof(int));
    
            var companyDocumentIdParameter = companyDocumentId.HasValue ?
                new ObjectParameter("CompanyDocumentId", companyDocumentId) :
                new ObjectParameter("CompanyDocumentId", typeof(int));
    
            var documentSendTypeIdParameter = documentSendTypeId.HasValue ?
                new ObjectParameter("DocumentSendTypeId", documentSendTypeId) :
                new ObjectParameter("DocumentSendTypeId", typeof(int));
    
            var documentSendCriteriaIdParameter = documentSendCriteriaId.HasValue ?
                new ObjectParameter("DocumentSendCriteriaId", documentSendCriteriaId) :
                new ObjectParameter("DocumentSendCriteriaId", typeof(int));
    
            var selectedCriteriaListIdParameter = selectedCriteriaListId.HasValue ?
                new ObjectParameter("SelectedCriteriaListId", selectedCriteriaListId) :
                new ObjectParameter("SelectedCriteriaListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentAdvancedCriteriaUpdate_Result>("usp_DocumentAdvancedCriteriaUpdate", documentAdvancedCriteriaIdParameter, companyDocumentIdParameter, documentSendTypeIdParameter, documentSendCriteriaIdParameter, selectedCriteriaListIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewsById_Result> usp_GetReviewsById(Nullable<int> reviewId, Nullable<int> companyId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewsById_Result>("usp_GetReviewsById", reviewIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_PayTypeSelect_Result> usp_PayTypeSelect(Nullable<int> payTypeId, Nullable<int> companyId)
        {
            var payTypeIdParameter = payTypeId.HasValue ?
                new ObjectParameter("PayTypeId", payTypeId) :
                new ObjectParameter("PayTypeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayTypeSelect_Result>("usp_PayTypeSelect", payTypeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_PayTypeSelectAll_Result> usp_PayTypeSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayTypeSelectAll_Result>("usp_PayTypeSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeePayPeriodDates_Result> usp_GetEmployeePayPeriodDates(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeePayPeriodDates_Result>("usp_GetEmployeePayPeriodDates", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectConsentFormsByOnBoardingId_Result> usp_SelectConsentFormsByOnBoardingId(Nullable<int> onBoardingId, Nullable<int> companyId)
        {
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectConsentFormsByOnBoardingId_Result>("usp_SelectConsentFormsByOnBoardingId", onBoardingIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePayInsert_Result> usp_EmployeePayInsert(Nullable<int> userId, Nullable<int> companyId, Nullable<int> reason, Nullable<System.DateTime> effectiveDate, Nullable<int> payType, Nullable<int> payPeriodId, Nullable<bool> autoPay, Nullable<decimal> compensation, Nullable<int> compensationFrequency, Nullable<decimal> hourlyRate2, Nullable<decimal> hourlyRate3, Nullable<int> payFrequency, Nullable<double> standardHours, Nullable<decimal> payPerCheck, Nullable<decimal> hourlyEquivalent, Nullable<bool> tipped, Nullable<int> payStatus, Nullable<int> payGrade, Nullable<int> payCode, Nullable<System.DateTime> payPeriodStartDate, Nullable<System.DateTime> payPeriodEndDate, string payrollEEId, Nullable<decimal> weeklyAmount, Nullable<System.DateTime> firstPayDate, Nullable<int> shiftType, string shiftGroup, string premium, Nullable<int> jobAssignment, Nullable<int> contractStatus, string createdBy, string modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var payTypeParameter = payType.HasValue ?
                new ObjectParameter("PayType", payType) :
                new ObjectParameter("PayType", typeof(int));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var autoPayParameter = autoPay.HasValue ?
                new ObjectParameter("AutoPay", autoPay) :
                new ObjectParameter("AutoPay", typeof(bool));
    
            var compensationParameter = compensation.HasValue ?
                new ObjectParameter("Compensation", compensation) :
                new ObjectParameter("Compensation", typeof(decimal));
    
            var compensationFrequencyParameter = compensationFrequency.HasValue ?
                new ObjectParameter("CompensationFrequency", compensationFrequency) :
                new ObjectParameter("CompensationFrequency", typeof(int));
    
            var hourlyRate2Parameter = hourlyRate2.HasValue ?
                new ObjectParameter("HourlyRate2", hourlyRate2) :
                new ObjectParameter("HourlyRate2", typeof(decimal));
    
            var hourlyRate3Parameter = hourlyRate3.HasValue ?
                new ObjectParameter("HourlyRate3", hourlyRate3) :
                new ObjectParameter("HourlyRate3", typeof(decimal));
    
            var payFrequencyParameter = payFrequency.HasValue ?
                new ObjectParameter("PayFrequency", payFrequency) :
                new ObjectParameter("PayFrequency", typeof(int));
    
            var standardHoursParameter = standardHours.HasValue ?
                new ObjectParameter("StandardHours", standardHours) :
                new ObjectParameter("StandardHours", typeof(double));
    
            var payPerCheckParameter = payPerCheck.HasValue ?
                new ObjectParameter("PayPerCheck", payPerCheck) :
                new ObjectParameter("PayPerCheck", typeof(decimal));
    
            var hourlyEquivalentParameter = hourlyEquivalent.HasValue ?
                new ObjectParameter("HourlyEquivalent", hourlyEquivalent) :
                new ObjectParameter("HourlyEquivalent", typeof(decimal));
    
            var tippedParameter = tipped.HasValue ?
                new ObjectParameter("Tipped", tipped) :
                new ObjectParameter("Tipped", typeof(bool));
    
            var payStatusParameter = payStatus.HasValue ?
                new ObjectParameter("PayStatus", payStatus) :
                new ObjectParameter("PayStatus", typeof(int));
    
            var payGradeParameter = payGrade.HasValue ?
                new ObjectParameter("PayGrade", payGrade) :
                new ObjectParameter("PayGrade", typeof(int));
    
            var payCodeParameter = payCode.HasValue ?
                new ObjectParameter("PayCode", payCode) :
                new ObjectParameter("PayCode", typeof(int));
    
            var payPeriodStartDateParameter = payPeriodStartDate.HasValue ?
                new ObjectParameter("PayPeriodStartDate", payPeriodStartDate) :
                new ObjectParameter("PayPeriodStartDate", typeof(System.DateTime));
    
            var payPeriodEndDateParameter = payPeriodEndDate.HasValue ?
                new ObjectParameter("PayPeriodEndDate", payPeriodEndDate) :
                new ObjectParameter("PayPeriodEndDate", typeof(System.DateTime));
    
            var payrollEEIdParameter = payrollEEId != null ?
                new ObjectParameter("PayrollEEId", payrollEEId) :
                new ObjectParameter("PayrollEEId", typeof(string));
    
            var weeklyAmountParameter = weeklyAmount.HasValue ?
                new ObjectParameter("WeeklyAmount", weeklyAmount) :
                new ObjectParameter("WeeklyAmount", typeof(decimal));
    
            var firstPayDateParameter = firstPayDate.HasValue ?
                new ObjectParameter("FirstPayDate", firstPayDate) :
                new ObjectParameter("FirstPayDate", typeof(System.DateTime));
    
            var shiftTypeParameter = shiftType.HasValue ?
                new ObjectParameter("ShiftType", shiftType) :
                new ObjectParameter("ShiftType", typeof(int));
    
            var shiftGroupParameter = shiftGroup != null ?
                new ObjectParameter("ShiftGroup", shiftGroup) :
                new ObjectParameter("ShiftGroup", typeof(string));
    
            var premiumParameter = premium != null ?
                new ObjectParameter("Premium", premium) :
                new ObjectParameter("Premium", typeof(string));
    
            var jobAssignmentParameter = jobAssignment.HasValue ?
                new ObjectParameter("JobAssignment", jobAssignment) :
                new ObjectParameter("JobAssignment", typeof(int));
    
            var contractStatusParameter = contractStatus.HasValue ?
                new ObjectParameter("ContractStatus", contractStatus) :
                new ObjectParameter("ContractStatus", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePayInsert_Result>("usp_EmployeePayInsert", userIdParameter, companyIdParameter, reasonParameter, effectiveDateParameter, payTypeParameter, payPeriodIdParameter, autoPayParameter, compensationParameter, compensationFrequencyParameter, hourlyRate2Parameter, hourlyRate3Parameter, payFrequencyParameter, standardHoursParameter, payPerCheckParameter, hourlyEquivalentParameter, tippedParameter, payStatusParameter, payGradeParameter, payCodeParameter, payPeriodStartDateParameter, payPeriodEndDateParameter, payrollEEIdParameter, weeklyAmountParameter, firstPayDateParameter, shiftTypeParameter, shiftGroupParameter, premiumParameter, jobAssignmentParameter, contractStatusParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePaySelect_Result> usp_EmployeePaySelect(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePaySelect_Result>("usp_EmployeePaySelect", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeePayUpdate_Result> usp_EmployeePayUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> employeePayId, Nullable<int> reason, Nullable<System.DateTime> effectiveDate, Nullable<int> payType, Nullable<int> payPeriodId, Nullable<bool> autoPay, Nullable<decimal> compensation, Nullable<int> compensationFrequency, Nullable<decimal> hourlyRate2, Nullable<decimal> hourlyRate3, Nullable<int> payFrequency, Nullable<double> standardHours, Nullable<decimal> payPerCheck, Nullable<decimal> hourlyEquivalent, Nullable<bool> tipped, Nullable<int> payStatus, Nullable<int> payGrade, Nullable<int> payCode, Nullable<System.DateTime> payPeriodStartDate, Nullable<System.DateTime> payPeriodEndDate, string payrollEEId, Nullable<decimal> weeklyAmount, Nullable<System.DateTime> firstPayDate, Nullable<int> shiftType, string shiftGroup, string premium, Nullable<int> jobAssignment, Nullable<int> contractStatus, string createdBy, string modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeePayIdParameter = employeePayId.HasValue ?
                new ObjectParameter("EmployeePayId", employeePayId) :
                new ObjectParameter("EmployeePayId", typeof(int));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var payTypeParameter = payType.HasValue ?
                new ObjectParameter("PayType", payType) :
                new ObjectParameter("PayType", typeof(int));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var autoPayParameter = autoPay.HasValue ?
                new ObjectParameter("AutoPay", autoPay) :
                new ObjectParameter("AutoPay", typeof(bool));
    
            var compensationParameter = compensation.HasValue ?
                new ObjectParameter("Compensation", compensation) :
                new ObjectParameter("Compensation", typeof(decimal));
    
            var compensationFrequencyParameter = compensationFrequency.HasValue ?
                new ObjectParameter("CompensationFrequency", compensationFrequency) :
                new ObjectParameter("CompensationFrequency", typeof(int));
    
            var hourlyRate2Parameter = hourlyRate2.HasValue ?
                new ObjectParameter("HourlyRate2", hourlyRate2) :
                new ObjectParameter("HourlyRate2", typeof(decimal));
    
            var hourlyRate3Parameter = hourlyRate3.HasValue ?
                new ObjectParameter("HourlyRate3", hourlyRate3) :
                new ObjectParameter("HourlyRate3", typeof(decimal));
    
            var payFrequencyParameter = payFrequency.HasValue ?
                new ObjectParameter("PayFrequency", payFrequency) :
                new ObjectParameter("PayFrequency", typeof(int));
    
            var standardHoursParameter = standardHours.HasValue ?
                new ObjectParameter("StandardHours", standardHours) :
                new ObjectParameter("StandardHours", typeof(double));
    
            var payPerCheckParameter = payPerCheck.HasValue ?
                new ObjectParameter("PayPerCheck", payPerCheck) :
                new ObjectParameter("PayPerCheck", typeof(decimal));
    
            var hourlyEquivalentParameter = hourlyEquivalent.HasValue ?
                new ObjectParameter("HourlyEquivalent", hourlyEquivalent) :
                new ObjectParameter("HourlyEquivalent", typeof(decimal));
    
            var tippedParameter = tipped.HasValue ?
                new ObjectParameter("Tipped", tipped) :
                new ObjectParameter("Tipped", typeof(bool));
    
            var payStatusParameter = payStatus.HasValue ?
                new ObjectParameter("PayStatus", payStatus) :
                new ObjectParameter("PayStatus", typeof(int));
    
            var payGradeParameter = payGrade.HasValue ?
                new ObjectParameter("PayGrade", payGrade) :
                new ObjectParameter("PayGrade", typeof(int));
    
            var payCodeParameter = payCode.HasValue ?
                new ObjectParameter("PayCode", payCode) :
                new ObjectParameter("PayCode", typeof(int));
    
            var payPeriodStartDateParameter = payPeriodStartDate.HasValue ?
                new ObjectParameter("PayPeriodStartDate", payPeriodStartDate) :
                new ObjectParameter("PayPeriodStartDate", typeof(System.DateTime));
    
            var payPeriodEndDateParameter = payPeriodEndDate.HasValue ?
                new ObjectParameter("PayPeriodEndDate", payPeriodEndDate) :
                new ObjectParameter("PayPeriodEndDate", typeof(System.DateTime));
    
            var payrollEEIdParameter = payrollEEId != null ?
                new ObjectParameter("PayrollEEId", payrollEEId) :
                new ObjectParameter("PayrollEEId", typeof(string));
    
            var weeklyAmountParameter = weeklyAmount.HasValue ?
                new ObjectParameter("WeeklyAmount", weeklyAmount) :
                new ObjectParameter("WeeklyAmount", typeof(decimal));
    
            var firstPayDateParameter = firstPayDate.HasValue ?
                new ObjectParameter("FirstPayDate", firstPayDate) :
                new ObjectParameter("FirstPayDate", typeof(System.DateTime));
    
            var shiftTypeParameter = shiftType.HasValue ?
                new ObjectParameter("ShiftType", shiftType) :
                new ObjectParameter("ShiftType", typeof(int));
    
            var shiftGroupParameter = shiftGroup != null ?
                new ObjectParameter("ShiftGroup", shiftGroup) :
                new ObjectParameter("ShiftGroup", typeof(string));
    
            var premiumParameter = premium != null ?
                new ObjectParameter("Premium", premium) :
                new ObjectParameter("Premium", typeof(string));
    
            var jobAssignmentParameter = jobAssignment.HasValue ?
                new ObjectParameter("JobAssignment", jobAssignment) :
                new ObjectParameter("JobAssignment", typeof(int));
    
            var contractStatusParameter = contractStatus.HasValue ?
                new ObjectParameter("ContractStatus", contractStatus) :
                new ObjectParameter("ContractStatus", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeePayUpdate_Result>("usp_EmployeePayUpdate", userIdParameter, companyIdParameter, employeePayIdParameter, reasonParameter, effectiveDateParameter, payTypeParameter, payPeriodIdParameter, autoPayParameter, compensationParameter, compensationFrequencyParameter, hourlyRate2Parameter, hourlyRate3Parameter, payFrequencyParameter, standardHoursParameter, payPerCheckParameter, hourlyEquivalentParameter, tippedParameter, payStatusParameter, payGradeParameter, payCodeParameter, payPeriodStartDateParameter, payPeriodEndDateParameter, payrollEEIdParameter, weeklyAmountParameter, firstPayDateParameter, shiftTypeParameter, shiftGroupParameter, premiumParameter, jobAssignmentParameter, contractStatusParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int usp_InsertReviewScoreContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewScoreContentBulk");
        }
    
        public virtual int usp_PayPeriodsDelete(Nullable<int> payPeriodId, Nullable<int> companyId)
        {
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodsDelete", payPeriodIdParameter, companyIdParameter);
        }
    
        public virtual int usp_PayPeriodsInsert(string payPeriodDescription, Nullable<int> payPeriodTypeId, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<System.DateTime> payPeriodCheckDate, string startDayOfWeek, Nullable<bool> nextSchedule, Nullable<int> companyId)
        {
            var payPeriodDescriptionParameter = payPeriodDescription != null ?
                new ObjectParameter("PayPeriodDescription", payPeriodDescription) :
                new ObjectParameter("PayPeriodDescription", typeof(string));
    
            var payPeriodTypeIdParameter = payPeriodTypeId.HasValue ?
                new ObjectParameter("PayPeriodTypeId", payPeriodTypeId) :
                new ObjectParameter("PayPeriodTypeId", typeof(int));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var payPeriodCheckDateParameter = payPeriodCheckDate.HasValue ?
                new ObjectParameter("PayPeriodCheckDate", payPeriodCheckDate) :
                new ObjectParameter("PayPeriodCheckDate", typeof(System.DateTime));
    
            var startDayOfWeekParameter = startDayOfWeek != null ?
                new ObjectParameter("StartDayOfWeek", startDayOfWeek) :
                new ObjectParameter("StartDayOfWeek", typeof(string));
    
            var nextScheduleParameter = nextSchedule.HasValue ?
                new ObjectParameter("NextSchedule", nextSchedule) :
                new ObjectParameter("NextSchedule", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodsInsert", payPeriodDescriptionParameter, payPeriodTypeIdParameter, startDateTimeParameter, endDateTimeParameter, payPeriodCheckDateParameter, startDayOfWeekParameter, nextScheduleParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_PayPeriodsSelect_Result> usp_PayPeriodsSelect(Nullable<int> payPeriodId, Nullable<int> companyId)
        {
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayPeriodsSelect_Result>("usp_PayPeriodsSelect", payPeriodIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_PayPeriodsSelectAll_Result> usp_PayPeriodsSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayPeriodsSelectAll_Result>("usp_PayPeriodsSelectAll", companyIdParameter);
        }
    
        public virtual int usp_PayPeriodsUpdate(Nullable<int> payPeriodId, string payPeriodDescription, Nullable<int> payPeriodTypeId, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<System.DateTime> payPeriodCheckDate, string startDayOfWeek, Nullable<bool> nextSchedule, Nullable<int> companyId)
        {
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var payPeriodDescriptionParameter = payPeriodDescription != null ?
                new ObjectParameter("PayPeriodDescription", payPeriodDescription) :
                new ObjectParameter("PayPeriodDescription", typeof(string));
    
            var payPeriodTypeIdParameter = payPeriodTypeId.HasValue ?
                new ObjectParameter("PayPeriodTypeId", payPeriodTypeId) :
                new ObjectParameter("PayPeriodTypeId", typeof(int));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var payPeriodCheckDateParameter = payPeriodCheckDate.HasValue ?
                new ObjectParameter("PayPeriodCheckDate", payPeriodCheckDate) :
                new ObjectParameter("PayPeriodCheckDate", typeof(System.DateTime));
    
            var startDayOfWeekParameter = startDayOfWeek != null ?
                new ObjectParameter("StartDayOfWeek", startDayOfWeek) :
                new ObjectParameter("StartDayOfWeek", typeof(string));
    
            var nextScheduleParameter = nextSchedule.HasValue ?
                new ObjectParameter("NextSchedule", nextSchedule) :
                new ObjectParameter("NextSchedule", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayPeriodsUpdate", payPeriodIdParameter, payPeriodDescriptionParameter, payPeriodTypeIdParameter, startDateTimeParameter, endDateTimeParameter, payPeriodCheckDateParameter, startDayOfWeekParameter, nextScheduleParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSignInsert_Result> usp_EmployeeSignInsert(Nullable<int> userId, Nullable<int> companyId, string name, Nullable<int> employeeSignFileId, Nullable<bool> isDefault, Nullable<int> consentFormId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var employeeSignFileIdParameter = employeeSignFileId.HasValue ?
                new ObjectParameter("EmployeeSignFileId", employeeSignFileId) :
                new ObjectParameter("EmployeeSignFileId", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSignInsert_Result>("usp_EmployeeSignInsert", userIdParameter, companyIdParameter, nameParameter, employeeSignFileIdParameter, isDefaultParameter, consentFormIdParameter);
        }
    
        public virtual ObjectResult<GetReviewReviewerDetails_Result> GetReviewReviewerDetails(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> reviewerMasterId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReviewReviewerDetails_Result>("GetReviewReviewerDetails", reviewIdParameter, companyIdParameter, reviewerMasterIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_CheckReviewCriteriaInsert(Nullable<int> hdfn, Nullable<int> companyId, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> criteriaTypeId, string dutiesId, Nullable<int> categoryId, Nullable<int> responseTypeId, Nullable<int> scoreId)
        {
            var hdfnParameter = hdfn.HasValue ?
                new ObjectParameter("Hdfn", hdfn) :
                new ObjectParameter("Hdfn", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var criteriaTypeIdParameter = criteriaTypeId.HasValue ?
                new ObjectParameter("CriteriaTypeId", criteriaTypeId) :
                new ObjectParameter("CriteriaTypeId", typeof(int));
    
            var dutiesIdParameter = dutiesId != null ?
                new ObjectParameter("DutiesId", dutiesId) :
                new ObjectParameter("DutiesId", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var responseTypeIdParameter = responseTypeId.HasValue ?
                new ObjectParameter("ResponseTypeId", responseTypeId) :
                new ObjectParameter("ResponseTypeId", typeof(int));
    
            var scoreIdParameter = scoreId.HasValue ?
                new ObjectParameter("ScoreId", scoreId) :
                new ObjectParameter("ScoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_CheckReviewCriteriaInsert", hdfnParameter, companyIdParameter, jobProfileIdParameter, positionIdParameter, criteriaTypeIdParameter, dutiesIdParameter, categoryIdParameter, responseTypeIdParameter, scoreIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_CheckReviewCriteriaUpdate(Nullable<int> hdfn, Nullable<int> companyId, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> criteriaTypeId, string dutiesId, Nullable<int> categoryId, Nullable<int> responseTypeId, Nullable<int> scoreId, Nullable<int> reviewCriteriaId)
        {
            var hdfnParameter = hdfn.HasValue ?
                new ObjectParameter("Hdfn", hdfn) :
                new ObjectParameter("Hdfn", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var criteriaTypeIdParameter = criteriaTypeId.HasValue ?
                new ObjectParameter("CriteriaTypeId", criteriaTypeId) :
                new ObjectParameter("CriteriaTypeId", typeof(int));
    
            var dutiesIdParameter = dutiesId != null ?
                new ObjectParameter("DutiesId", dutiesId) :
                new ObjectParameter("DutiesId", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var responseTypeIdParameter = responseTypeId.HasValue ?
                new ObjectParameter("ResponseTypeId", responseTypeId) :
                new ObjectParameter("ResponseTypeId", typeof(int));
    
            var scoreIdParameter = scoreId.HasValue ?
                new ObjectParameter("ScoreId", scoreId) :
                new ObjectParameter("ScoreId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_CheckReviewCriteriaUpdate", hdfnParameter, companyIdParameter, jobProfileIdParameter, positionIdParameter, criteriaTypeIdParameter, dutiesIdParameter, categoryIdParameter, responseTypeIdParameter, scoreIdParameter, reviewCriteriaIdParameter);
        }
    
        public virtual int usp_DeleteReviewById(Nullable<int> companyId, Nullable<int> id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteReviewById", companyIdParameter, idParameter);
        }
    
        public virtual int usp_DeleteReviewCriteria(Nullable<int> companyId, Nullable<int> reviewCriteriaId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteReviewCriteria", companyIdParameter, reviewCriteriaIdParameter);
        }
    
        public virtual int usp_DeleteReviewScoreBulk(Nullable<int> companyId, Nullable<int> reviewScoreDescriptionId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewScoreDescriptionIdParameter = reviewScoreDescriptionId.HasValue ?
                new ObjectParameter("ReviewScoreDescriptionId", reviewScoreDescriptionId) :
                new ObjectParameter("ReviewScoreDescriptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteReviewScoreBulk", companyIdParameter, reviewScoreDescriptionIdParameter);
        }
    
        public virtual int usp_DeleteReviewScoreContent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteReviewScoreContent", idParameter);
        }
    
        public virtual ObjectResult<usp_GetAllReviewDetails_Result> usp_GetAllReviewDetails(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllReviewDetails_Result>("usp_GetAllReviewDetails", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllReviewScoreContent_Result> usp_GetAllReviewScoreContent(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllReviewScoreContent_Result>("usp_GetAllReviewScoreContent", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewCriteriaTypes_Result> usp_GetReviewCriteriaTypes(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewCriteriaTypes_Result>("usp_GetReviewCriteriaTypes", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewScore_Result> usp_GetReviewScore(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewScore_Result>("usp_GetReviewScore", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewScoreById_Result> usp_GetReviewScoreById(Nullable<int> reviewScoreId)
        {
            var reviewScoreIdParameter = reviewScoreId.HasValue ?
                new ObjectParameter("ReviewScoreId", reviewScoreId) :
                new ObjectParameter("ReviewScoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewScoreById_Result>("usp_GetReviewScoreById", reviewScoreIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewScoreContent_Result> usp_GetReviewScoreContent(Nullable<int> reviewScoreId)
        {
            var reviewScoreIdParameter = reviewScoreId.HasValue ?
                new ObjectParameter("ReviewScoreId", reviewScoreId) :
                new ObjectParameter("ReviewScoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewScoreContent_Result>("usp_GetReviewScoreContent", reviewScoreIdParameter);
        }
    
        public virtual int usp_InsertReviewByCompanyId(Nullable<int> companyId, string name, Nullable<int> status, Nullable<int> departmentId, Nullable<int> positionId, Nullable<int> jobTitleId, Nullable<int> employeeId, string type, Nullable<int> daysToComplete, Nullable<System.DateTime> fromDate, string fromSchedule, Nullable<int> intervalType, Nullable<int> scheduleValue, Nullable<double> accountability, Nullable<double> competency, Nullable<double> goal, Nullable<double> question, Nullable<bool> weightedAverage, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var jobTitleIdParameter = jobTitleId.HasValue ?
                new ObjectParameter("JobTitleId", jobTitleId) :
                new ObjectParameter("JobTitleId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var daysToCompleteParameter = daysToComplete.HasValue ?
                new ObjectParameter("DaysToComplete", daysToComplete) :
                new ObjectParameter("DaysToComplete", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var fromScheduleParameter = fromSchedule != null ?
                new ObjectParameter("FromSchedule", fromSchedule) :
                new ObjectParameter("FromSchedule", typeof(string));
    
            var intervalTypeParameter = intervalType.HasValue ?
                new ObjectParameter("IntervalType", intervalType) :
                new ObjectParameter("IntervalType", typeof(int));
    
            var scheduleValueParameter = scheduleValue.HasValue ?
                new ObjectParameter("ScheduleValue", scheduleValue) :
                new ObjectParameter("ScheduleValue", typeof(int));
    
            var accountabilityParameter = accountability.HasValue ?
                new ObjectParameter("Accountability", accountability) :
                new ObjectParameter("Accountability", typeof(double));
    
            var competencyParameter = competency.HasValue ?
                new ObjectParameter("Competency", competency) :
                new ObjectParameter("Competency", typeof(double));
    
            var goalParameter = goal.HasValue ?
                new ObjectParameter("Goal", goal) :
                new ObjectParameter("Goal", typeof(double));
    
            var questionParameter = question.HasValue ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(double));
    
            var weightedAverageParameter = weightedAverage.HasValue ?
                new ObjectParameter("WeightedAverage", weightedAverage) :
                new ObjectParameter("WeightedAverage", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewByCompanyId", companyIdParameter, nameParameter, statusParameter, departmentIdParameter, positionIdParameter, jobTitleIdParameter, employeeIdParameter, typeParameter, daysToCompleteParameter, fromDateParameter, fromScheduleParameter, intervalTypeParameter, scheduleValueParameter, accountabilityParameter, competencyParameter, goalParameter, questionParameter, weightedAverageParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_InsertReviewScore(Nullable<int> companyId, string description, Nullable<bool> isChildCompany, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, ObjectParameter returnId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isChildCompanyParameter = isChildCompany.HasValue ?
                new ObjectParameter("IsChildCompany", isChildCompany) :
                new ObjectParameter("IsChildCompany", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewScore", companyIdParameter, descriptionParameter, isChildCompanyParameter, createdByParameter, createdOnParameter, returnId);
        }
    
        public virtual int usp_InsertReviewScoreContent(string itemName, Nullable<double> itemValue, Nullable<int> reviewScoreId, Nullable<int> companyId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemValueParameter = itemValue.HasValue ?
                new ObjectParameter("ItemValue", itemValue) :
                new ObjectParameter("ItemValue", typeof(double));
    
            var reviewScoreIdParameter = reviewScoreId.HasValue ?
                new ObjectParameter("ReviewScoreId", reviewScoreId) :
                new ObjectParameter("ReviewScoreId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewScoreContent", itemNameParameter, itemValueParameter, reviewScoreIdParameter, companyIdParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllReviewCriteria_Result> usp_SelectAllReviewCriteria(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllReviewCriteria_Result>("usp_SelectAllReviewCriteria", companyIdParameter);
        }
    
        public virtual int usp_UpdateReviewScore(string reviewName, Nullable<bool> isChildCompany, Nullable<int> companyId, Nullable<int> reviewScoreId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var reviewNameParameter = reviewName != null ?
                new ObjectParameter("ReviewName", reviewName) :
                new ObjectParameter("ReviewName", typeof(string));
    
            var isChildCompanyParameter = isChildCompany.HasValue ?
                new ObjectParameter("IsChildCompany", isChildCompany) :
                new ObjectParameter("IsChildCompany", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewScoreIdParameter = reviewScoreId.HasValue ?
                new ObjectParameter("ReviewScoreId", reviewScoreId) :
                new ObjectParameter("ReviewScoreId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewScore", reviewNameParameter, isChildCompanyParameter, companyIdParameter, reviewScoreIdParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_UpdateReviewScoreContent(string itemName, Nullable<double> itemValue, Nullable<int> id, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemValueParameter = itemValue.HasValue ?
                new ObjectParameter("ItemValue", itemValue) :
                new ObjectParameter("ItemValue", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewScoreContent", itemNameParameter, itemValueParameter, idParameter, modifiedByParameter, modifiedOnParameter);
        }
    
        public virtual int usp_UpdateReviewScoreContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewScoreContentBulk");
        }
    
        public virtual int usp_CompensationProfileInsert(string salaryGrade, Nullable<int> benefitGroup, string stock, Nullable<decimal> otherCashComp, string pTOPlan, string otherBenefits, Nullable<int> companyId, Nullable<int> wageType, Nullable<int> wageUnit, Nullable<decimal> wageAmount, Nullable<decimal> commissions, Nullable<decimal> bonus, Nullable<decimal> amount, string type, Nullable<decimal> annualizedPay, string title)
        {
            var salaryGradeParameter = salaryGrade != null ?
                new ObjectParameter("SalaryGrade", salaryGrade) :
                new ObjectParameter("SalaryGrade", typeof(string));
    
            var benefitGroupParameter = benefitGroup.HasValue ?
                new ObjectParameter("BenefitGroup", benefitGroup) :
                new ObjectParameter("BenefitGroup", typeof(int));
    
            var stockParameter = stock != null ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(string));
    
            var otherCashCompParameter = otherCashComp.HasValue ?
                new ObjectParameter("OtherCashComp", otherCashComp) :
                new ObjectParameter("OtherCashComp", typeof(decimal));
    
            var pTOPlanParameter = pTOPlan != null ?
                new ObjectParameter("PTOPlan", pTOPlan) :
                new ObjectParameter("PTOPlan", typeof(string));
    
            var otherBenefitsParameter = otherBenefits != null ?
                new ObjectParameter("OtherBenefits", otherBenefits) :
                new ObjectParameter("OtherBenefits", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var wageTypeParameter = wageType.HasValue ?
                new ObjectParameter("WageType", wageType) :
                new ObjectParameter("WageType", typeof(int));
    
            var wageUnitParameter = wageUnit.HasValue ?
                new ObjectParameter("WageUnit", wageUnit) :
                new ObjectParameter("WageUnit", typeof(int));
    
            var wageAmountParameter = wageAmount.HasValue ?
                new ObjectParameter("WageAmount", wageAmount) :
                new ObjectParameter("WageAmount", typeof(decimal));
    
            var commissionsParameter = commissions.HasValue ?
                new ObjectParameter("Commissions", commissions) :
                new ObjectParameter("Commissions", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var annualizedPayParameter = annualizedPay.HasValue ?
                new ObjectParameter("AnnualizedPay", annualizedPay) :
                new ObjectParameter("AnnualizedPay", typeof(decimal));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompensationProfileInsert", salaryGradeParameter, benefitGroupParameter, stockParameter, otherCashCompParameter, pTOPlanParameter, otherBenefitsParameter, companyIdParameter, wageTypeParameter, wageUnitParameter, wageAmountParameter, commissionsParameter, bonusParameter, amountParameter, typeParameter, annualizedPayParameter, titleParameter);
        }
    
        public virtual int usp_CompensationProfileUpdate(Nullable<int> compensationProfileId, string salaryGrade, Nullable<int> benefitGroup, string stock, Nullable<decimal> otherCashComp, string pTOPlan, string otherBenefits, Nullable<int> companyId, Nullable<int> wageType, Nullable<int> wageUnit, Nullable<decimal> wageAmount, Nullable<decimal> commissions, Nullable<decimal> bonus, Nullable<decimal> amount, string type, Nullable<decimal> annualizedPay, string title)
        {
            var compensationProfileIdParameter = compensationProfileId.HasValue ?
                new ObjectParameter("CompensationProfileId", compensationProfileId) :
                new ObjectParameter("CompensationProfileId", typeof(int));
    
            var salaryGradeParameter = salaryGrade != null ?
                new ObjectParameter("SalaryGrade", salaryGrade) :
                new ObjectParameter("SalaryGrade", typeof(string));
    
            var benefitGroupParameter = benefitGroup.HasValue ?
                new ObjectParameter("BenefitGroup", benefitGroup) :
                new ObjectParameter("BenefitGroup", typeof(int));
    
            var stockParameter = stock != null ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(string));
    
            var otherCashCompParameter = otherCashComp.HasValue ?
                new ObjectParameter("OtherCashComp", otherCashComp) :
                new ObjectParameter("OtherCashComp", typeof(decimal));
    
            var pTOPlanParameter = pTOPlan != null ?
                new ObjectParameter("PTOPlan", pTOPlan) :
                new ObjectParameter("PTOPlan", typeof(string));
    
            var otherBenefitsParameter = otherBenefits != null ?
                new ObjectParameter("OtherBenefits", otherBenefits) :
                new ObjectParameter("OtherBenefits", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var wageTypeParameter = wageType.HasValue ?
                new ObjectParameter("WageType", wageType) :
                new ObjectParameter("WageType", typeof(int));
    
            var wageUnitParameter = wageUnit.HasValue ?
                new ObjectParameter("WageUnit", wageUnit) :
                new ObjectParameter("WageUnit", typeof(int));
    
            var wageAmountParameter = wageAmount.HasValue ?
                new ObjectParameter("WageAmount", wageAmount) :
                new ObjectParameter("WageAmount", typeof(decimal));
    
            var commissionsParameter = commissions.HasValue ?
                new ObjectParameter("Commissions", commissions) :
                new ObjectParameter("Commissions", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var annualizedPayParameter = annualizedPay.HasValue ?
                new ObjectParameter("AnnualizedPay", annualizedPay) :
                new ObjectParameter("AnnualizedPay", typeof(decimal));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompensationProfileUpdate", compensationProfileIdParameter, salaryGradeParameter, benefitGroupParameter, stockParameter, otherCashCompParameter, pTOPlanParameter, otherBenefitsParameter, companyIdParameter, wageTypeParameter, wageUnitParameter, wageAmountParameter, commissionsParameter, bonusParameter, amountParameter, typeParameter, annualizedPayParameter, titleParameter);
        }
    
        public virtual int usp_EmployeeOSHADelete(Nullable<int> employeeOSHAId, Nullable<int> companyId)
        {
            var employeeOSHAIdParameter = employeeOSHAId.HasValue ?
                new ObjectParameter("EmployeeOSHAId", employeeOSHAId) :
                new ObjectParameter("EmployeeOSHAId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeOSHADelete", employeeOSHAIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewCriteriaById_Result> usp_GetReviewCriteriaById(Nullable<int> companyId, Nullable<int> reviewCriteriaId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewCriteriaById_Result>("usp_GetReviewCriteriaById", companyIdParameter, reviewCriteriaIdParameter);
        }
    
        public virtual int usp_AlertTemplateDelete(Nullable<int> alertTemplateId, Nullable<int> companyId)
        {
            var alertTemplateIdParameter = alertTemplateId.HasValue ?
                new ObjectParameter("AlertTemplateId", alertTemplateId) :
                new ObjectParameter("AlertTemplateId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AlertTemplateDelete", alertTemplateIdParameter, companyIdParameter);
        }
    
        public virtual int usp_EmployeeEmergencyContactUpdate(Nullable<int> companyId, Nullable<int> userId, Nullable<int> employeeEmergencyContactId, string name, string homePhone, string workPhone, string cellPhone, string personalEmail, string workEmail, Nullable<int> relationship, string street1, string street2, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, Nullable<bool> isPrimaryContact, string modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var employeeEmergencyContactIdParameter = employeeEmergencyContactId.HasValue ?
                new ObjectParameter("EmployeeEmergencyContactId", employeeEmergencyContactId) :
                new ObjectParameter("EmployeeEmergencyContactId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var personalEmailParameter = personalEmail != null ?
                new ObjectParameter("PersonalEmail", personalEmail) :
                new ObjectParameter("PersonalEmail", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var isPrimaryContactParameter = isPrimaryContact.HasValue ?
                new ObjectParameter("IsPrimaryContact", isPrimaryContact) :
                new ObjectParameter("IsPrimaryContact", typeof(bool));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeEmergencyContactUpdate", companyIdParameter, userIdParameter, employeeEmergencyContactIdParameter, nameParameter, homePhoneParameter, workPhoneParameter, cellPhoneParameter, personalEmailParameter, workEmailParameter, relationshipParameter, street1Parameter, street2Parameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, isPrimaryContactParameter, modifiedByParameter);
        }
    
        public virtual int usp_UpdateReviewCriteria(Nullable<int> companyId, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> criteriaTypeId, string dutiesId, Nullable<int> categoryId, Nullable<int> responseTypeId, Nullable<int> scoreId, Nullable<int> reviewCriteriaId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var criteriaTypeIdParameter = criteriaTypeId.HasValue ?
                new ObjectParameter("CriteriaTypeId", criteriaTypeId) :
                new ObjectParameter("CriteriaTypeId", typeof(int));
    
            var dutiesIdParameter = dutiesId != null ?
                new ObjectParameter("DutiesId", dutiesId) :
                new ObjectParameter("DutiesId", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var responseTypeIdParameter = responseTypeId.HasValue ?
                new ObjectParameter("ResponseTypeId", responseTypeId) :
                new ObjectParameter("ResponseTypeId", typeof(int));
    
            var scoreIdParameter = scoreId.HasValue ?
                new ObjectParameter("ScoreId", scoreId) :
                new ObjectParameter("ScoreId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewCriteria", companyIdParameter, jobProfileIdParameter, positionIdParameter, criteriaTypeIdParameter, dutiesIdParameter, categoryIdParameter, responseTypeIdParameter, scoreIdParameter, reviewCriteriaIdParameter);
        }
    
        public virtual int usp_RoleMasterInsert(string roleName, string description, Nullable<int> companyId, Nullable<bool> status, Nullable<bool> isDefault, ObjectParameter errorCode)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RoleMasterInsert", roleNameParameter, descriptionParameter, companyIdParameter, statusParameter, isDefaultParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_EmployeeSignReviewSelect_Result> usp_EmployeeSignReviewSelect(Nullable<int> employeeId, Nullable<int> companyId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSignReviewSelect_Result>("usp_EmployeeSignReviewSelect", employeeIdParameter, companyIdParameter);
        }
    
        public virtual int usp_EmployeeDefaultSignUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> employeeSignId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeDefaultSignUpdate", userIdParameter, companyIdParameter, employeeSignIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSignSelectAll_Result> usp_EmployeeSignSelectAll(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSignSelectAll_Result>("usp_EmployeeSignSelectAll", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CalculateReviewerScore(Nullable<int> reviewReviewerId, Nullable<int> companyId, Nullable<int> reviewReviewerEmployeeId)
        {
            var reviewReviewerIdParameter = reviewReviewerId.HasValue ?
                new ObjectParameter("ReviewReviewerId", reviewReviewerId) :
                new ObjectParameter("ReviewReviewerId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CalculateReviewerScore", reviewReviewerIdParameter, companyIdParameter, reviewReviewerEmployeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_CalculateReviewScorebyReviewerScore(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> reviewReviewerEmployeeId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_CalculateReviewScorebyReviewerScore", reviewIdParameter, companyIdParameter, reviewReviewerEmployeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_CalculateReviewScoreByWeightedAvg(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> reviewReviewerEmployeeId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_CalculateReviewScoreByWeightedAvg", reviewIdParameter, companyIdParameter, reviewReviewerEmployeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_CheckWeightedAverageForReview(Nullable<int> reviewId, Nullable<int> companyId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_CheckWeightedAverageForReview", reviewIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_GetCheckHRManager(Nullable<int> userId, Nullable<int> reviewId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_GetCheckHRManager", userIdParameter, reviewIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewCriteriaQuestions_Result> usp_GetReviewCriteriaQuestions(Nullable<int> companyId, Nullable<int> reviewReviewerId, Nullable<int> reviewReviewerEmployeeId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewReviewerIdParameter = reviewReviewerId.HasValue ?
                new ObjectParameter("ReviewReviewerId", reviewReviewerId) :
                new ObjectParameter("ReviewReviewerId", typeof(int));
    
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewCriteriaQuestions_Result>("usp_GetReviewCriteriaQuestions", companyIdParameter, reviewReviewerIdParameter, reviewReviewerEmployeeIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewReviewerScoreDetails_Result> usp_GetReviewReviewerScoreDetails(Nullable<int> reviewReviewerEmployeeId, Nullable<int> companyId)
        {
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewReviewerScoreDetails_Result>("usp_GetReviewReviewerScoreDetails", reviewReviewerEmployeeIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetScoreContent_Result> usp_GetScoreContent(Nullable<int> scoreId)
        {
            var scoreIdParameter = scoreId.HasValue ?
                new ObjectParameter("ScoreId", scoreId) :
                new ObjectParameter("ScoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetScoreContent_Result>("usp_GetScoreContent", scoreIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_InsertReviewReviewerScoreDetails(Nullable<int> companyId, Nullable<int> reviewReviewerEmployeeId, Nullable<int> reviewCriteriaId, string answers, Nullable<int> reviewReviewerId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            var answersParameter = answers != null ?
                new ObjectParameter("Answers", answers) :
                new ObjectParameter("Answers", typeof(string));
    
            var reviewReviewerIdParameter = reviewReviewerId.HasValue ?
                new ObjectParameter("ReviewReviewerId", reviewReviewerId) :
                new ObjectParameter("ReviewReviewerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_InsertReviewReviewerScoreDetails", companyIdParameter, reviewReviewerEmployeeIdParameter, reviewCriteriaIdParameter, answersParameter, reviewReviewerIdParameter);
        }
    
        public virtual int usp_UpdateHRCommentsAndStatus(string hRComments, Nullable<int> hRStatus, Nullable<int> userId, Nullable<System.DateTime> reviewDate)
        {
            var hRCommentsParameter = hRComments != null ?
                new ObjectParameter("HRComments", hRComments) :
                new ObjectParameter("HRComments", typeof(string));
    
            var hRStatusParameter = hRStatus.HasValue ?
                new ObjectParameter("HRStatus", hRStatus) :
                new ObjectParameter("HRStatus", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reviewDateParameter = reviewDate.HasValue ?
                new ObjectParameter("ReviewDate", reviewDate) :
                new ObjectParameter("ReviewDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateHRCommentsAndStatus", hRCommentsParameter, hRStatusParameter, userIdParameter, reviewDateParameter);
        }
    
        public virtual int usp_UpdateReviewReviewerEmployee(Nullable<int> reviewReviewerEmployeeId, string reviewerComments, Nullable<decimal> reviewerScore, Nullable<int> reviewerStatus, Nullable<decimal> reviewScore)
        {
            var reviewReviewerEmployeeIdParameter = reviewReviewerEmployeeId.HasValue ?
                new ObjectParameter("ReviewReviewerEmployeeId", reviewReviewerEmployeeId) :
                new ObjectParameter("ReviewReviewerEmployeeId", typeof(int));
    
            var reviewerCommentsParameter = reviewerComments != null ?
                new ObjectParameter("ReviewerComments", reviewerComments) :
                new ObjectParameter("ReviewerComments", typeof(string));
    
            var reviewerScoreParameter = reviewerScore.HasValue ?
                new ObjectParameter("ReviewerScore", reviewerScore) :
                new ObjectParameter("ReviewerScore", typeof(decimal));
    
            var reviewerStatusParameter = reviewerStatus.HasValue ?
                new ObjectParameter("ReviewerStatus", reviewerStatus) :
                new ObjectParameter("ReviewerStatus", typeof(int));
    
            var reviewScoreParameter = reviewScore.HasValue ?
                new ObjectParameter("ReviewScore", reviewScore) :
                new ObjectParameter("ReviewScore", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewReviewerEmployee", reviewReviewerEmployeeIdParameter, reviewerCommentsParameter, reviewerScoreParameter, reviewerStatusParameter, reviewScoreParameter);
        }
    
        public virtual int usp_UpdateReviewReviewerScoreDetails(string answers, Nullable<int> id)
        {
            var answersParameter = answers != null ?
                new ObjectParameter("Answers", answers) :
                new ObjectParameter("Answers", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewReviewerScoreDetails", answersParameter, idParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewFormDetailsForHR_Result> usp_GetReviewFormDetailsForHR(Nullable<int> companyId, Nullable<int> reviewId, Nullable<int> userId, Nullable<System.DateTime> reviewDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reviewDateParameter = reviewDate.HasValue ?
                new ObjectParameter("ReviewDate", reviewDate) :
                new ObjectParameter("ReviewDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewFormDetailsForHR_Result>("usp_GetReviewFormDetailsForHR", companyIdParameter, reviewIdParameter, userIdParameter, reviewDateParameter);
        }
    
        public virtual ObjectResult<usp_CalculateReviewScore_Result> usp_CalculateReviewScore(Nullable<int> reviewId, Nullable<int> companyId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CalculateReviewScore_Result>("usp_CalculateReviewScore", reviewIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllReviewCriteria_Result> usp_GetAllReviewCriteria(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllReviewCriteria_Result>("usp_GetAllReviewCriteria", companyIdParameter);
        }
    
        public virtual int usp_InsertReviewReviewer(Nullable<int> companyId, Nullable<int> reviewId, Nullable<int> reviewerMasterId, Nullable<int> createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewReviewer", companyIdParameter, reviewIdParameter, reviewerMasterIdParameter, createdByParameter);
        }
    
        public virtual int usp_InsertReviewCriteria(Nullable<int> companyId, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> criteriaTypeId, string dutiesId, Nullable<int> categoryId, Nullable<int> responseTypeId, Nullable<int> scoreId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var criteriaTypeIdParameter = criteriaTypeId.HasValue ?
                new ObjectParameter("CriteriaTypeId", criteriaTypeId) :
                new ObjectParameter("CriteriaTypeId", typeof(int));
    
            var dutiesIdParameter = dutiesId != null ?
                new ObjectParameter("DutiesId", dutiesId) :
                new ObjectParameter("DutiesId", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var responseTypeIdParameter = responseTypeId.HasValue ?
                new ObjectParameter("ResponseTypeId", responseTypeId) :
                new ObjectParameter("ResponseTypeId", typeof(int));
    
            var scoreIdParameter = scoreId.HasValue ?
                new ObjectParameter("ScoreId", scoreId) :
                new ObjectParameter("ScoreId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReviewCriteria", companyIdParameter, jobProfileIdParameter, positionIdParameter, criteriaTypeIdParameter, dutiesIdParameter, categoryIdParameter, responseTypeIdParameter, scoreIdParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_UpdateReviewForHR(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> hRManagerId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var hRManagerIdParameter = hRManagerId.HasValue ?
                new ObjectParameter("HRManagerId", hRManagerId) :
                new ObjectParameter("HRManagerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateReviewForHR", reviewIdParameter, companyIdParameter, hRManagerIdParameter);
        }
    
        public virtual int usp_AlertTemplateUpdate(Nullable<int> alertTemplateId, Nullable<int> companyId, string alertTemplateName, string alertTemplateSubject, string alertTemplateBody, Nullable<int> attachmentId, Nullable<bool> isAcknowledgementRequired, string acknowledgementDescription, string fromAddress, Nullable<int> alertSendCriteriaId, Nullable<bool> status, Nullable<int> sendTo, Nullable<int> scheduleValue, Nullable<int> criteriaValue, Nullable<int> criteriaDuration, Nullable<int> criteriaTiming, Nullable<int> criteriaCondition, Nullable<System.DateTime> customDate, Nullable<int> countToSend, Nullable<int> sendVia, Nullable<int> modifiedBy, ObjectParameter errorcode)
        {
            var alertTemplateIdParameter = alertTemplateId.HasValue ?
                new ObjectParameter("AlertTemplateId", alertTemplateId) :
                new ObjectParameter("AlertTemplateId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var alertTemplateNameParameter = alertTemplateName != null ?
                new ObjectParameter("AlertTemplateName", alertTemplateName) :
                new ObjectParameter("AlertTemplateName", typeof(string));
    
            var alertTemplateSubjectParameter = alertTemplateSubject != null ?
                new ObjectParameter("AlertTemplateSubject", alertTemplateSubject) :
                new ObjectParameter("AlertTemplateSubject", typeof(string));
    
            var alertTemplateBodyParameter = alertTemplateBody != null ?
                new ObjectParameter("AlertTemplateBody", alertTemplateBody) :
                new ObjectParameter("AlertTemplateBody", typeof(string));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var isAcknowledgementRequiredParameter = isAcknowledgementRequired.HasValue ?
                new ObjectParameter("IsAcknowledgementRequired", isAcknowledgementRequired) :
                new ObjectParameter("IsAcknowledgementRequired", typeof(bool));
    
            var acknowledgementDescriptionParameter = acknowledgementDescription != null ?
                new ObjectParameter("AcknowledgementDescription", acknowledgementDescription) :
                new ObjectParameter("AcknowledgementDescription", typeof(string));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var alertSendCriteriaIdParameter = alertSendCriteriaId.HasValue ?
                new ObjectParameter("AlertSendCriteriaId", alertSendCriteriaId) :
                new ObjectParameter("AlertSendCriteriaId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var sendToParameter = sendTo.HasValue ?
                new ObjectParameter("SendTo", sendTo) :
                new ObjectParameter("SendTo", typeof(int));
    
            var scheduleValueParameter = scheduleValue.HasValue ?
                new ObjectParameter("ScheduleValue", scheduleValue) :
                new ObjectParameter("ScheduleValue", typeof(int));
    
            var criteriaValueParameter = criteriaValue.HasValue ?
                new ObjectParameter("CriteriaValue", criteriaValue) :
                new ObjectParameter("CriteriaValue", typeof(int));
    
            var criteriaDurationParameter = criteriaDuration.HasValue ?
                new ObjectParameter("CriteriaDuration", criteriaDuration) :
                new ObjectParameter("CriteriaDuration", typeof(int));
    
            var criteriaTimingParameter = criteriaTiming.HasValue ?
                new ObjectParameter("CriteriaTiming", criteriaTiming) :
                new ObjectParameter("CriteriaTiming", typeof(int));
    
            var criteriaConditionParameter = criteriaCondition.HasValue ?
                new ObjectParameter("CriteriaCondition", criteriaCondition) :
                new ObjectParameter("CriteriaCondition", typeof(int));
    
            var customDateParameter = customDate.HasValue ?
                new ObjectParameter("CustomDate", customDate) :
                new ObjectParameter("CustomDate", typeof(System.DateTime));
    
            var countToSendParameter = countToSend.HasValue ?
                new ObjectParameter("CountToSend", countToSend) :
                new ObjectParameter("CountToSend", typeof(int));
    
            var sendViaParameter = sendVia.HasValue ?
                new ObjectParameter("SendVia", sendVia) :
                new ObjectParameter("SendVia", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AlertTemplateUpdate", alertTemplateIdParameter, companyIdParameter, alertTemplateNameParameter, alertTemplateSubjectParameter, alertTemplateBodyParameter, attachmentIdParameter, isAcknowledgementRequiredParameter, acknowledgementDescriptionParameter, fromAddressParameter, alertSendCriteriaIdParameter, statusParameter, sendToParameter, scheduleValueParameter, criteriaValueParameter, criteriaDurationParameter, criteriaTimingParameter, criteriaConditionParameter, customDateParameter, countToSendParameter, sendViaParameter, modifiedByParameter, errorcode);
        }
    
        public virtual ObjectResult<usp_GetOtherSelectedEmployee_Result> usp_GetOtherSelectedEmployee(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> reviewerMasterId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOtherSelectedEmployee_Result>("usp_GetOtherSelectedEmployee", reviewIdParameter, companyIdParameter, reviewerMasterIdParameter);
        }
    
        public virtual ObjectResult<usp_AlertTemplateSelect_Result> usp_AlertTemplateSelect(Nullable<int> alertTemplateId, Nullable<int> companyId)
        {
            var alertTemplateIdParameter = alertTemplateId.HasValue ?
                new ObjectParameter("AlertTemplateId", alertTemplateId) :
                new ObjectParameter("AlertTemplateId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AlertTemplateSelect_Result>("usp_AlertTemplateSelect", alertTemplateIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_AlertTemplateSelectAll_Result> usp_AlertTemplateSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AlertTemplateSelectAll_Result>("usp_AlertTemplateSelectAll", companyIdParameter);
        }
    
        public virtual int usp_AlertTemplateInsert(Nullable<int> companyId, string alertTemplateName, string alertTemplateSubject, string alertTemplateBody, Nullable<int> attachmentId, Nullable<bool> isAcknowledgementRequired, string acknowledgementDescription, string fromAddress, Nullable<int> alertSendCriteriaId, Nullable<bool> status, Nullable<int> sendTo, Nullable<int> scheduleValue, Nullable<int> criteriaValue, Nullable<int> criteriaDuration, Nullable<int> criteriaTiming, Nullable<int> criteriaCondition, Nullable<System.DateTime> customDate, Nullable<int> countToSend, Nullable<int> sendVia, Nullable<int> createdBy, ObjectParameter alertTemplateId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var alertTemplateNameParameter = alertTemplateName != null ?
                new ObjectParameter("AlertTemplateName", alertTemplateName) :
                new ObjectParameter("AlertTemplateName", typeof(string));
    
            var alertTemplateSubjectParameter = alertTemplateSubject != null ?
                new ObjectParameter("AlertTemplateSubject", alertTemplateSubject) :
                new ObjectParameter("AlertTemplateSubject", typeof(string));
    
            var alertTemplateBodyParameter = alertTemplateBody != null ?
                new ObjectParameter("AlertTemplateBody", alertTemplateBody) :
                new ObjectParameter("AlertTemplateBody", typeof(string));
    
            var attachmentIdParameter = attachmentId.HasValue ?
                new ObjectParameter("AttachmentId", attachmentId) :
                new ObjectParameter("AttachmentId", typeof(int));
    
            var isAcknowledgementRequiredParameter = isAcknowledgementRequired.HasValue ?
                new ObjectParameter("IsAcknowledgementRequired", isAcknowledgementRequired) :
                new ObjectParameter("IsAcknowledgementRequired", typeof(bool));
    
            var acknowledgementDescriptionParameter = acknowledgementDescription != null ?
                new ObjectParameter("AcknowledgementDescription", acknowledgementDescription) :
                new ObjectParameter("AcknowledgementDescription", typeof(string));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var alertSendCriteriaIdParameter = alertSendCriteriaId.HasValue ?
                new ObjectParameter("AlertSendCriteriaId", alertSendCriteriaId) :
                new ObjectParameter("AlertSendCriteriaId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var sendToParameter = sendTo.HasValue ?
                new ObjectParameter("SendTo", sendTo) :
                new ObjectParameter("SendTo", typeof(int));
    
            var scheduleValueParameter = scheduleValue.HasValue ?
                new ObjectParameter("ScheduleValue", scheduleValue) :
                new ObjectParameter("ScheduleValue", typeof(int));
    
            var criteriaValueParameter = criteriaValue.HasValue ?
                new ObjectParameter("CriteriaValue", criteriaValue) :
                new ObjectParameter("CriteriaValue", typeof(int));
    
            var criteriaDurationParameter = criteriaDuration.HasValue ?
                new ObjectParameter("CriteriaDuration", criteriaDuration) :
                new ObjectParameter("CriteriaDuration", typeof(int));
    
            var criteriaTimingParameter = criteriaTiming.HasValue ?
                new ObjectParameter("CriteriaTiming", criteriaTiming) :
                new ObjectParameter("CriteriaTiming", typeof(int));
    
            var criteriaConditionParameter = criteriaCondition.HasValue ?
                new ObjectParameter("CriteriaCondition", criteriaCondition) :
                new ObjectParameter("CriteriaCondition", typeof(int));
    
            var customDateParameter = customDate.HasValue ?
                new ObjectParameter("CustomDate", customDate) :
                new ObjectParameter("CustomDate", typeof(System.DateTime));
    
            var countToSendParameter = countToSend.HasValue ?
                new ObjectParameter("CountToSend", countToSend) :
                new ObjectParameter("CountToSend", typeof(int));
    
            var sendViaParameter = sendVia.HasValue ?
                new ObjectParameter("SendVia", sendVia) :
                new ObjectParameter("SendVia", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AlertTemplateInsert", companyIdParameter, alertTemplateNameParameter, alertTemplateSubjectParameter, alertTemplateBodyParameter, attachmentIdParameter, isAcknowledgementRequiredParameter, acknowledgementDescriptionParameter, fromAddressParameter, alertSendCriteriaIdParameter, statusParameter, sendToParameter, scheduleValueParameter, criteriaValueParameter, criteriaDurationParameter, criteriaTimingParameter, criteriaConditionParameter, customDateParameter, countToSendParameter, sendViaParameter, createdByParameter, alertTemplateId);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetHRManagerForReview(Nullable<int> reviewId, Nullable<int> companyId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetHRManagerForReview", reviewIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetReviewReviewerId(Nullable<int> companyId, Nullable<int> reviewId, Nullable<int> reviewerMasterId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetReviewReviewerId", companyIdParameter, reviewIdParameter, reviewerMasterIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetReviewReviewerIdByReviewId(Nullable<int> companyId, Nullable<int> reviewId, Nullable<int> reviewerMasterId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetReviewReviewerIdByReviewId", companyIdParameter, reviewIdParameter, reviewerMasterIdParameter);
        }
    
        [DbFunction("HRMSEntities1", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[HRMSEntities1].[fn_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<usp_GetAllReviewCriteriaById_Result> usp_GetAllReviewCriteriaById(Nullable<int> companyId, string criteriaIds)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var criteriaIdsParameter = criteriaIds != null ?
                new ObjectParameter("CriteriaIds", criteriaIds) :
                new ObjectParameter("CriteriaIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllReviewCriteriaById_Result>("usp_GetAllReviewCriteriaById", companyIdParameter, criteriaIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewReviewerDetails_Result> usp_GetReviewReviewerDetails(Nullable<int> reviewId, Nullable<int> companyId, Nullable<int> reviewerMasterId)
        {
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewerMasterIdParameter = reviewerMasterId.HasValue ?
                new ObjectParameter("ReviewerMasterId", reviewerMasterId) :
                new ObjectParameter("ReviewerMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewReviewerDetails_Result>("usp_GetReviewReviewerDetails", reviewIdParameter, companyIdParameter, reviewerMasterIdParameter);
        }
    
        public virtual int usp_CreateEmployeeConfigurationSetup(Nullable<int> companyId, string firstName, string lastName, string email, string password, string userName, Nullable<bool> isApproved, Nullable<bool> isLockedOut, string passwordQuestion, string passwordAnswer, Nullable<int> jobProfileId, Nullable<int> createdBy, Nullable<System.DateTime> hireDate, Nullable<int> onBoardingId, string roleName, Nullable<int> employmentStatusId, Nullable<int> managerId, Nullable<decimal> compensation, Nullable<int> compensationFrequency, string employeeNo, ObjectParameter errorCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var employmentStatusIdParameter = employmentStatusId.HasValue ?
                new ObjectParameter("EmploymentStatusId", employmentStatusId) :
                new ObjectParameter("EmploymentStatusId", typeof(int));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var compensationParameter = compensation.HasValue ?
                new ObjectParameter("Compensation", compensation) :
                new ObjectParameter("Compensation", typeof(decimal));
    
            var compensationFrequencyParameter = compensationFrequency.HasValue ?
                new ObjectParameter("CompensationFrequency", compensationFrequency) :
                new ObjectParameter("CompensationFrequency", typeof(int));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateEmployeeConfigurationSetup", companyIdParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, userNameParameter, isApprovedParameter, isLockedOutParameter, passwordQuestionParameter, passwordAnswerParameter, jobProfileIdParameter, createdByParameter, hireDateParameter, onBoardingIdParameter, roleNameParameter, employmentStatusIdParameter, managerIdParameter, compensationParameter, compensationFrequencyParameter, employeeNoParameter, errorCode);
        }
    
        public virtual int usp_DeleteReviewReviewerCriteria(Nullable<int> reviewReviewerId, Nullable<int> reviewCriteriaId)
        {
            var reviewReviewerIdParameter = reviewReviewerId.HasValue ?
                new ObjectParameter("ReviewReviewerId", reviewReviewerId) :
                new ObjectParameter("ReviewReviewerId", typeof(int));
    
            var reviewCriteriaIdParameter = reviewCriteriaId.HasValue ?
                new ObjectParameter("ReviewCriteriaId", reviewCriteriaId) :
                new ObjectParameter("ReviewCriteriaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteReviewReviewerCriteria", reviewReviewerIdParameter, reviewCriteriaIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReviewFormDetails_Result> usp_GetReviewFormDetails(Nullable<int> companyId, Nullable<int> reviewId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var reviewIdParameter = reviewId.HasValue ?
                new ObjectParameter("ReviewId", reviewId) :
                new ObjectParameter("ReviewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReviewFormDetails_Result>("usp_GetReviewFormDetails", companyIdParameter, reviewIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeAlertSelect_Result> usp_EmployeeAlertSelect(Nullable<bool> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeAlertSelect_Result>("usp_EmployeeAlertSelect", statusParameter);
        }
    
        public virtual int usp_SetUsername(Nullable<int> userId, string newUsername)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newUsernameParameter = newUsername != null ?
                new ObjectParameter("NewUsername", newUsername) :
                new ObjectParameter("NewUsername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetUsername", userIdParameter, newUsernameParameter);
        }
    
        public virtual int usp_CreateEmployeeNoConfiguration(ObjectParameter employeeNoId, Nullable<int> companyId, string prefix, Nullable<int> startValue, Nullable<int> incrementValue, Nullable<int> createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var startValueParameter = startValue.HasValue ?
                new ObjectParameter("StartValue", startValue) :
                new ObjectParameter("StartValue", typeof(int));
    
            var incrementValueParameter = incrementValue.HasValue ?
                new ObjectParameter("IncrementValue", incrementValue) :
                new ObjectParameter("IncrementValue", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateEmployeeNoConfiguration", employeeNoId, companyIdParameter, prefixParameter, startValueParameter, incrementValueParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeNoConfigurationbyCompanyId_Result> usp_SelectEmployeeNoConfigurationbyCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeNoConfigurationbyCompanyId_Result>("usp_SelectEmployeeNoConfigurationbyCompanyId", companyIdParameter);
        }
    
        public virtual int usp_UpdateEmployeeNoConfiguration(Nullable<int> employeeNoId, string prefix, Nullable<int> startValue, Nullable<int> incrementValue, Nullable<int> modifiedBy)
        {
            var employeeNoIdParameter = employeeNoId.HasValue ?
                new ObjectParameter("EmployeeNoId", employeeNoId) :
                new ObjectParameter("EmployeeNoId", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var startValueParameter = startValue.HasValue ?
                new ObjectParameter("StartValue", startValue) :
                new ObjectParameter("StartValue", typeof(int));
    
            var incrementValueParameter = incrementValue.HasValue ?
                new ObjectParameter("IncrementValue", incrementValue) :
                new ObjectParameter("IncrementValue", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmployeeNoConfiguration", employeeNoIdParameter, prefixParameter, startValueParameter, incrementValueParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_GetTrainingClassScheduleDates_Result> usp_GetTrainingClassScheduleDates(Nullable<int> trainingClassScheduleId)
        {
            var trainingClassScheduleIdParameter = trainingClassScheduleId.HasValue ?
                new ObjectParameter("TrainingClassScheduleId", trainingClassScheduleId) :
                new ObjectParameter("TrainingClassScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassScheduleDates_Result>("usp_GetTrainingClassScheduleDates", trainingClassScheduleIdParameter);
        }
    
        public virtual ObjectResult<string> usp_DeleteTrainingClassSchedules(string ids)
        {
            var idsParameter = ids != null ?
                new ObjectParameter("Ids", ids) :
                new ObjectParameter("Ids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DeleteTrainingClassSchedules", idsParameter);
        }
    
        public virtual int usp_TrainingClassInsert(string trainingClassName, string trainingClassDescription, Nullable<decimal> trainingClassCost, Nullable<decimal> trainingClassHours, Nullable<int> trainingClassImage, Nullable<int> companyId, Nullable<int> createdBy)
        {
            var trainingClassNameParameter = trainingClassName != null ?
                new ObjectParameter("TrainingClassName", trainingClassName) :
                new ObjectParameter("TrainingClassName", typeof(string));
    
            var trainingClassDescriptionParameter = trainingClassDescription != null ?
                new ObjectParameter("TrainingClassDescription", trainingClassDescription) :
                new ObjectParameter("TrainingClassDescription", typeof(string));
    
            var trainingClassCostParameter = trainingClassCost.HasValue ?
                new ObjectParameter("TrainingClassCost", trainingClassCost) :
                new ObjectParameter("TrainingClassCost", typeof(decimal));
    
            var trainingClassHoursParameter = trainingClassHours.HasValue ?
                new ObjectParameter("TrainingClassHours", trainingClassHours) :
                new ObjectParameter("TrainingClassHours", typeof(decimal));
    
            var trainingClassImageParameter = trainingClassImage.HasValue ?
                new ObjectParameter("TrainingClassImage", trainingClassImage) :
                new ObjectParameter("TrainingClassImage", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingClassInsert", trainingClassNameParameter, trainingClassDescriptionParameter, trainingClassCostParameter, trainingClassHoursParameter, trainingClassImageParameter, companyIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> usp_UpdateTrainingScheduleDates(Nullable<int> trainingScheduleDateId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string location, Nullable<int> maximumClassSize)
        {
            var trainingScheduleDateIdParameter = trainingScheduleDateId.HasValue ?
                new ObjectParameter("TrainingScheduleDateId", trainingScheduleDateId) :
                new ObjectParameter("TrainingScheduleDateId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var maximumClassSizeParameter = maximumClassSize.HasValue ?
                new ObjectParameter("MaximumClassSize", maximumClassSize) :
                new ObjectParameter("MaximumClassSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_UpdateTrainingScheduleDates", trainingScheduleDateIdParameter, startDateParameter, endDateParameter, userIdParameter, locationParameter, maximumClassSizeParameter);
        }
    
        public virtual ObjectResult<usp_TrainingClassSelectAll_Result> usp_TrainingClassSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingClassSelectAll_Result>("usp_TrainingClassSelectAll", companyIdParameter);
        }
    
        public virtual int usp_InsertAndUpdateTrainingClassSchedules(Nullable<int> trainingClassScheduleId, Nullable<int> trainingClassId, Nullable<System.DateTime> enrollmentStartDate, Nullable<System.DateTime> enrollmentEndDate, Nullable<int> companyId, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var trainingClassScheduleIdParameter = trainingClassScheduleId.HasValue ?
                new ObjectParameter("TrainingClassScheduleId", trainingClassScheduleId) :
                new ObjectParameter("TrainingClassScheduleId", typeof(int));
    
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            var enrollmentStartDateParameter = enrollmentStartDate.HasValue ?
                new ObjectParameter("EnrollmentStartDate", enrollmentStartDate) :
                new ObjectParameter("EnrollmentStartDate", typeof(System.DateTime));
    
            var enrollmentEndDateParameter = enrollmentEndDate.HasValue ?
                new ObjectParameter("EnrollmentEndDate", enrollmentEndDate) :
                new ObjectParameter("EnrollmentEndDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAndUpdateTrainingClassSchedules", trainingClassScheduleIdParameter, trainingClassIdParameter, enrollmentStartDateParameter, enrollmentEndDateParameter, companyIdParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_TrainingClassSelectById_Result> usp_TrainingClassSelectById(Nullable<int> companyId, Nullable<int> trainingClassId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingClassSelectById_Result>("usp_TrainingClassSelectById", companyIdParameter, trainingClassIdParameter);
        }
    
        public virtual int usp_TrainingClassUpdate(Nullable<int> trainingClassId, string trainingClassName, string trainingClassDescription, Nullable<decimal> trainingClassCost, Nullable<decimal> trainingClassHours, Nullable<int> trainingClassImage, Nullable<int> companyId, Nullable<int> modifiedBy)
        {
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            var trainingClassNameParameter = trainingClassName != null ?
                new ObjectParameter("TrainingClassName", trainingClassName) :
                new ObjectParameter("TrainingClassName", typeof(string));
    
            var trainingClassDescriptionParameter = trainingClassDescription != null ?
                new ObjectParameter("TrainingClassDescription", trainingClassDescription) :
                new ObjectParameter("TrainingClassDescription", typeof(string));
    
            var trainingClassCostParameter = trainingClassCost.HasValue ?
                new ObjectParameter("TrainingClassCost", trainingClassCost) :
                new ObjectParameter("TrainingClassCost", typeof(decimal));
    
            var trainingClassHoursParameter = trainingClassHours.HasValue ?
                new ObjectParameter("TrainingClassHours", trainingClassHours) :
                new ObjectParameter("TrainingClassHours", typeof(decimal));
    
            var trainingClassImageParameter = trainingClassImage.HasValue ?
                new ObjectParameter("TrainingClassImage", trainingClassImage) :
                new ObjectParameter("TrainingClassImage", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingClassUpdate", trainingClassIdParameter, trainingClassNameParameter, trainingClassDescriptionParameter, trainingClassCostParameter, trainingClassHoursParameter, trainingClassImageParameter, companyIdParameter, modifiedByParameter);
        }
    
        public virtual int usp_TrainingClassDelete(Nullable<int> trainingClassId, Nullable<int> companyId)
        {
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingClassDelete", trainingClassIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TrainingTrackSelect_Result> usp_TrainingTrackSelect(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingTrackSelect_Result>("usp_TrainingTrackSelect", companyIdParameter);
        }
    
        public virtual ObjectResult<string> usp_GenerateNewEmployeeNoByCompany(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GenerateNewEmployeeNoByCompany", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_TrainingTrackSelectById_Result> usp_TrainingTrackSelectById(Nullable<int> companyId, Nullable<int> trainingTrackId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trainingTrackIdParameter = trainingTrackId.HasValue ?
                new ObjectParameter("TrainingTrackId", trainingTrackId) :
                new ObjectParameter("TrainingTrackId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingTrackSelectById_Result>("usp_TrainingTrackSelectById", companyIdParameter, trainingTrackIdParameter);
        }
    
        public virtual int usp_TrainingTrackInsert(string trainingTrackName, string trainingTrackDescription, Nullable<int> companyId, Nullable<int> createdBy, Nullable<int> trainingTrackId)
        {
            var trainingTrackNameParameter = trainingTrackName != null ?
                new ObjectParameter("TrainingTrackName", trainingTrackName) :
                new ObjectParameter("TrainingTrackName", typeof(string));
    
            var trainingTrackDescriptionParameter = trainingTrackDescription != null ?
                new ObjectParameter("TrainingTrackDescription", trainingTrackDescription) :
                new ObjectParameter("TrainingTrackDescription", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var trainingTrackIdParameter = trainingTrackId.HasValue ?
                new ObjectParameter("TrainingTrackId", trainingTrackId) :
                new ObjectParameter("TrainingTrackId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTrackInsert", trainingTrackNameParameter, trainingTrackDescriptionParameter, companyIdParameter, createdByParameter, trainingTrackIdParameter);
        }
    
        public virtual int usp_InsertTrainingClassScheduleContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTrainingClassScheduleContentBulk");
        }
    
        public virtual int usp_TrainingClassScheduleDelete(Nullable<int> companyId, Nullable<int> trainingClassScheduleId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trainingClassScheduleIdParameter = trainingClassScheduleId.HasValue ?
                new ObjectParameter("TrainingClassScheduleId", trainingClassScheduleId) :
                new ObjectParameter("TrainingClassScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingClassScheduleDelete", companyIdParameter, trainingClassScheduleIdParameter);
        }
    
        public virtual int usp_TrainingTrackUpdate(string trainingTrackName, string trainingTrackDescription, Nullable<int> companyId, Nullable<int> modifiedBy, Nullable<int> trainingTrackId)
        {
            var trainingTrackNameParameter = trainingTrackName != null ?
                new ObjectParameter("TrainingTrackName", trainingTrackName) :
                new ObjectParameter("TrainingTrackName", typeof(string));
    
            var trainingTrackDescriptionParameter = trainingTrackDescription != null ?
                new ObjectParameter("TrainingTrackDescription", trainingTrackDescription) :
                new ObjectParameter("TrainingTrackDescription", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var trainingTrackIdParameter = trainingTrackId.HasValue ?
                new ObjectParameter("TrainingTrackId", trainingTrackId) :
                new ObjectParameter("TrainingTrackId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTrackUpdate", trainingTrackNameParameter, trainingTrackDescriptionParameter, companyIdParameter, modifiedByParameter, trainingTrackIdParameter);
        }
    
        public virtual ObjectResult<usp_TrainingTrackClassSelectAll_Result> usp_TrainingTrackClassSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingTrackClassSelectAll_Result>("usp_TrainingTrackClassSelectAll");
        }
    
        public virtual ObjectResult<usp_TrainingTrackClassSelectById_Result> usp_TrainingTrackClassSelectById(Nullable<int> trainingTrackClassId)
        {
            var trainingTrackClassIdParameter = trainingTrackClassId.HasValue ?
                new ObjectParameter("TrainingTrackClassId", trainingTrackClassId) :
                new ObjectParameter("TrainingTrackClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingTrackClassSelectById_Result>("usp_TrainingTrackClassSelectById", trainingTrackClassIdParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeeFilterCriteria_Result> usp_GetEmployeeFilterCriteria(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeeFilterCriteria_Result>("usp_GetEmployeeFilterCriteria", companyIdParameter);
        }
    
        public virtual int usp_InserAndUpdateTrainingClassResource(string createOrModifyUserId)
        {
            var createOrModifyUserIdParameter = createOrModifyUserId != null ?
                new ObjectParameter("CreateOrModifyUserId", createOrModifyUserId) :
                new ObjectParameter("CreateOrModifyUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InserAndUpdateTrainingClassResource", createOrModifyUserIdParameter);
        }
    
        public virtual int usp_InsertTrainingClassResourcesContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTrainingClassResourcesContentBulk");
        }
    
        public virtual int usp_UpdateTrainingClassResourcesContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateTrainingClassResourcesContentBulk");
        }
    
        public virtual ObjectResult<usp_GetTrainingClassResources_Result> usp_GetTrainingClassResources(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassResources_Result>("usp_GetTrainingClassResources", companyIdParameter);
        }
    
        public virtual int usp_TrainingTrackDelete(Nullable<int> companyId, Nullable<int> trainingTrackId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trainingTrackIdParameter = trainingTrackId.HasValue ?
                new ObjectParameter("TrainingTrackId", trainingTrackId) :
                new ObjectParameter("TrainingTrackId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingTrackDelete", companyIdParameter, trainingTrackIdParameter);
        }
    
        public virtual int usp_CompetencyUpdate(Nullable<int> companyId, Nullable<int> competencyId, string competencySetName, string category, string points, Nullable<int> modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var competencyIdParameter = competencyId.HasValue ?
                new ObjectParameter("CompetencyId", competencyId) :
                new ObjectParameter("CompetencyId", typeof(int));
    
            var competencySetNameParameter = competencySetName != null ?
                new ObjectParameter("CompetencySetName", competencySetName) :
                new ObjectParameter("CompetencySetName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var pointsParameter = points != null ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompetencyUpdate", companyIdParameter, competencyIdParameter, competencySetNameParameter, categoryParameter, pointsParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_GetTrainingClassSchedules_Result> usp_GetTrainingClassSchedules(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassSchedules_Result>("usp_GetTrainingClassSchedules", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTrainingClassSchedulesById_Result> usp_GetTrainingClassSchedulesById(Nullable<int> trainingClassScheduleId, Nullable<int> companyId)
        {
            var trainingClassScheduleIdParameter = trainingClassScheduleId.HasValue ?
                new ObjectParameter("TrainingClassScheduleId", trainingClassScheduleId) :
                new ObjectParameter("TrainingClassScheduleId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassSchedulesById_Result>("usp_GetTrainingClassSchedulesById", trainingClassScheduleIdParameter, companyIdParameter);
        }
    
        public virtual int usp_UpdateCompetencyContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCompetencyContentBulk");
        }
    
        public virtual ObjectResult<usp_GetTrainingClassSchedulesByClassId_Result> usp_GetTrainingClassSchedulesByClassId(Nullable<int> trainingClassId, Nullable<int> companyId)
        {
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassSchedulesByClassId_Result>("usp_GetTrainingClassSchedulesByClassId", trainingClassIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetCompetencyById_Result> usp_GetCompetencyById(Nullable<int> companyId, Nullable<int> competencyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var competencyIdParameter = competencyId.HasValue ?
                new ObjectParameter("CompetencyId", competencyId) :
                new ObjectParameter("CompetencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompetencyById_Result>("usp_GetCompetencyById", companyIdParameter, competencyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTrainingClassResourcesByClassId_Result> usp_GetTrainingClassResourcesByClassId(Nullable<int> trainingClassId, Nullable<int> companyId)
        {
            var trainingClassIdParameter = trainingClassId.HasValue ?
                new ObjectParameter("TrainingClassId", trainingClassId) :
                new ObjectParameter("TrainingClassId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrainingClassResourcesByClassId_Result>("usp_GetTrainingClassResourcesByClassId", trainingClassIdParameter, companyIdParameter);
        }
    
        public virtual int usp_LookUpDataDelete(string tableName, Nullable<int> primaryID, Nullable<int> companyId)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var primaryIDParameter = primaryID.HasValue ?
                new ObjectParameter("PrimaryID", primaryID) :
                new ObjectParameter("PrimaryID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LookUpDataDelete", tableNameParameter, primaryIDParameter, companyIdParameter);
        }
    
        public virtual int usp_JobDutiesDelete(Nullable<int> jobDutyID, Nullable<int> companyId)
        {
            var jobDutyIDParameter = jobDutyID.HasValue ?
                new ObjectParameter("JobDutyID", jobDutyID) :
                new ObjectParameter("JobDutyID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobDutiesDelete", jobDutyIDParameter, companyIdParameter);
        }
    
        public virtual int usp_JobDutiesInsert(Nullable<int> jobDutyId, Nullable<int> companyId, string description, string category, Nullable<int> priority, Nullable<decimal> percentageOfTime, Nullable<int> frequency, Nullable<int> essential, Nullable<int> other, Nullable<int> createdBy)
        {
            var jobDutyIdParameter = jobDutyId.HasValue ?
                new ObjectParameter("JobDutyId", jobDutyId) :
                new ObjectParameter("JobDutyId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var percentageOfTimeParameter = percentageOfTime.HasValue ?
                new ObjectParameter("PercentageOfTime", percentageOfTime) :
                new ObjectParameter("PercentageOfTime", typeof(decimal));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var essentialParameter = essential.HasValue ?
                new ObjectParameter("Essential", essential) :
                new ObjectParameter("Essential", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobDutiesInsert", jobDutyIdParameter, companyIdParameter, descriptionParameter, categoryParameter, priorityParameter, percentageOfTimeParameter, frequencyParameter, essentialParameter, otherParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_JobDutiesInsertORUpdate_Result> usp_JobDutiesInsertORUpdate(Nullable<int> jobDutyID, Nullable<int> companyId, string description, string category, Nullable<int> priority, Nullable<decimal> percentageOfTime, Nullable<int> frequency, Nullable<int> essential, Nullable<int> other, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var jobDutyIDParameter = jobDutyID.HasValue ?
                new ObjectParameter("JobDutyID", jobDutyID) :
                new ObjectParameter("JobDutyID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var percentageOfTimeParameter = percentageOfTime.HasValue ?
                new ObjectParameter("PercentageOfTime", percentageOfTime) :
                new ObjectParameter("PercentageOfTime", typeof(decimal));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var essentialParameter = essential.HasValue ?
                new ObjectParameter("Essential", essential) :
                new ObjectParameter("Essential", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobDutiesInsertORUpdate_Result>("usp_JobDutiesInsertORUpdate", jobDutyIDParameter, companyIdParameter, descriptionParameter, categoryParameter, priorityParameter, percentageOfTimeParameter, frequencyParameter, essentialParameter, otherParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_JobDutiesSelect_Result> usp_JobDutiesSelect(Nullable<int> jobDutyID)
        {
            var jobDutyIDParameter = jobDutyID.HasValue ?
                new ObjectParameter("JobDutyID", jobDutyID) :
                new ObjectParameter("JobDutyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobDutiesSelect_Result>("usp_JobDutiesSelect", jobDutyIDParameter);
        }
    
        public virtual int usp_JobPMEDelete(Nullable<int> pMEID, Nullable<int> companyID)
        {
            var pMEIDParameter = pMEID.HasValue ?
                new ObjectParameter("PMEID", pMEID) :
                new ObjectParameter("PMEID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobPMEDelete", pMEIDParameter, companyIDParameter);
        }
    
        public virtual int usp_InsertDirectDepositBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertDirectDepositBulk");
        }
    
        public virtual ObjectResult<usp_ResetDatabase_Result> usp_ResetDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ResetDatabase_Result>("usp_ResetDatabase");
        }
    
        public virtual int usp_UpdateEmployeeDirectDepositBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmployeeDirectDepositBulk");
        }
    
        public virtual ObjectResult<usp_ManageSecurityCriteriaSelect_Result> usp_ManageSecurityCriteriaSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManageSecurityCriteriaSelect_Result>("usp_ManageSecurityCriteriaSelect");
        }
    
        public virtual int usp_JobDutiesUpdate(Nullable<int> jobDutyID, Nullable<int> companyId, string description, string category, Nullable<int> priority, Nullable<decimal> percentageOfTime, Nullable<int> frequency, Nullable<int> essential, Nullable<int> other, Nullable<int> modifiedBy)
        {
            var jobDutyIDParameter = jobDutyID.HasValue ?
                new ObjectParameter("JobDutyID", jobDutyID) :
                new ObjectParameter("JobDutyID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var percentageOfTimeParameter = percentageOfTime.HasValue ?
                new ObjectParameter("PercentageOfTime", percentageOfTime) :
                new ObjectParameter("PercentageOfTime", typeof(decimal));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var essentialParameter = essential.HasValue ?
                new ObjectParameter("Essential", essential) :
                new ObjectParameter("Essential", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobDutiesUpdate", jobDutyIDParameter, companyIdParameter, descriptionParameter, categoryParameter, priorityParameter, percentageOfTimeParameter, frequencyParameter, essentialParameter, otherParameter, modifiedByParameter);
        }
    
        public virtual int usp_CreateInitialSetupforCompany1(Nullable<int> companyID, ObjectParameter errorCode)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateInitialSetupforCompany1", companyIDParameter, errorCode);
        }
    
        public virtual int usp_CreateRegisteredUsers(string companyName, string address1, string address2, string cITY, string zIP, Nullable<int> state, Nullable<int> country, string phone, string firstName, string lastName, string email, string password, string userName, Nullable<bool> isApproved, Nullable<bool> isLockedOut, string passwordQuestion, string passwordAnswer, ObjectParameter errorCode)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cITYParameter = cITY != null ?
                new ObjectParameter("CITY", cITY) :
                new ObjectParameter("CITY", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateRegisteredUsers", companyNameParameter, address1Parameter, address2Parameter, cITYParameter, zIPParameter, stateParameter, countryParameter, phoneParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, userNameParameter, isApprovedParameter, isLockedOutParameter, passwordQuestionParameter, passwordAnswerParameter, errorCode);
        }
    
        public virtual int usp_ImportAndCreateRegisteredUsers(string userName, string password, Nullable<int> companyId, string employeeNo, string salutation, string firstName, string middleName, string lastName, string suffix, string workEmail, string address1, string address2, string city, string zIP, Nullable<int> countryId, Nullable<int> stateId, string sSN, string workPhone1, string homePhone, Nullable<System.DateTime> birthDate, Nullable<int> gender, Nullable<int> maritalStatus, string homeEmail, Nullable<int> changeReason, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> originalHireDate, Nullable<System.DateTime> terminationDate, Nullable<int> terminationReason, string workPhone, Nullable<System.DateTime> startDate, Nullable<System.DateTime> seniorityDate, Nullable<System.DateTime> lastPaidDate, Nullable<System.DateTime> lastPayRise, Nullable<System.DateTime> lastPromotionDate, Nullable<System.DateTime> lastReviewDate, Nullable<System.DateTime> nextReviewDate, Nullable<System.DateTime> newHireReportDate, Nullable<int> employmentStatus, Nullable<int> jobProfileId, Nullable<int> positionId, Nullable<int> payGroup, Nullable<int> locationId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> managerId, Nullable<int> employmentType, Nullable<int> complianceCode, Nullable<int> benefitClass, Nullable<int> fLSAStatus, Nullable<int> union, string districtCode, string checkDistribution, Nullable<bool> directDepositEmail, Nullable<bool> okToRehire, Nullable<int> wCJobClassCode, Nullable<int> wCStatus, Nullable<int> wCType, ObjectParameter errorCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var workEmailParameter = workEmail != null ?
                new ObjectParameter("WorkEmail", workEmail) :
                new ObjectParameter("WorkEmail", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var workPhone1Parameter = workPhone1 != null ?
                new ObjectParameter("WorkPhone1", workPhone1) :
                new ObjectParameter("WorkPhone1", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var homeEmailParameter = homeEmail != null ?
                new ObjectParameter("HomeEmail", homeEmail) :
                new ObjectParameter("HomeEmail", typeof(string));
    
            var changeReasonParameter = changeReason.HasValue ?
                new ObjectParameter("ChangeReason", changeReason) :
                new ObjectParameter("ChangeReason", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var originalHireDateParameter = originalHireDate.HasValue ?
                new ObjectParameter("OriginalHireDate", originalHireDate) :
                new ObjectParameter("OriginalHireDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var terminationReasonParameter = terminationReason.HasValue ?
                new ObjectParameter("TerminationReason", terminationReason) :
                new ObjectParameter("TerminationReason", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var seniorityDateParameter = seniorityDate.HasValue ?
                new ObjectParameter("SeniorityDate", seniorityDate) :
                new ObjectParameter("SeniorityDate", typeof(System.DateTime));
    
            var lastPaidDateParameter = lastPaidDate.HasValue ?
                new ObjectParameter("LastPaidDate", lastPaidDate) :
                new ObjectParameter("LastPaidDate", typeof(System.DateTime));
    
            var lastPayRiseParameter = lastPayRise.HasValue ?
                new ObjectParameter("LastPayRise", lastPayRise) :
                new ObjectParameter("LastPayRise", typeof(System.DateTime));
    
            var lastPromotionDateParameter = lastPromotionDate.HasValue ?
                new ObjectParameter("LastPromotionDate", lastPromotionDate) :
                new ObjectParameter("LastPromotionDate", typeof(System.DateTime));
    
            var lastReviewDateParameter = lastReviewDate.HasValue ?
                new ObjectParameter("LastReviewDate", lastReviewDate) :
                new ObjectParameter("LastReviewDate", typeof(System.DateTime));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var newHireReportDateParameter = newHireReportDate.HasValue ?
                new ObjectParameter("NewHireReportDate", newHireReportDate) :
                new ObjectParameter("NewHireReportDate", typeof(System.DateTime));
    
            var employmentStatusParameter = employmentStatus.HasValue ?
                new ObjectParameter("EmploymentStatus", employmentStatus) :
                new ObjectParameter("EmploymentStatus", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var payGroupParameter = payGroup.HasValue ?
                new ObjectParameter("PayGroup", payGroup) :
                new ObjectParameter("PayGroup", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var employmentTypeParameter = employmentType.HasValue ?
                new ObjectParameter("EmploymentType", employmentType) :
                new ObjectParameter("EmploymentType", typeof(int));
    
            var complianceCodeParameter = complianceCode.HasValue ?
                new ObjectParameter("ComplianceCode", complianceCode) :
                new ObjectParameter("ComplianceCode", typeof(int));
    
            var benefitClassParameter = benefitClass.HasValue ?
                new ObjectParameter("BenefitClass", benefitClass) :
                new ObjectParameter("BenefitClass", typeof(int));
    
            var fLSAStatusParameter = fLSAStatus.HasValue ?
                new ObjectParameter("FLSAStatus", fLSAStatus) :
                new ObjectParameter("FLSAStatus", typeof(int));
    
            var unionParameter = union.HasValue ?
                new ObjectParameter("Union", union) :
                new ObjectParameter("Union", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var checkDistributionParameter = checkDistribution != null ?
                new ObjectParameter("CheckDistribution", checkDistribution) :
                new ObjectParameter("CheckDistribution", typeof(string));
    
            var directDepositEmailParameter = directDepositEmail.HasValue ?
                new ObjectParameter("DirectDepositEmail", directDepositEmail) :
                new ObjectParameter("DirectDepositEmail", typeof(bool));
    
            var okToRehireParameter = okToRehire.HasValue ?
                new ObjectParameter("OkToRehire", okToRehire) :
                new ObjectParameter("OkToRehire", typeof(bool));
    
            var wCJobClassCodeParameter = wCJobClassCode.HasValue ?
                new ObjectParameter("WCJobClassCode", wCJobClassCode) :
                new ObjectParameter("WCJobClassCode", typeof(int));
    
            var wCStatusParameter = wCStatus.HasValue ?
                new ObjectParameter("WCStatus", wCStatus) :
                new ObjectParameter("WCStatus", typeof(int));
    
            var wCTypeParameter = wCType.HasValue ?
                new ObjectParameter("WCType", wCType) :
                new ObjectParameter("WCType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ImportAndCreateRegisteredUsers", userNameParameter, passwordParameter, companyIdParameter, employeeNoParameter, salutationParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, workEmailParameter, address1Parameter, address2Parameter, cityParameter, zIPParameter, countryIdParameter, stateIdParameter, sSNParameter, workPhone1Parameter, homePhoneParameter, birthDateParameter, genderParameter, maritalStatusParameter, homeEmailParameter, changeReasonParameter, hireDateParameter, originalHireDateParameter, terminationDateParameter, terminationReasonParameter, workPhoneParameter, startDateParameter, seniorityDateParameter, lastPaidDateParameter, lastPayRiseParameter, lastPromotionDateParameter, lastReviewDateParameter, nextReviewDateParameter, newHireReportDateParameter, employmentStatusParameter, jobProfileIdParameter, positionIdParameter, payGroupParameter, locationIdParameter, divisionIdParameter, departmentIdParameter, managerIdParameter, employmentTypeParameter, complianceCodeParameter, benefitClassParameter, fLSAStatusParameter, unionParameter, districtCodeParameter, checkDistributionParameter, directDepositEmailParameter, okToRehireParameter, wCJobClassCodeParameter, wCStatusParameter, wCTypeParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_SelectOnBoardingById_Result> usp_SelectOnBoardingById(Nullable<int> onBoardingId)
        {
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectOnBoardingById_Result>("usp_SelectOnBoardingById", onBoardingIdParameter);
        }
    
        public virtual int usp_RegisteredUsersDelete(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RegisteredUsersDelete", userIDParameter);
        }
    
        public virtual ObjectResult<usp_RegisteredUsersInsert_Result> usp_RegisteredUsersInsert(Nullable<System.Guid> userCode, string email, string loweredEmail, string userName, string password, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<bool> isLockedOut, Nullable<System.DateTime> createDate, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangedDate, Nullable<System.DateTime> lastLockoutDate, Nullable<int> failedPasswordAttemptCount, Nullable<int> failedPasswordAnswerAttemptCount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var loweredEmailParameter = loweredEmail != null ?
                new ObjectParameter("LoweredEmail", loweredEmail) :
                new ObjectParameter("LoweredEmail", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangedDateParameter = lastPasswordChangedDate.HasValue ?
                new ObjectParameter("LastPasswordChangedDate", lastPasswordChangedDate) :
                new ObjectParameter("LastPasswordChangedDate", typeof(System.DateTime));
    
            var lastLockoutDateParameter = lastLockoutDate.HasValue ?
                new ObjectParameter("LastLockoutDate", lastLockoutDate) :
                new ObjectParameter("LastLockoutDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var failedPasswordAnswerAttemptCountParameter = failedPasswordAnswerAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAnswerAttemptCount", failedPasswordAnswerAttemptCount) :
                new ObjectParameter("FailedPasswordAnswerAttemptCount", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegisteredUsersInsert_Result>("usp_RegisteredUsersInsert", userCodeParameter, emailParameter, loweredEmailParameter, userNameParameter, passwordParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, isLockedOutParameter, createDateParameter, lastLoginDateParameter, lastPasswordChangedDateParameter, lastLockoutDateParameter, failedPasswordAttemptCountParameter, failedPasswordAnswerAttemptCountParameter, createdOnParameter, modifiedOnParameter);
        }
    
        public virtual ObjectResult<usp_RegisteredUsersSelect_Result> usp_RegisteredUsersSelect(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegisteredUsersSelect_Result>("usp_RegisteredUsersSelect", userIDParameter);
        }
    
        public virtual ObjectResult<usp_RegisteredUsersUpdate_Result> usp_RegisteredUsersUpdate(Nullable<int> userID, Nullable<System.Guid> userCode, string email, string loweredEmail, string userName, string password, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<bool> isLockedOut, Nullable<System.DateTime> createDate, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangedDate, Nullable<System.DateTime> lastLockoutDate, Nullable<int> failedPasswordAttemptCount, Nullable<int> failedPasswordAnswerAttemptCount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var loweredEmailParameter = loweredEmail != null ?
                new ObjectParameter("LoweredEmail", loweredEmail) :
                new ObjectParameter("LoweredEmail", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangedDateParameter = lastPasswordChangedDate.HasValue ?
                new ObjectParameter("LastPasswordChangedDate", lastPasswordChangedDate) :
                new ObjectParameter("LastPasswordChangedDate", typeof(System.DateTime));
    
            var lastLockoutDateParameter = lastLockoutDate.HasValue ?
                new ObjectParameter("LastLockoutDate", lastLockoutDate) :
                new ObjectParameter("LastLockoutDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var failedPasswordAnswerAttemptCountParameter = failedPasswordAnswerAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAnswerAttemptCount", failedPasswordAnswerAttemptCount) :
                new ObjectParameter("FailedPasswordAnswerAttemptCount", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegisteredUsersUpdate_Result>("usp_RegisteredUsersUpdate", userIDParameter, userCodeParameter, emailParameter, loweredEmailParameter, userNameParameter, passwordParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, isLockedOutParameter, createDateParameter, lastLoginDateParameter, lastPasswordChangedDateParameter, lastLockoutDateParameter, failedPasswordAttemptCountParameter, failedPasswordAnswerAttemptCountParameter, createdOnParameter, modifiedOnParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDirectDepositUpdate_Result> usp_EmployeeDirectDepositUpdate(Nullable<int> companyId, Nullable<int> employeeDirectDepositId, Nullable<int> accountType, string transitorABANumber, string accountNumber, string amount)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeDirectDepositIdParameter = employeeDirectDepositId.HasValue ?
                new ObjectParameter("EmployeeDirectDepositId", employeeDirectDepositId) :
                new ObjectParameter("EmployeeDirectDepositId", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var transitorABANumberParameter = transitorABANumber != null ?
                new ObjectParameter("TransitorABANumber", transitorABANumber) :
                new ObjectParameter("TransitorABANumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDirectDepositUpdate_Result>("usp_EmployeeDirectDepositUpdate", companyIdParameter, employeeDirectDepositIdParameter, accountTypeParameter, transitorABANumberParameter, accountNumberParameter, amountParameter);
        }
    
        public virtual ObjectResult<usp_SelectNewHires_Result> usp_SelectNewHires(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectNewHires_Result>("usp_SelectNewHires", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeesByCompanyId_Result> usp_SelectEmployeesByCompanyId(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeesByCompanyId_Result>("usp_SelectEmployeesByCompanyId", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_ValidateUser_Result> usp_ValidateUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ValidateUser_Result>("usp_ValidateUser", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeesByRoleId_Result> usp_SelectEmployeesByRoleId(Nullable<int> companyID, Nullable<int> roleId, Nullable<int> userId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeesByRoleId_Result>("usp_SelectEmployeesByRoleId", companyIDParameter, roleIdParameter, userIdParameter);
        }
    
        public virtual int usp_HireApprovalSetupInsert(Nullable<int> hireConfigurationId, Nullable<int> userId, string stepName, Nullable<bool> isActive, Nullable<bool> isApproved, Nullable<System.DateTime> approvedOn, Nullable<int> approvedBy, Nullable<System.DateTime> rejectedOn, Nullable<int> rejectedBy)
        {
            var hireConfigurationIdParameter = hireConfigurationId.HasValue ?
                new ObjectParameter("HireConfigurationId", hireConfigurationId) :
                new ObjectParameter("HireConfigurationId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var approvedOnParameter = approvedOn.HasValue ?
                new ObjectParameter("ApprovedOn", approvedOn) :
                new ObjectParameter("ApprovedOn", typeof(System.DateTime));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(int));
    
            var rejectedOnParameter = rejectedOn.HasValue ?
                new ObjectParameter("RejectedOn", rejectedOn) :
                new ObjectParameter("RejectedOn", typeof(System.DateTime));
    
            var rejectedByParameter = rejectedBy.HasValue ?
                new ObjectParameter("RejectedBy", rejectedBy) :
                new ObjectParameter("RejectedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HireApprovalSetupInsert", hireConfigurationIdParameter, userIdParameter, stepNameParameter, isActiveParameter, isApprovedParameter, approvedOnParameter, approvedByParameter, rejectedOnParameter, rejectedByParameter);
        }
    
        public virtual int usp_HireApprovalSetupStepsInsert(Nullable<int> hireConfigurationId, Nullable<int> userId)
        {
            var hireConfigurationIdParameter = hireConfigurationId.HasValue ?
                new ObjectParameter("hireConfigurationId", hireConfigurationId) :
                new ObjectParameter("hireConfigurationId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HireApprovalSetupStepsInsert", hireConfigurationIdParameter, userIdParameter);
        }
    
        public virtual int usp_HireConfigurationSetupDelete(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HireConfigurationSetupDelete", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HireConfigurationSetupInsert_Result> usp_HireConfigurationSetupInsert(Nullable<int> userId, Nullable<int> companyId, Nullable<System.Guid> userCode, string createdBy, Nullable<bool> isSubmitted)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(System.Guid));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var isSubmittedParameter = isSubmitted.HasValue ?
                new ObjectParameter("IsSubmitted", isSubmitted) :
                new ObjectParameter("IsSubmitted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HireConfigurationSetupInsert_Result>("usp_HireConfigurationSetupInsert", userIdParameter, companyIdParameter, userCodeParameter, createdByParameter, isSubmittedParameter);
        }
    
        public virtual ObjectResult<usp_HireConfigurationSetupSelect_Result> usp_HireConfigurationSetupSelect(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HireConfigurationSetupSelect_Result>("usp_HireConfigurationSetupSelect", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_HireConfigurationSetupUpdate_Result> usp_HireConfigurationSetupUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> hireConfigurationId, Nullable<System.Guid> userCode, string modifiedBy, Nullable<bool> isSubmitted)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var hireConfigurationIdParameter = hireConfigurationId.HasValue ?
                new ObjectParameter("HireConfigurationId", hireConfigurationId) :
                new ObjectParameter("HireConfigurationId", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(System.Guid));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var isSubmittedParameter = isSubmitted.HasValue ?
                new ObjectParameter("IsSubmitted", isSubmitted) :
                new ObjectParameter("IsSubmitted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HireConfigurationSetupUpdate_Result>("usp_HireConfigurationSetupUpdate", userIdParameter, companyIdParameter, hireConfigurationIdParameter, userCodeParameter, modifiedByParameter, isSubmittedParameter);
        }
    
        public virtual int usp_OnBoardingInsert1(string onBoardingName, Nullable<int> companyId, ObjectParameter errorCode)
        {
            var onBoardingNameParameter = onBoardingName != null ?
                new ObjectParameter("OnBoardingName", onBoardingName) :
                new ObjectParameter("OnBoardingName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OnBoardingInsert1", onBoardingNameParameter, companyIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_SelectUsersByUsername_Result> usp_SelectUsersByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectUsersByUsername_Result>("usp_SelectUsersByUsername", usernameParameter);
        }
    
        public virtual ObjectResult<usp_HireApprovalSetupSelect_Result> usp_HireApprovalSetupSelect(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HireApprovalSetupSelect_Result>("usp_HireApprovalSetupSelect", userIdParameter);
        }
    
        public virtual ObjectResult<usp_NewUserConfigurationSetupSelect_Result> usp_NewUserConfigurationSetupSelect(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewUserConfigurationSetupSelect_Result>("usp_NewUserConfigurationSetupSelect", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_ShowAllEmployeesPendingListByCompanyId_Result> usp_ShowAllEmployeesPendingListByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ShowAllEmployeesPendingListByCompanyId_Result>("usp_ShowAllEmployeesPendingListByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_StateProvinceSelect_Result> usp_StateProvinceSelect(Nullable<int> stateProvinceID)
        {
            var stateProvinceIDParameter = stateProvinceID.HasValue ?
                new ObjectParameter("StateProvinceID", stateProvinceID) :
                new ObjectParameter("StateProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StateProvinceSelect_Result>("usp_StateProvinceSelect", stateProvinceIDParameter);
        }
    
        public virtual ObjectResult<usp_StateProvinceSelectAll_Result> usp_StateProvinceSelectAll(Nullable<int> countryRegionId)
        {
            var countryRegionIdParameter = countryRegionId.HasValue ?
                new ObjectParameter("CountryRegionId", countryRegionId) :
                new ObjectParameter("CountryRegionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StateProvinceSelectAll_Result>("usp_StateProvinceSelectAll", countryRegionIdParameter);
        }
    
        public virtual int usp_EmployeeCompanyLevelInsert(Nullable<int> companyLevelSecurityId, Nullable<int> employeeId, Nullable<bool> status, string employeeEmail, string employeeName, ObjectParameter errorCode)
        {
            var companyLevelSecurityIdParameter = companyLevelSecurityId.HasValue ?
                new ObjectParameter("CompanyLevelSecurityId", companyLevelSecurityId) :
                new ObjectParameter("CompanyLevelSecurityId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeCompanyLevelInsert", companyLevelSecurityIdParameter, employeeIdParameter, statusParameter, employeeEmailParameter, employeeNameParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeByDivision_Result> usp_SelectEmployeeByDivision(Nullable<int> companyId, Nullable<int> divisionId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeByDivision_Result>("usp_SelectEmployeeByDivision", companyIdParameter, divisionIdParameter);
        }
    
        public virtual ObjectResult<usp_UtilityTablesSelect_Result> usp_UtilityTablesSelect(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityTablesSelect_Result>("usp_UtilityTablesSelect", companyIDParameter);
        }
    
        public virtual int usp_CompanyLevelCriteriaSaveLogInsert(Nullable<int> employeeSendCriteriaId, Nullable<int> companyLevelSecurityId, Nullable<int> selectedId)
        {
            var employeeSendCriteriaIdParameter = employeeSendCriteriaId.HasValue ?
                new ObjectParameter("EmployeeSendCriteriaId", employeeSendCriteriaId) :
                new ObjectParameter("EmployeeSendCriteriaId", typeof(int));
    
            var companyLevelSecurityIdParameter = companyLevelSecurityId.HasValue ?
                new ObjectParameter("CompanyLevelSecurityId", companyLevelSecurityId) :
                new ObjectParameter("CompanyLevelSecurityId", typeof(int));
    
            var selectedIdParameter = selectedId.HasValue ?
                new ObjectParameter("SelectedId", selectedId) :
                new ObjectParameter("SelectedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompanyLevelCriteriaSaveLogInsert", employeeSendCriteriaIdParameter, companyLevelSecurityIdParameter, selectedIdParameter);
        }
    
        public virtual int usp_JobPMEUpdate(Nullable<int> pMEID, Nullable<int> companyId, string category, string description, Nullable<int> frequency, Nullable<int> essential, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var pMEIDParameter = pMEID.HasValue ?
                new ObjectParameter("PMEID", pMEID) :
                new ObjectParameter("PMEID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var essentialParameter = essential.HasValue ?
                new ObjectParameter("Essential", essential) :
                new ObjectParameter("Essential", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobPMEUpdate", pMEIDParameter, companyIdParameter, categoryParameter, descriptionParameter, frequencyParameter, essentialParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int usp_JobPMEInsert(Nullable<int> companyId, string description, string category, Nullable<int> frequency, Nullable<int> essential, Nullable<int> createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var essentialParameter = essential.HasValue ?
                new ObjectParameter("Essential", essential) :
                new ObjectParameter("Essential", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobPMEInsert", companyIdParameter, descriptionParameter, categoryParameter, frequencyParameter, essentialParameter, createdByParameter);
        }
    
        public virtual int usp_JobQualificationDelete(Nullable<int> jobQualificationID, Nullable<int> companyId)
        {
            var jobQualificationIDParameter = jobQualificationID.HasValue ?
                new ObjectParameter("JobQualificationID", jobQualificationID) :
                new ObjectParameter("JobQualificationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobQualificationDelete", jobQualificationIDParameter, companyIdParameter);
        }
    
        public virtual int usp_JobQualificationInsert(Nullable<int> jobQualificationID, Nullable<int> companyId, string description, Nullable<int> type, string subjectArea, string proficiency, Nullable<decimal> years, string lastUsed, Nullable<bool> mandatory, Nullable<int> createdBy)
        {
            var jobQualificationIDParameter = jobQualificationID.HasValue ?
                new ObjectParameter("JobQualificationID", jobQualificationID) :
                new ObjectParameter("JobQualificationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var subjectAreaParameter = subjectArea != null ?
                new ObjectParameter("SubjectArea", subjectArea) :
                new ObjectParameter("SubjectArea", typeof(string));
    
            var proficiencyParameter = proficiency != null ?
                new ObjectParameter("Proficiency", proficiency) :
                new ObjectParameter("Proficiency", typeof(string));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(decimal));
    
            var lastUsedParameter = lastUsed != null ?
                new ObjectParameter("LastUsed", lastUsed) :
                new ObjectParameter("LastUsed", typeof(string));
    
            var mandatoryParameter = mandatory.HasValue ?
                new ObjectParameter("Mandatory", mandatory) :
                new ObjectParameter("Mandatory", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobQualificationInsert", jobQualificationIDParameter, companyIdParameter, descriptionParameter, typeParameter, subjectAreaParameter, proficiencyParameter, yearsParameter, lastUsedParameter, mandatoryParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_JobQualificationSelectAll_Result> usp_JobQualificationSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobQualificationSelectAll_Result>("usp_JobQualificationSelectAll", companyIdParameter);
        }
    
        public virtual int usp_JobQualificationUpdate(Nullable<int> jobQualificationID, Nullable<int> companyId, Nullable<int> type, string subjectArea, string proficiency, Nullable<decimal> years, string lastUsed, Nullable<bool> mandatory, string description, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var jobQualificationIDParameter = jobQualificationID.HasValue ?
                new ObjectParameter("JobQualificationID", jobQualificationID) :
                new ObjectParameter("JobQualificationID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var subjectAreaParameter = subjectArea != null ?
                new ObjectParameter("SubjectArea", subjectArea) :
                new ObjectParameter("SubjectArea", typeof(string));
    
            var proficiencyParameter = proficiency != null ?
                new ObjectParameter("Proficiency", proficiency) :
                new ObjectParameter("Proficiency", typeof(string));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(decimal));
    
            var lastUsedParameter = lastUsed != null ?
                new ObjectParameter("LastUsed", lastUsed) :
                new ObjectParameter("LastUsed", typeof(string));
    
            var mandatoryParameter = mandatory.HasValue ?
                new ObjectParameter("Mandatory", mandatory) :
                new ObjectParameter("Mandatory", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobQualificationUpdate", jobQualificationIDParameter, companyIdParameter, typeParameter, subjectAreaParameter, proficiencyParameter, yearsParameter, lastUsedParameter, mandatoryParameter, descriptionParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_JobQualificationSelect_Result> usp_JobQualificationSelect(Nullable<int> jobQualificationID)
        {
            var jobQualificationIDParameter = jobQualificationID.HasValue ?
                new ObjectParameter("JobQualificationID", jobQualificationID) :
                new ObjectParameter("JobQualificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobQualificationSelect_Result>("usp_JobQualificationSelect", jobQualificationIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCompanyLevelSecurityCriteriaById_Result> usp_GetCompanyLevelSecurityCriteriaById(Nullable<int> companyLevelSecurityId)
        {
            var companyLevelSecurityIdParameter = companyLevelSecurityId.HasValue ?
                new ObjectParameter("CompanyLevelSecurityId", companyLevelSecurityId) :
                new ObjectParameter("CompanyLevelSecurityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyLevelSecurityCriteriaById_Result>("usp_GetCompanyLevelSecurityCriteriaById", companyLevelSecurityIdParameter);
        }
    
        public virtual ObjectResult<usp_WorkAuthorizationSelectAll_Result> usp_WorkAuthorizationSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WorkAuthorizationSelectAll_Result>("usp_WorkAuthorizationSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectQuestionType_Result> usp_SelectQuestionType(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectQuestionType_Result>("usp_SelectQuestionType", companyIdParameter);
        }
    
        public virtual int usp_ActivityLogDelete(Nullable<int> activityId, Nullable<int> companyId)
        {
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActivityLogDelete", activityIdParameter, companyIdParameter);
        }
    
        public virtual int usp_ActivityLogInsert(Nullable<int> companyId, string activity, Nullable<System.DateTime> activityDate, Nullable<bool> isActive, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var activityDateParameter = activityDate.HasValue ?
                new ObjectParameter("ActivityDate", activityDate) :
                new ObjectParameter("ActivityDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActivityLogInsert", companyIdParameter, activityParameter, activityDateParameter, isActiveParameter, createdOnParameter);
        }
    
        public virtual ObjectResult<usp_ActivityLogSelectByCompanyId_Result> usp_ActivityLogSelectByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ActivityLogSelectByCompanyId_Result>("usp_ActivityLogSelectByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_RecruitingQuestionsInsertORUpdate_Result> usp_RecruitingQuestionsInsertORUpdate(Nullable<int> recruitingQuestionId, Nullable<int> companyID, string questionText, Nullable<int> questionType, Nullable<int> sequenceNumber, Nullable<bool> active, Nullable<bool> required)
        {
            var recruitingQuestionIdParameter = recruitingQuestionId.HasValue ?
                new ObjectParameter("RecruitingQuestionId", recruitingQuestionId) :
                new ObjectParameter("RecruitingQuestionId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("QuestionText", questionText) :
                new ObjectParameter("QuestionText", typeof(string));
    
            var questionTypeParameter = questionType.HasValue ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(int));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RecruitingQuestionsInsertORUpdate_Result>("usp_RecruitingQuestionsInsertORUpdate", recruitingQuestionIdParameter, companyIDParameter, questionTextParameter, questionTypeParameter, sequenceNumberParameter, activeParameter, requiredParameter);
        }
    
        public virtual ObjectResult<usp_RecruitingQuestionsSelectAll_Result> usp_RecruitingQuestionsSelectAll(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RecruitingQuestionsSelectAll_Result>("usp_RecruitingQuestionsSelectAll", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_TalentManagementSelectAll_Result> usp_TalentManagementSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TalentManagementSelectAll_Result>("usp_TalentManagementSelectAll", companyIdParameter);
        }
    
        public virtual int usp_FormI9ComplianceDetails(Nullable<int> workAuthorizationId, Nullable<int> companyId, Nullable<int> userId, Nullable<int> citizenOfUS, string alienNumber, Nullable<System.DateTime> permanentResidentExpire, Nullable<int> alienCitizenof, Nullable<System.DateTime> alienAuthorisedDate, Nullable<int> alienAutharisedCitizenof, Nullable<System.DateTime> certificationDate, byte[] attachment, string attachmentName, string attachmentType, string alienRegistrationNumber, string admissionNumber, string passportNumber, Nullable<int> countryof, Nullable<int> modifiedBy, Nullable<bool> federalLaw, Nullable<bool> isSSN, Nullable<int> employeeSignId, Nullable<System.DateTime> employeeSignDate, Nullable<int> employerSignId, ObjectParameter workauthId)
        {
            var workAuthorizationIdParameter = workAuthorizationId.HasValue ?
                new ObjectParameter("WorkAuthorizationId", workAuthorizationId) :
                new ObjectParameter("WorkAuthorizationId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var citizenOfUSParameter = citizenOfUS.HasValue ?
                new ObjectParameter("CitizenOfUS", citizenOfUS) :
                new ObjectParameter("CitizenOfUS", typeof(int));
    
            var alienNumberParameter = alienNumber != null ?
                new ObjectParameter("AlienNumber", alienNumber) :
                new ObjectParameter("AlienNumber", typeof(string));
    
            var permanentResidentExpireParameter = permanentResidentExpire.HasValue ?
                new ObjectParameter("PermanentResidentExpire", permanentResidentExpire) :
                new ObjectParameter("PermanentResidentExpire", typeof(System.DateTime));
    
            var alienCitizenofParameter = alienCitizenof.HasValue ?
                new ObjectParameter("AlienCitizenof", alienCitizenof) :
                new ObjectParameter("AlienCitizenof", typeof(int));
    
            var alienAuthorisedDateParameter = alienAuthorisedDate.HasValue ?
                new ObjectParameter("AlienAuthorisedDate", alienAuthorisedDate) :
                new ObjectParameter("AlienAuthorisedDate", typeof(System.DateTime));
    
            var alienAutharisedCitizenofParameter = alienAutharisedCitizenof.HasValue ?
                new ObjectParameter("AlienAutharisedCitizenof", alienAutharisedCitizenof) :
                new ObjectParameter("AlienAutharisedCitizenof", typeof(int));
    
            var certificationDateParameter = certificationDate.HasValue ?
                new ObjectParameter("CertificationDate", certificationDate) :
                new ObjectParameter("CertificationDate", typeof(System.DateTime));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(byte[]));
    
            var attachmentNameParameter = attachmentName != null ?
                new ObjectParameter("AttachmentName", attachmentName) :
                new ObjectParameter("AttachmentName", typeof(string));
    
            var attachmentTypeParameter = attachmentType != null ?
                new ObjectParameter("AttachmentType", attachmentType) :
                new ObjectParameter("AttachmentType", typeof(string));
    
            var alienRegistrationNumberParameter = alienRegistrationNumber != null ?
                new ObjectParameter("AlienRegistrationNumber", alienRegistrationNumber) :
                new ObjectParameter("AlienRegistrationNumber", typeof(string));
    
            var admissionNumberParameter = admissionNumber != null ?
                new ObjectParameter("AdmissionNumber", admissionNumber) :
                new ObjectParameter("AdmissionNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var countryofParameter = countryof.HasValue ?
                new ObjectParameter("Countryof", countryof) :
                new ObjectParameter("Countryof", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var federalLawParameter = federalLaw.HasValue ?
                new ObjectParameter("FederalLaw", federalLaw) :
                new ObjectParameter("FederalLaw", typeof(bool));
    
            var isSSNParameter = isSSN.HasValue ?
                new ObjectParameter("IsSSN", isSSN) :
                new ObjectParameter("IsSSN", typeof(bool));
    
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            var employeeSignDateParameter = employeeSignDate.HasValue ?
                new ObjectParameter("EmployeeSignDate", employeeSignDate) :
                new ObjectParameter("EmployeeSignDate", typeof(System.DateTime));
    
            var employerSignIdParameter = employerSignId.HasValue ?
                new ObjectParameter("EmployerSignId", employerSignId) :
                new ObjectParameter("EmployerSignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FormI9ComplianceDetails", workAuthorizationIdParameter, companyIdParameter, userIdParameter, citizenOfUSParameter, alienNumberParameter, permanentResidentExpireParameter, alienCitizenofParameter, alienAuthorisedDateParameter, alienAutharisedCitizenofParameter, certificationDateParameter, attachmentParameter, attachmentNameParameter, attachmentTypeParameter, alienRegistrationNumberParameter, admissionNumberParameter, passportNumberParameter, countryofParameter, modifiedByParameter, federalLawParameter, isSSNParameter, employeeSignIdParameter, employeeSignDateParameter, employerSignIdParameter, workauthId);
        }
    
        public virtual int usp_RecruitingQuestionsDelete(Nullable<int> recruitingQuestionId)
        {
            var recruitingQuestionIdParameter = recruitingQuestionId.HasValue ?
                new ObjectParameter("RecruitingQuestionId", recruitingQuestionId) :
                new ObjectParameter("RecruitingQuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RecruitingQuestionsDelete", recruitingQuestionIdParameter);
        }
    
        public virtual ObjectResult<usp_RecruitingQuestionsSelect_Result> usp_RecruitingQuestionsSelect(Nullable<int> recruitingQuestionId)
        {
            var recruitingQuestionIdParameter = recruitingQuestionId.HasValue ?
                new ObjectParameter("RecruitingQuestionId", recruitingQuestionId) :
                new ObjectParameter("RecruitingQuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RecruitingQuestionsSelect_Result>("usp_RecruitingQuestionsSelect", recruitingQuestionIdParameter);
        }
    
        public virtual int usp_RecruitingQuestionsUpdate(Nullable<int> recruitingQuestionId, Nullable<int> companyId, string questionText, Nullable<int> questionType, Nullable<int> sequenceNumber, Nullable<bool> active, Nullable<bool> required, Nullable<int> modifiedBy)
        {
            var recruitingQuestionIdParameter = recruitingQuestionId.HasValue ?
                new ObjectParameter("RecruitingQuestionId", recruitingQuestionId) :
                new ObjectParameter("RecruitingQuestionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("QuestionText", questionText) :
                new ObjectParameter("QuestionText", typeof(string));
    
            var questionTypeParameter = questionType.HasValue ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(int));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RecruitingQuestionsUpdate", recruitingQuestionIdParameter, companyIdParameter, questionTextParameter, questionTypeParameter, sequenceNumberParameter, activeParameter, requiredParameter, modifiedByParameter);
        }
    
        public virtual int I9FormSelect(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I9FormSelect", userIDParameter);
        }
    
        public virtual int usp_Employeew4FormsInsert(Nullable<int> userId, Nullable<int> companyId, string personalAllowancesA, Nullable<int> personalAllowancesB, string personalAllowancesC, Nullable<int> personalAllowancesD, string personalAllowancesE, string personalAllowancesF, string personalAllowancesG, string personalAllowancesH, string firstName, string lastName, string sSNNO, string homeAddress, string cityTownStateZip, Nullable<bool> employeesWithHolding3, Nullable<bool> employeesWithHolding4, Nullable<decimal> employeesWithHolding5, Nullable<decimal> employeesWithHolding6, string employeesWithHolding7, Nullable<int> employeeSignId, Nullable<System.DateTime> signDate, string employerAddress, string employeeOfficeCode, string identificationNo, Nullable<decimal> deductions1, Nullable<decimal> deductions2, Nullable<decimal> deductions3, Nullable<decimal> deductions4, Nullable<decimal> deductions5, Nullable<decimal> deductions6, Nullable<decimal> deductions7, Nullable<decimal> deductions8, Nullable<decimal> deductions9, Nullable<decimal> deductions10, string earnings1, string earnings2, string earnings3, string earnings4, string earnings5, string earnings6, Nullable<decimal> earnings7, Nullable<decimal> earnings8, Nullable<decimal> earnings9, Nullable<int> createdBy, ObjectParameter errorCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var personalAllowancesAParameter = personalAllowancesA != null ?
                new ObjectParameter("PersonalAllowancesA", personalAllowancesA) :
                new ObjectParameter("PersonalAllowancesA", typeof(string));
    
            var personalAllowancesBParameter = personalAllowancesB.HasValue ?
                new ObjectParameter("PersonalAllowancesB", personalAllowancesB) :
                new ObjectParameter("PersonalAllowancesB", typeof(int));
    
            var personalAllowancesCParameter = personalAllowancesC != null ?
                new ObjectParameter("PersonalAllowancesC", personalAllowancesC) :
                new ObjectParameter("PersonalAllowancesC", typeof(string));
    
            var personalAllowancesDParameter = personalAllowancesD.HasValue ?
                new ObjectParameter("PersonalAllowancesD", personalAllowancesD) :
                new ObjectParameter("PersonalAllowancesD", typeof(int));
    
            var personalAllowancesEParameter = personalAllowancesE != null ?
                new ObjectParameter("PersonalAllowancesE", personalAllowancesE) :
                new ObjectParameter("PersonalAllowancesE", typeof(string));
    
            var personalAllowancesFParameter = personalAllowancesF != null ?
                new ObjectParameter("PersonalAllowancesF", personalAllowancesF) :
                new ObjectParameter("PersonalAllowancesF", typeof(string));
    
            var personalAllowancesGParameter = personalAllowancesG != null ?
                new ObjectParameter("PersonalAllowancesG", personalAllowancesG) :
                new ObjectParameter("PersonalAllowancesG", typeof(string));
    
            var personalAllowancesHParameter = personalAllowancesH != null ?
                new ObjectParameter("PersonalAllowancesH", personalAllowancesH) :
                new ObjectParameter("PersonalAllowancesH", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sSNNOParameter = sSNNO != null ?
                new ObjectParameter("SSNNO", sSNNO) :
                new ObjectParameter("SSNNO", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var cityTownStateZipParameter = cityTownStateZip != null ?
                new ObjectParameter("CityTownStateZip", cityTownStateZip) :
                new ObjectParameter("CityTownStateZip", typeof(string));
    
            var employeesWithHolding3Parameter = employeesWithHolding3.HasValue ?
                new ObjectParameter("EmployeesWithHolding3", employeesWithHolding3) :
                new ObjectParameter("EmployeesWithHolding3", typeof(bool));
    
            var employeesWithHolding4Parameter = employeesWithHolding4.HasValue ?
                new ObjectParameter("EmployeesWithHolding4", employeesWithHolding4) :
                new ObjectParameter("EmployeesWithHolding4", typeof(bool));
    
            var employeesWithHolding5Parameter = employeesWithHolding5.HasValue ?
                new ObjectParameter("EmployeesWithHolding5", employeesWithHolding5) :
                new ObjectParameter("EmployeesWithHolding5", typeof(decimal));
    
            var employeesWithHolding6Parameter = employeesWithHolding6.HasValue ?
                new ObjectParameter("EmployeesWithHolding6", employeesWithHolding6) :
                new ObjectParameter("EmployeesWithHolding6", typeof(decimal));
    
            var employeesWithHolding7Parameter = employeesWithHolding7 != null ?
                new ObjectParameter("EmployeesWithHolding7", employeesWithHolding7) :
                new ObjectParameter("EmployeesWithHolding7", typeof(string));
    
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            var signDateParameter = signDate.HasValue ?
                new ObjectParameter("SignDate", signDate) :
                new ObjectParameter("SignDate", typeof(System.DateTime));
    
            var employerAddressParameter = employerAddress != null ?
                new ObjectParameter("EmployerAddress", employerAddress) :
                new ObjectParameter("EmployerAddress", typeof(string));
    
            var employeeOfficeCodeParameter = employeeOfficeCode != null ?
                new ObjectParameter("EmployeeOfficeCode", employeeOfficeCode) :
                new ObjectParameter("EmployeeOfficeCode", typeof(string));
    
            var identificationNoParameter = identificationNo != null ?
                new ObjectParameter("IdentificationNo", identificationNo) :
                new ObjectParameter("IdentificationNo", typeof(string));
    
            var deductions1Parameter = deductions1.HasValue ?
                new ObjectParameter("Deductions1", deductions1) :
                new ObjectParameter("Deductions1", typeof(decimal));
    
            var deductions2Parameter = deductions2.HasValue ?
                new ObjectParameter("Deductions2", deductions2) :
                new ObjectParameter("Deductions2", typeof(decimal));
    
            var deductions3Parameter = deductions3.HasValue ?
                new ObjectParameter("Deductions3", deductions3) :
                new ObjectParameter("Deductions3", typeof(decimal));
    
            var deductions4Parameter = deductions4.HasValue ?
                new ObjectParameter("Deductions4", deductions4) :
                new ObjectParameter("Deductions4", typeof(decimal));
    
            var deductions5Parameter = deductions5.HasValue ?
                new ObjectParameter("Deductions5", deductions5) :
                new ObjectParameter("Deductions5", typeof(decimal));
    
            var deductions6Parameter = deductions6.HasValue ?
                new ObjectParameter("Deductions6", deductions6) :
                new ObjectParameter("Deductions6", typeof(decimal));
    
            var deductions7Parameter = deductions7.HasValue ?
                new ObjectParameter("Deductions7", deductions7) :
                new ObjectParameter("Deductions7", typeof(decimal));
    
            var deductions8Parameter = deductions8.HasValue ?
                new ObjectParameter("Deductions8", deductions8) :
                new ObjectParameter("Deductions8", typeof(decimal));
    
            var deductions9Parameter = deductions9.HasValue ?
                new ObjectParameter("Deductions9", deductions9) :
                new ObjectParameter("Deductions9", typeof(decimal));
    
            var deductions10Parameter = deductions10.HasValue ?
                new ObjectParameter("Deductions10", deductions10) :
                new ObjectParameter("Deductions10", typeof(decimal));
    
            var earnings1Parameter = earnings1 != null ?
                new ObjectParameter("Earnings1", earnings1) :
                new ObjectParameter("Earnings1", typeof(string));
    
            var earnings2Parameter = earnings2 != null ?
                new ObjectParameter("Earnings2", earnings2) :
                new ObjectParameter("Earnings2", typeof(string));
    
            var earnings3Parameter = earnings3 != null ?
                new ObjectParameter("Earnings3", earnings3) :
                new ObjectParameter("Earnings3", typeof(string));
    
            var earnings4Parameter = earnings4 != null ?
                new ObjectParameter("Earnings4", earnings4) :
                new ObjectParameter("Earnings4", typeof(string));
    
            var earnings5Parameter = earnings5 != null ?
                new ObjectParameter("Earnings5", earnings5) :
                new ObjectParameter("Earnings5", typeof(string));
    
            var earnings6Parameter = earnings6 != null ?
                new ObjectParameter("Earnings6", earnings6) :
                new ObjectParameter("Earnings6", typeof(string));
    
            var earnings7Parameter = earnings7.HasValue ?
                new ObjectParameter("Earnings7", earnings7) :
                new ObjectParameter("Earnings7", typeof(decimal));
    
            var earnings8Parameter = earnings8.HasValue ?
                new ObjectParameter("Earnings8", earnings8) :
                new ObjectParameter("Earnings8", typeof(decimal));
    
            var earnings9Parameter = earnings9.HasValue ?
                new ObjectParameter("Earnings9", earnings9) :
                new ObjectParameter("Earnings9", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Employeew4FormsInsert", userIdParameter, companyIdParameter, personalAllowancesAParameter, personalAllowancesBParameter, personalAllowancesCParameter, personalAllowancesDParameter, personalAllowancesEParameter, personalAllowancesFParameter, personalAllowancesGParameter, personalAllowancesHParameter, firstNameParameter, lastNameParameter, sSNNOParameter, homeAddressParameter, cityTownStateZipParameter, employeesWithHolding3Parameter, employeesWithHolding4Parameter, employeesWithHolding5Parameter, employeesWithHolding6Parameter, employeesWithHolding7Parameter, employeeSignIdParameter, signDateParameter, employerAddressParameter, employeeOfficeCodeParameter, identificationNoParameter, deductions1Parameter, deductions2Parameter, deductions3Parameter, deductions4Parameter, deductions5Parameter, deductions6Parameter, deductions7Parameter, deductions8Parameter, deductions9Parameter, deductions10Parameter, earnings1Parameter, earnings2Parameter, earnings3Parameter, earnings4Parameter, earnings5Parameter, earnings6Parameter, earnings7Parameter, earnings8Parameter, earnings9Parameter, createdByParameter, errorCode);
        }
    
        public virtual int usp_Employeew4FormsUpdate(Nullable<int> employeew4formId, Nullable<int> companyId, string personalAllowancesA, Nullable<int> personalAllowancesB, string personalAllowancesC, Nullable<int> personalAllowancesD, string personalAllowancesE, string personalAllowancesF, string personalAllowancesG, string personalAllowancesH, string firstName, string lastName, string sSNNO, string homeAddress, string cityTownStateZip, Nullable<bool> employeesWithHolding3, Nullable<bool> employeesWithHolding4, Nullable<decimal> employeesWithHolding5, Nullable<decimal> employeesWithHolding6, string employeesWithHolding7, Nullable<int> employeeSignId, Nullable<System.DateTime> signDate, string employerAddress, string employeeOfficeCode, string identificationNo, Nullable<decimal> deductions1, Nullable<decimal> deductions2, Nullable<decimal> deductions3, Nullable<decimal> deductions4, Nullable<decimal> deductions5, Nullable<decimal> deductions6, Nullable<decimal> deductions7, Nullable<decimal> deductions8, Nullable<decimal> deductions9, Nullable<decimal> deductions10, string earnings1, string earnings2, string earnings3, string earnings4, string earnings5, string earnings6, Nullable<decimal> earnings7, Nullable<decimal> earnings8, Nullable<decimal> earnings9, Nullable<int> modifiedBy)
        {
            var employeew4formIdParameter = employeew4formId.HasValue ?
                new ObjectParameter("Employeew4formId", employeew4formId) :
                new ObjectParameter("Employeew4formId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var personalAllowancesAParameter = personalAllowancesA != null ?
                new ObjectParameter("PersonalAllowancesA", personalAllowancesA) :
                new ObjectParameter("PersonalAllowancesA", typeof(string));
    
            var personalAllowancesBParameter = personalAllowancesB.HasValue ?
                new ObjectParameter("PersonalAllowancesB", personalAllowancesB) :
                new ObjectParameter("PersonalAllowancesB", typeof(int));
    
            var personalAllowancesCParameter = personalAllowancesC != null ?
                new ObjectParameter("PersonalAllowancesC", personalAllowancesC) :
                new ObjectParameter("PersonalAllowancesC", typeof(string));
    
            var personalAllowancesDParameter = personalAllowancesD.HasValue ?
                new ObjectParameter("PersonalAllowancesD", personalAllowancesD) :
                new ObjectParameter("PersonalAllowancesD", typeof(int));
    
            var personalAllowancesEParameter = personalAllowancesE != null ?
                new ObjectParameter("PersonalAllowancesE", personalAllowancesE) :
                new ObjectParameter("PersonalAllowancesE", typeof(string));
    
            var personalAllowancesFParameter = personalAllowancesF != null ?
                new ObjectParameter("PersonalAllowancesF", personalAllowancesF) :
                new ObjectParameter("PersonalAllowancesF", typeof(string));
    
            var personalAllowancesGParameter = personalAllowancesG != null ?
                new ObjectParameter("PersonalAllowancesG", personalAllowancesG) :
                new ObjectParameter("PersonalAllowancesG", typeof(string));
    
            var personalAllowancesHParameter = personalAllowancesH != null ?
                new ObjectParameter("PersonalAllowancesH", personalAllowancesH) :
                new ObjectParameter("PersonalAllowancesH", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sSNNOParameter = sSNNO != null ?
                new ObjectParameter("SSNNO", sSNNO) :
                new ObjectParameter("SSNNO", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var cityTownStateZipParameter = cityTownStateZip != null ?
                new ObjectParameter("CityTownStateZip", cityTownStateZip) :
                new ObjectParameter("CityTownStateZip", typeof(string));
    
            var employeesWithHolding3Parameter = employeesWithHolding3.HasValue ?
                new ObjectParameter("EmployeesWithHolding3", employeesWithHolding3) :
                new ObjectParameter("EmployeesWithHolding3", typeof(bool));
    
            var employeesWithHolding4Parameter = employeesWithHolding4.HasValue ?
                new ObjectParameter("EmployeesWithHolding4", employeesWithHolding4) :
                new ObjectParameter("EmployeesWithHolding4", typeof(bool));
    
            var employeesWithHolding5Parameter = employeesWithHolding5.HasValue ?
                new ObjectParameter("EmployeesWithHolding5", employeesWithHolding5) :
                new ObjectParameter("EmployeesWithHolding5", typeof(decimal));
    
            var employeesWithHolding6Parameter = employeesWithHolding6.HasValue ?
                new ObjectParameter("EmployeesWithHolding6", employeesWithHolding6) :
                new ObjectParameter("EmployeesWithHolding6", typeof(decimal));
    
            var employeesWithHolding7Parameter = employeesWithHolding7 != null ?
                new ObjectParameter("EmployeesWithHolding7", employeesWithHolding7) :
                new ObjectParameter("EmployeesWithHolding7", typeof(string));
    
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            var signDateParameter = signDate.HasValue ?
                new ObjectParameter("SignDate", signDate) :
                new ObjectParameter("SignDate", typeof(System.DateTime));
    
            var employerAddressParameter = employerAddress != null ?
                new ObjectParameter("EmployerAddress", employerAddress) :
                new ObjectParameter("EmployerAddress", typeof(string));
    
            var employeeOfficeCodeParameter = employeeOfficeCode != null ?
                new ObjectParameter("EmployeeOfficeCode", employeeOfficeCode) :
                new ObjectParameter("EmployeeOfficeCode", typeof(string));
    
            var identificationNoParameter = identificationNo != null ?
                new ObjectParameter("IdentificationNo", identificationNo) :
                new ObjectParameter("IdentificationNo", typeof(string));
    
            var deductions1Parameter = deductions1.HasValue ?
                new ObjectParameter("Deductions1", deductions1) :
                new ObjectParameter("Deductions1", typeof(decimal));
    
            var deductions2Parameter = deductions2.HasValue ?
                new ObjectParameter("Deductions2", deductions2) :
                new ObjectParameter("Deductions2", typeof(decimal));
    
            var deductions3Parameter = deductions3.HasValue ?
                new ObjectParameter("Deductions3", deductions3) :
                new ObjectParameter("Deductions3", typeof(decimal));
    
            var deductions4Parameter = deductions4.HasValue ?
                new ObjectParameter("Deductions4", deductions4) :
                new ObjectParameter("Deductions4", typeof(decimal));
    
            var deductions5Parameter = deductions5.HasValue ?
                new ObjectParameter("Deductions5", deductions5) :
                new ObjectParameter("Deductions5", typeof(decimal));
    
            var deductions6Parameter = deductions6.HasValue ?
                new ObjectParameter("Deductions6", deductions6) :
                new ObjectParameter("Deductions6", typeof(decimal));
    
            var deductions7Parameter = deductions7.HasValue ?
                new ObjectParameter("Deductions7", deductions7) :
                new ObjectParameter("Deductions7", typeof(decimal));
    
            var deductions8Parameter = deductions8.HasValue ?
                new ObjectParameter("Deductions8", deductions8) :
                new ObjectParameter("Deductions8", typeof(decimal));
    
            var deductions9Parameter = deductions9.HasValue ?
                new ObjectParameter("Deductions9", deductions9) :
                new ObjectParameter("Deductions9", typeof(decimal));
    
            var deductions10Parameter = deductions10.HasValue ?
                new ObjectParameter("Deductions10", deductions10) :
                new ObjectParameter("Deductions10", typeof(decimal));
    
            var earnings1Parameter = earnings1 != null ?
                new ObjectParameter("Earnings1", earnings1) :
                new ObjectParameter("Earnings1", typeof(string));
    
            var earnings2Parameter = earnings2 != null ?
                new ObjectParameter("Earnings2", earnings2) :
                new ObjectParameter("Earnings2", typeof(string));
    
            var earnings3Parameter = earnings3 != null ?
                new ObjectParameter("Earnings3", earnings3) :
                new ObjectParameter("Earnings3", typeof(string));
    
            var earnings4Parameter = earnings4 != null ?
                new ObjectParameter("Earnings4", earnings4) :
                new ObjectParameter("Earnings4", typeof(string));
    
            var earnings5Parameter = earnings5 != null ?
                new ObjectParameter("Earnings5", earnings5) :
                new ObjectParameter("Earnings5", typeof(string));
    
            var earnings6Parameter = earnings6 != null ?
                new ObjectParameter("Earnings6", earnings6) :
                new ObjectParameter("Earnings6", typeof(string));
    
            var earnings7Parameter = earnings7.HasValue ?
                new ObjectParameter("Earnings7", earnings7) :
                new ObjectParameter("Earnings7", typeof(decimal));
    
            var earnings8Parameter = earnings8.HasValue ?
                new ObjectParameter("Earnings8", earnings8) :
                new ObjectParameter("Earnings8", typeof(decimal));
    
            var earnings9Parameter = earnings9.HasValue ?
                new ObjectParameter("Earnings9", earnings9) :
                new ObjectParameter("Earnings9", typeof(decimal));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Employeew4FormsUpdate", employeew4formIdParameter, companyIdParameter, personalAllowancesAParameter, personalAllowancesBParameter, personalAllowancesCParameter, personalAllowancesDParameter, personalAllowancesEParameter, personalAllowancesFParameter, personalAllowancesGParameter, personalAllowancesHParameter, firstNameParameter, lastNameParameter, sSNNOParameter, homeAddressParameter, cityTownStateZipParameter, employeesWithHolding3Parameter, employeesWithHolding4Parameter, employeesWithHolding5Parameter, employeesWithHolding6Parameter, employeesWithHolding7Parameter, employeeSignIdParameter, signDateParameter, employerAddressParameter, employeeOfficeCodeParameter, identificationNoParameter, deductions1Parameter, deductions2Parameter, deductions3Parameter, deductions4Parameter, deductions5Parameter, deductions6Parameter, deductions7Parameter, deductions8Parameter, deductions9Parameter, deductions10Parameter, earnings1Parameter, earnings2Parameter, earnings3Parameter, earnings4Parameter, earnings5Parameter, earnings6Parameter, earnings7Parameter, earnings8Parameter, earnings9Parameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_Employeew4FormsSelect_Result> usp_Employeew4FormsSelect(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Employeew4FormsSelect_Result>("usp_Employeew4FormsSelect", companyIdParameter, userIdParameter);
        }
    
        public virtual int usp_InterviewInsert(Nullable<int> jobProfileId, Nullable<int> companyId, Nullable<int> userId, Nullable<int> type, Nullable<int> interviewRoom, Nullable<int> candidateId, Nullable<int> status, Nullable<int> interviewerId, Nullable<System.DateTime> interviewDate, Nullable<System.DateTime> interviewTime, string candidateInstructions, string interviewerInstructions, Nullable<bool> sendInterviewerEmail, Nullable<bool> sendCandidateEmail, string feedback, Nullable<int> createdBy, ObjectParameter interviewId)
        {
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var interviewRoomParameter = interviewRoom.HasValue ?
                new ObjectParameter("InterviewRoom", interviewRoom) :
                new ObjectParameter("InterviewRoom", typeof(int));
    
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("CandidateId", candidateId) :
                new ObjectParameter("CandidateId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var interviewerIdParameter = interviewerId.HasValue ?
                new ObjectParameter("InterviewerId", interviewerId) :
                new ObjectParameter("InterviewerId", typeof(int));
    
            var interviewDateParameter = interviewDate.HasValue ?
                new ObjectParameter("InterviewDate", interviewDate) :
                new ObjectParameter("InterviewDate", typeof(System.DateTime));
    
            var interviewTimeParameter = interviewTime.HasValue ?
                new ObjectParameter("InterviewTime", interviewTime) :
                new ObjectParameter("InterviewTime", typeof(System.DateTime));
    
            var candidateInstructionsParameter = candidateInstructions != null ?
                new ObjectParameter("CandidateInstructions", candidateInstructions) :
                new ObjectParameter("CandidateInstructions", typeof(string));
    
            var interviewerInstructionsParameter = interviewerInstructions != null ?
                new ObjectParameter("InterviewerInstructions", interviewerInstructions) :
                new ObjectParameter("InterviewerInstructions", typeof(string));
    
            var sendInterviewerEmailParameter = sendInterviewerEmail.HasValue ?
                new ObjectParameter("SendInterviewerEmail", sendInterviewerEmail) :
                new ObjectParameter("SendInterviewerEmail", typeof(bool));
    
            var sendCandidateEmailParameter = sendCandidateEmail.HasValue ?
                new ObjectParameter("SendCandidateEmail", sendCandidateEmail) :
                new ObjectParameter("SendCandidateEmail", typeof(bool));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InterviewInsert", jobProfileIdParameter, companyIdParameter, userIdParameter, typeParameter, interviewRoomParameter, candidateIdParameter, statusParameter, interviewerIdParameter, interviewDateParameter, interviewTimeParameter, candidateInstructionsParameter, interviewerInstructionsParameter, sendInterviewerEmailParameter, sendCandidateEmailParameter, feedbackParameter, createdByParameter, interviewId);
        }
    
        public virtual ObjectResult<usp_SelectConsentFormsByUserId_Result> usp_SelectConsentFormsByUserId(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectConsentFormsByUserId_Result>("usp_SelectConsentFormsByUserId", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_InterviewUpdate(Nullable<int> interviewId, Nullable<int> jobProfileId, Nullable<int> companyId, Nullable<int> userId, Nullable<int> type, Nullable<int> interviewRoom, Nullable<int> candidateId, Nullable<int> status, Nullable<int> interviewerId, Nullable<System.DateTime> interviewDate, Nullable<System.DateTime> interviewTime, string candidateInstructions, string interviewerInstructions, Nullable<bool> sendInterviewerEmail, Nullable<bool> sendCandidateEmail, string feedback, Nullable<int> createdBy)
        {
            var interviewIdParameter = interviewId.HasValue ?
                new ObjectParameter("InterviewId", interviewId) :
                new ObjectParameter("InterviewId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var interviewRoomParameter = interviewRoom.HasValue ?
                new ObjectParameter("InterviewRoom", interviewRoom) :
                new ObjectParameter("InterviewRoom", typeof(int));
    
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("CandidateId", candidateId) :
                new ObjectParameter("CandidateId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var interviewerIdParameter = interviewerId.HasValue ?
                new ObjectParameter("InterviewerId", interviewerId) :
                new ObjectParameter("InterviewerId", typeof(int));
    
            var interviewDateParameter = interviewDate.HasValue ?
                new ObjectParameter("InterviewDate", interviewDate) :
                new ObjectParameter("InterviewDate", typeof(System.DateTime));
    
            var interviewTimeParameter = interviewTime.HasValue ?
                new ObjectParameter("InterviewTime", interviewTime) :
                new ObjectParameter("InterviewTime", typeof(System.DateTime));
    
            var candidateInstructionsParameter = candidateInstructions != null ?
                new ObjectParameter("CandidateInstructions", candidateInstructions) :
                new ObjectParameter("CandidateInstructions", typeof(string));
    
            var interviewerInstructionsParameter = interviewerInstructions != null ?
                new ObjectParameter("InterviewerInstructions", interviewerInstructions) :
                new ObjectParameter("InterviewerInstructions", typeof(string));
    
            var sendInterviewerEmailParameter = sendInterviewerEmail.HasValue ?
                new ObjectParameter("SendInterviewerEmail", sendInterviewerEmail) :
                new ObjectParameter("SendInterviewerEmail", typeof(bool));
    
            var sendCandidateEmailParameter = sendCandidateEmail.HasValue ?
                new ObjectParameter("SendCandidateEmail", sendCandidateEmail) :
                new ObjectParameter("SendCandidateEmail", typeof(bool));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InterviewUpdate", interviewIdParameter, jobProfileIdParameter, companyIdParameter, userIdParameter, typeParameter, interviewRoomParameter, candidateIdParameter, statusParameter, interviewerIdParameter, interviewDateParameter, interviewTimeParameter, candidateInstructionsParameter, interviewerInstructionsParameter, sendInterviewerEmailParameter, sendCandidateEmailParameter, feedbackParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_RecruitingAnswersInsertORUpdate_Result> usp_RecruitingAnswersInsertORUpdate(Nullable<int> answerId, Nullable<int> companyID, Nullable<int> questionId, Nullable<int> questionTypeId, string answers, Nullable<int> value, Nullable<bool> knockOutValue, Nullable<bool> active)
        {
            var answerIdParameter = answerId.HasValue ?
                new ObjectParameter("AnswerId", answerId) :
                new ObjectParameter("AnswerId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("QuestionTypeId", questionTypeId) :
                new ObjectParameter("QuestionTypeId", typeof(int));
    
            var answersParameter = answers != null ?
                new ObjectParameter("Answers", answers) :
                new ObjectParameter("Answers", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var knockOutValueParameter = knockOutValue.HasValue ?
                new ObjectParameter("KnockOutValue", knockOutValue) :
                new ObjectParameter("KnockOutValue", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RecruitingAnswersInsertORUpdate_Result>("usp_RecruitingAnswersInsertORUpdate", answerIdParameter, companyIDParameter, questionIdParameter, questionTypeIdParameter, answersParameter, valueParameter, knockOutValueParameter, activeParameter);
        }
    
        public virtual int usp_InterviewDelete(Nullable<int> interviewId, Nullable<int> companyId)
        {
            var interviewIdParameter = interviewId.HasValue ?
                new ObjectParameter("InterviewId", interviewId) :
                new ObjectParameter("InterviewId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InterviewDelete", interviewIdParameter, companyIdParameter);
        }
    
        public virtual int usp_InsertCompetencyContentBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCompetencyContentBulk");
        }
    
        public virtual int usp_InsertRecruitingAnswersBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertRecruitingAnswersBulk");
        }
    
        public virtual int usp_InsertRecruitingAnswers(Nullable<int> companyId, Nullable<int> questionId, Nullable<int> questionTypeId, string answers, Nullable<int> value, Nullable<bool> knockOutValue, Nullable<bool> active, ObjectParameter answerId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("QuestionTypeId", questionTypeId) :
                new ObjectParameter("QuestionTypeId", typeof(int));
    
            var answersParameter = answers != null ?
                new ObjectParameter("Answers", answers) :
                new ObjectParameter("Answers", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var knockOutValueParameter = knockOutValue.HasValue ?
                new ObjectParameter("KnockOutValue", knockOutValue) :
                new ObjectParameter("KnockOutValue", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertRecruitingAnswers", companyIdParameter, questionIdParameter, questionTypeIdParameter, answersParameter, valueParameter, knockOutValueParameter, activeParameter, answerId);
        }
    
        public virtual ObjectResult<usp_SelectRecruitingAnswers_Result> usp_SelectRecruitingAnswers(Nullable<int> questionId, Nullable<int> companyId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRecruitingAnswers_Result>("usp_SelectRecruitingAnswers", questionIdParameter, companyIdParameter);
        }
    
        public virtual int usp_UpdateRecruitingAnswers(Nullable<int> questionId, Nullable<int> questionTypeId, string answers, Nullable<int> value, Nullable<bool> knockOutValue, Nullable<int> companyId, Nullable<bool> active, Nullable<int> answerId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("QuestionTypeId", questionTypeId) :
                new ObjectParameter("QuestionTypeId", typeof(int));
    
            var answersParameter = answers != null ?
                new ObjectParameter("Answers", answers) :
                new ObjectParameter("Answers", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var knockOutValueParameter = knockOutValue.HasValue ?
                new ObjectParameter("KnockOutValue", knockOutValue) :
                new ObjectParameter("KnockOutValue", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var answerIdParameter = answerId.HasValue ?
                new ObjectParameter("AnswerId", answerId) :
                new ObjectParameter("AnswerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRecruitingAnswers", questionIdParameter, questionTypeIdParameter, answersParameter, valueParameter, knockOutValueParameter, companyIdParameter, activeParameter, answerIdParameter);
        }
    
        public virtual int usp_UpdateRecruitingAnswersBulk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRecruitingAnswersBulk");
        }
    
        public virtual int usp_JobApplicantDelete(Nullable<int> jobApplicantId, Nullable<int> companyId)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantDelete", jobApplicantIdParameter, companyIdParameter);
        }
    
        public virtual int usp_JobApplicantDetailsInsert(Nullable<int> applicantId, Nullable<int> jobId, Nullable<int> achievementOrAssociationType, string achievementOrAssociationDescription, string university, string degree, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activities, string employmentTitle, string employmentDescription, string employmentLocation, Nullable<System.DateTime> employmentStartDate, Nullable<System.DateTime> employmentEndDate, ObjectParameter errorCode)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var achievementOrAssociationTypeParameter = achievementOrAssociationType.HasValue ?
                new ObjectParameter("AchievementOrAssociationType", achievementOrAssociationType) :
                new ObjectParameter("AchievementOrAssociationType", typeof(int));
    
            var achievementOrAssociationDescriptionParameter = achievementOrAssociationDescription != null ?
                new ObjectParameter("AchievementOrAssociationDescription", achievementOrAssociationDescription) :
                new ObjectParameter("AchievementOrAssociationDescription", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activitiesParameter = activities != null ?
                new ObjectParameter("Activities", activities) :
                new ObjectParameter("Activities", typeof(string));
    
            var employmentTitleParameter = employmentTitle != null ?
                new ObjectParameter("EmploymentTitle", employmentTitle) :
                new ObjectParameter("EmploymentTitle", typeof(string));
    
            var employmentDescriptionParameter = employmentDescription != null ?
                new ObjectParameter("EmploymentDescription", employmentDescription) :
                new ObjectParameter("EmploymentDescription", typeof(string));
    
            var employmentLocationParameter = employmentLocation != null ?
                new ObjectParameter("EmploymentLocation", employmentLocation) :
                new ObjectParameter("EmploymentLocation", typeof(string));
    
            var employmentStartDateParameter = employmentStartDate.HasValue ?
                new ObjectParameter("EmploymentStartDate", employmentStartDate) :
                new ObjectParameter("EmploymentStartDate", typeof(System.DateTime));
    
            var employmentEndDateParameter = employmentEndDate.HasValue ?
                new ObjectParameter("EmploymentEndDate", employmentEndDate) :
                new ObjectParameter("EmploymentEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantDetailsInsert", applicantIdParameter, jobIdParameter, achievementOrAssociationTypeParameter, achievementOrAssociationDescriptionParameter, universityParameter, degreeParameter, fromDateParameter, toDateParameter, activitiesParameter, employmentTitleParameter, employmentDescriptionParameter, employmentLocationParameter, employmentStartDateParameter, employmentEndDateParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_JobApplicantSelectById_Result> usp_JobApplicantSelectById(Nullable<int> jobApplicantId, Nullable<int> companyId)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobApplicantSelectById_Result>("usp_JobApplicantSelectById", jobApplicantIdParameter, companyIdParameter);
        }
    
        public virtual int usp_JobAppliedInsert(Nullable<int> jobApplicantId, Nullable<int> jobProfileId, Nullable<int> rating, Nullable<int> status, Nullable<bool> isHired, string notes, Nullable<bool> isApproved, ObjectParameter errorCode)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isHiredParameter = isHired.HasValue ?
                new ObjectParameter("IsHired", isHired) :
                new ObjectParameter("IsHired", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobAppliedInsert", jobApplicantIdParameter, jobProfileIdParameter, ratingParameter, statusParameter, isHiredParameter, notesParameter, isApprovedParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_JobAppliedSelectById_Result> usp_JobAppliedSelectById(Nullable<int> jobApplicantId, Nullable<int> jobProfileId)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobAppliedSelectById_Result>("usp_JobAppliedSelectById", jobApplicantIdParameter, jobProfileIdParameter);
        }
    
        public virtual int usp_JobApplicantInsertORUpdate(Nullable<int> jobApplicantId, string firstName, string lastName, string city, string address, string email, Nullable<int> companyId, string phone, Nullable<int> resumeAttachmentId, string resumeText, Nullable<bool> status, Nullable<int> createdBy, Nullable<int> modifiedBy, string password, string applicantDescription, ObjectParameter applicantid)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var resumeAttachmentIdParameter = resumeAttachmentId.HasValue ?
                new ObjectParameter("ResumeAttachmentId", resumeAttachmentId) :
                new ObjectParameter("ResumeAttachmentId", typeof(int));
    
            var resumeTextParameter = resumeText != null ?
                new ObjectParameter("ResumeText", resumeText) :
                new ObjectParameter("ResumeText", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var applicantDescriptionParameter = applicantDescription != null ?
                new ObjectParameter("ApplicantDescription", applicantDescription) :
                new ObjectParameter("ApplicantDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantInsertORUpdate", jobApplicantIdParameter, firstNameParameter, lastNameParameter, cityParameter, addressParameter, emailParameter, companyIdParameter, phoneParameter, resumeAttachmentIdParameter, resumeTextParameter, statusParameter, createdByParameter, modifiedByParameter, passwordParameter, applicantDescriptionParameter, applicantid);
        }
    
        public virtual int usp_ConsentFormDelete(Nullable<int> consentFormId)
        {
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ConsentFormDelete", consentFormIdParameter);
        }
    
        public virtual ObjectResult<usp_ValidateApplicant_Result> usp_ValidateApplicant(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ValidateApplicant_Result>("usp_ValidateApplicant", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<usp_ApplicantJobs_Result> usp_ApplicantJobs(Nullable<int> jobApplicantId)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicantJobs_Result>("usp_ApplicantJobs", jobApplicantIdParameter);
        }
    
        public virtual int usp_ConsentFormsUpdate(Nullable<int> consentFormId, Nullable<int> companyId, Nullable<System.Guid> consentCode, Nullable<int> consentType, string documentName, string description, Nullable<bool> active, Nullable<bool> displayDocInConsent, Nullable<bool> enableUploadLink, Nullable<int> modifiedBy)
        {
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var consentCodeParameter = consentCode.HasValue ?
                new ObjectParameter("ConsentCode", consentCode) :
                new ObjectParameter("ConsentCode", typeof(System.Guid));
    
            var consentTypeParameter = consentType.HasValue ?
                new ObjectParameter("ConsentType", consentType) :
                new ObjectParameter("ConsentType", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var displayDocInConsentParameter = displayDocInConsent.HasValue ?
                new ObjectParameter("DisplayDocInConsent", displayDocInConsent) :
                new ObjectParameter("DisplayDocInConsent", typeof(bool));
    
            var enableUploadLinkParameter = enableUploadLink.HasValue ?
                new ObjectParameter("EnableUploadLink", enableUploadLink) :
                new ObjectParameter("EnableUploadLink", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ConsentFormsUpdate", consentFormIdParameter, companyIdParameter, consentCodeParameter, consentTypeParameter, documentNameParameter, descriptionParameter, activeParameter, displayDocInConsentParameter, enableUploadLinkParameter, modifiedByParameter);
        }
    
        public virtual int usp_ConsentFormsInsert(Nullable<int> companyId, Nullable<int> consentType, string description, Nullable<bool> active, Nullable<int> attachmentFileId, Nullable<bool> displayDocInConsent, Nullable<bool> enableUploadLink, string documentName, Nullable<System.DateTime> uploadedOn, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var consentTypeParameter = consentType.HasValue ?
                new ObjectParameter("ConsentType", consentType) :
                new ObjectParameter("ConsentType", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var attachmentFileIdParameter = attachmentFileId.HasValue ?
                new ObjectParameter("AttachmentFileId", attachmentFileId) :
                new ObjectParameter("AttachmentFileId", typeof(int));
    
            var displayDocInConsentParameter = displayDocInConsent.HasValue ?
                new ObjectParameter("DisplayDocInConsent", displayDocInConsent) :
                new ObjectParameter("DisplayDocInConsent", typeof(bool));
    
            var enableUploadLinkParameter = enableUploadLink.HasValue ?
                new ObjectParameter("EnableUploadLink", enableUploadLink) :
                new ObjectParameter("EnableUploadLink", typeof(bool));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var uploadedOnParameter = uploadedOn.HasValue ?
                new ObjectParameter("UploadedOn", uploadedOn) :
                new ObjectParameter("UploadedOn", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ConsentFormsInsert", companyIdParameter, consentTypeParameter, descriptionParameter, activeParameter, attachmentFileIdParameter, displayDocInConsentParameter, enableUploadLinkParameter, documentNameParameter, uploadedOnParameter, createdOnParameter, modifiedOnParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_ConsentFormsSelect_Result> usp_ConsentFormsSelect(Nullable<int> consentFormId, Nullable<int> companyId)
        {
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsentFormsSelect_Result>("usp_ConsentFormsSelect", consentFormIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ConsentFormsSelectAll_Result> usp_ConsentFormsSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsentFormsSelectAll_Result>("usp_ConsentFormsSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_ConsentFormsUpdateSignFileId_Result> usp_ConsentFormsUpdateSignFileId(Nullable<int> consentFormId, Nullable<int> companyId, Nullable<int> employeeSignId, ObjectParameter errorCode)
        {
            var consentFormIdParameter = consentFormId.HasValue ?
                new ObjectParameter("ConsentFormId", consentFormId) :
                new ObjectParameter("ConsentFormId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeSignIdParameter = employeeSignId.HasValue ?
                new ObjectParameter("EmployeeSignId", employeeSignId) :
                new ObjectParameter("EmployeeSignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsentFormsUpdateSignFileId_Result>("usp_ConsentFormsUpdateSignFileId", consentFormIdParameter, companyIdParameter, employeeSignIdParameter, errorCode);
        }
    
        public virtual ObjectResult<usp_JobApplicantSelect_Result1> usp_JobApplicantSelect(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobApplicantSelect_Result1>("usp_JobApplicantSelect", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_JobDutiesSelectAll_Result> usp_JobDutiesSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobDutiesSelectAll_Result>("usp_JobDutiesSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_JobPMESelect_Result> usp_JobPMESelect(Nullable<int> pMEId)
        {
            var pMEIdParameter = pMEId.HasValue ?
                new ObjectParameter("PMEId", pMEId) :
                new ObjectParameter("PMEId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobPMESelect_Result>("usp_JobPMESelect", pMEIdParameter);
        }
    
        public virtual ObjectResult<usp_JobPMESelectAll_Result> usp_JobPMESelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobPMESelectAll_Result>("usp_JobPMESelectAll", companyIdParameter);
        }
    
        public virtual int usp_JobApplicantDetailsUpdate(Nullable<int> applicantId, Nullable<int> applicantAchievementsAndAssociationsId, Nullable<int> applicantEducationId, Nullable<int> applicantEmploymentHistoryId, Nullable<int> jobId, Nullable<int> achievementOrAssociationType, string achievementOrAssociationDescription, string university, string degree, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activities, string employmentTitle, string employmentDescription, string employmentLocation, Nullable<System.DateTime> employmentStartDate, Nullable<System.DateTime> employmentEndDate, ObjectParameter errorCode)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var applicantAchievementsAndAssociationsIdParameter = applicantAchievementsAndAssociationsId.HasValue ?
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", applicantAchievementsAndAssociationsId) :
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", typeof(int));
    
            var applicantEducationIdParameter = applicantEducationId.HasValue ?
                new ObjectParameter("ApplicantEducationId", applicantEducationId) :
                new ObjectParameter("ApplicantEducationId", typeof(int));
    
            var applicantEmploymentHistoryIdParameter = applicantEmploymentHistoryId.HasValue ?
                new ObjectParameter("ApplicantEmploymentHistoryId", applicantEmploymentHistoryId) :
                new ObjectParameter("ApplicantEmploymentHistoryId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var achievementOrAssociationTypeParameter = achievementOrAssociationType.HasValue ?
                new ObjectParameter("AchievementOrAssociationType", achievementOrAssociationType) :
                new ObjectParameter("AchievementOrAssociationType", typeof(int));
    
            var achievementOrAssociationDescriptionParameter = achievementOrAssociationDescription != null ?
                new ObjectParameter("AchievementOrAssociationDescription", achievementOrAssociationDescription) :
                new ObjectParameter("AchievementOrAssociationDescription", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activitiesParameter = activities != null ?
                new ObjectParameter("Activities", activities) :
                new ObjectParameter("Activities", typeof(string));
    
            var employmentTitleParameter = employmentTitle != null ?
                new ObjectParameter("EmploymentTitle", employmentTitle) :
                new ObjectParameter("EmploymentTitle", typeof(string));
    
            var employmentDescriptionParameter = employmentDescription != null ?
                new ObjectParameter("EmploymentDescription", employmentDescription) :
                new ObjectParameter("EmploymentDescription", typeof(string));
    
            var employmentLocationParameter = employmentLocation != null ?
                new ObjectParameter("EmploymentLocation", employmentLocation) :
                new ObjectParameter("EmploymentLocation", typeof(string));
    
            var employmentStartDateParameter = employmentStartDate.HasValue ?
                new ObjectParameter("EmploymentStartDate", employmentStartDate) :
                new ObjectParameter("EmploymentStartDate", typeof(System.DateTime));
    
            var employmentEndDateParameter = employmentEndDate.HasValue ?
                new ObjectParameter("EmploymentEndDate", employmentEndDate) :
                new ObjectParameter("EmploymentEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantDetailsUpdate", applicantIdParameter, applicantAchievementsAndAssociationsIdParameter, applicantEducationIdParameter, applicantEmploymentHistoryIdParameter, jobIdParameter, achievementOrAssociationTypeParameter, achievementOrAssociationDescriptionParameter, universityParameter, degreeParameter, fromDateParameter, toDateParameter, activitiesParameter, employmentTitleParameter, employmentDescriptionParameter, employmentLocationParameter, employmentStartDateParameter, employmentEndDateParameter, errorCode);
        }
    
        public virtual int usp_JobApplicantUpdate(Nullable<int> jobApplicantId, string firstName, string lastName, string city, string address, string email, Nullable<int> companyId, string phone, Nullable<int> resumeAttachmentId, string resumeText, Nullable<bool> status, Nullable<int> createdBy, Nullable<int> modifiedBy, string password, string applicantDescription)
        {
            var jobApplicantIdParameter = jobApplicantId.HasValue ?
                new ObjectParameter("JobApplicantId", jobApplicantId) :
                new ObjectParameter("JobApplicantId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var resumeAttachmentIdParameter = resumeAttachmentId.HasValue ?
                new ObjectParameter("ResumeAttachmentId", resumeAttachmentId) :
                new ObjectParameter("ResumeAttachmentId", typeof(int));
    
            var resumeTextParameter = resumeText != null ?
                new ObjectParameter("ResumeText", resumeText) :
                new ObjectParameter("ResumeText", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var applicantDescriptionParameter = applicantDescription != null ?
                new ObjectParameter("ApplicantDescription", applicantDescription) :
                new ObjectParameter("ApplicantDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantUpdate", jobApplicantIdParameter, firstNameParameter, lastNameParameter, cityParameter, addressParameter, emailParameter, companyIdParameter, phoneParameter, resumeAttachmentIdParameter, resumeTextParameter, statusParameter, createdByParameter, modifiedByParameter, passwordParameter, applicantDescriptionParameter);
        }
    
        public virtual int usp_JobApplicantEmploymentInsert(Nullable<int> applicantEmploymentHistoryId, Nullable<int> applicantId, Nullable<int> jobId, string employmentTitle, string employmentDescription, string employmentLocation, Nullable<System.DateTime> employmentStartDate, Nullable<System.DateTime> employmentEndDate)
        {
            var applicantEmploymentHistoryIdParameter = applicantEmploymentHistoryId.HasValue ?
                new ObjectParameter("ApplicantEmploymentHistoryId", applicantEmploymentHistoryId) :
                new ObjectParameter("ApplicantEmploymentHistoryId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var employmentTitleParameter = employmentTitle != null ?
                new ObjectParameter("EmploymentTitle", employmentTitle) :
                new ObjectParameter("EmploymentTitle", typeof(string));
    
            var employmentDescriptionParameter = employmentDescription != null ?
                new ObjectParameter("EmploymentDescription", employmentDescription) :
                new ObjectParameter("EmploymentDescription", typeof(string));
    
            var employmentLocationParameter = employmentLocation != null ?
                new ObjectParameter("EmploymentLocation", employmentLocation) :
                new ObjectParameter("EmploymentLocation", typeof(string));
    
            var employmentStartDateParameter = employmentStartDate.HasValue ?
                new ObjectParameter("EmploymentStartDate", employmentStartDate) :
                new ObjectParameter("EmploymentStartDate", typeof(System.DateTime));
    
            var employmentEndDateParameter = employmentEndDate.HasValue ?
                new ObjectParameter("EmploymentEndDate", employmentEndDate) :
                new ObjectParameter("EmploymentEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantEmploymentInsert", applicantEmploymentHistoryIdParameter, applicantIdParameter, jobIdParameter, employmentTitleParameter, employmentDescriptionParameter, employmentLocationParameter, employmentStartDateParameter, employmentEndDateParameter);
        }
    
        public virtual int usp_JobApplicantSkillInsert(Nullable<int> applicantAchievementsAndAssociationsId, Nullable<int> applicantId, Nullable<int> jobId, Nullable<int> achievementOrAssociationType, string achievementOrAssociationDescription)
        {
            var applicantAchievementsAndAssociationsIdParameter = applicantAchievementsAndAssociationsId.HasValue ?
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", applicantAchievementsAndAssociationsId) :
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var achievementOrAssociationTypeParameter = achievementOrAssociationType.HasValue ?
                new ObjectParameter("AchievementOrAssociationType", achievementOrAssociationType) :
                new ObjectParameter("AchievementOrAssociationType", typeof(int));
    
            var achievementOrAssociationDescriptionParameter = achievementOrAssociationDescription != null ?
                new ObjectParameter("AchievementOrAssociationDescription", achievementOrAssociationDescription) :
                new ObjectParameter("AchievementOrAssociationDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantSkillInsert", applicantAchievementsAndAssociationsIdParameter, applicantIdParameter, jobIdParameter, achievementOrAssociationTypeParameter, achievementOrAssociationDescriptionParameter);
        }
    
        public virtual int usp_ApplicantEducationUpdate(Nullable<int> applicantEducationId, string university, string degree, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activities, Nullable<int> applicantId, Nullable<int> jobId)
        {
            var applicantEducationIdParameter = applicantEducationId.HasValue ?
                new ObjectParameter("ApplicantEducationId", applicantEducationId) :
                new ObjectParameter("ApplicantEducationId", typeof(int));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activitiesParameter = activities != null ?
                new ObjectParameter("Activities", activities) :
                new ObjectParameter("Activities", typeof(string));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantEducationUpdate", applicantEducationIdParameter, universityParameter, degreeParameter, fromDateParameter, toDateParameter, activitiesParameter, applicantIdParameter, jobIdParameter);
        }
    
        public virtual int usp_ApplicantEmploymentUpdate(Nullable<int> applicantEmploymentHistoryId, string title, string description, string location, Nullable<System.DateTime> employmentStartDate, Nullable<System.DateTime> employmentEndDate, Nullable<int> applicantId, Nullable<int> jobId)
        {
            var applicantEmploymentHistoryIdParameter = applicantEmploymentHistoryId.HasValue ?
                new ObjectParameter("ApplicantEmploymentHistoryId", applicantEmploymentHistoryId) :
                new ObjectParameter("ApplicantEmploymentHistoryId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var employmentStartDateParameter = employmentStartDate.HasValue ?
                new ObjectParameter("EmploymentStartDate", employmentStartDate) :
                new ObjectParameter("EmploymentStartDate", typeof(System.DateTime));
    
            var employmentEndDateParameter = employmentEndDate.HasValue ?
                new ObjectParameter("EmploymentEndDate", employmentEndDate) :
                new ObjectParameter("EmploymentEndDate", typeof(System.DateTime));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantEmploymentUpdate", applicantEmploymentHistoryIdParameter, titleParameter, descriptionParameter, locationParameter, employmentStartDateParameter, employmentEndDateParameter, applicantIdParameter, jobIdParameter);
        }
    
        public virtual int usp_ApplicantEducationDelete(Nullable<int> applicantEducationId)
        {
            var applicantEducationIdParameter = applicantEducationId.HasValue ?
                new ObjectParameter("ApplicantEducationId", applicantEducationId) :
                new ObjectParameter("ApplicantEducationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantEducationDelete", applicantEducationIdParameter);
        }
    
        public virtual int usp_ApplicantEmploymentDelete(Nullable<int> applicantEmploymentHistoryId)
        {
            var applicantEmploymentHistoryIdParameter = applicantEmploymentHistoryId.HasValue ?
                new ObjectParameter("ApplicantEmploymentHistoryId", applicantEmploymentHistoryId) :
                new ObjectParameter("ApplicantEmploymentHistoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantEmploymentDelete", applicantEmploymentHistoryIdParameter);
        }
    
        public virtual int usp_ApplicantSkillDelete(Nullable<int> applicantAchievementsAndAssociationsId)
        {
            var applicantAchievementsAndAssociationsIdParameter = applicantAchievementsAndAssociationsId.HasValue ?
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", applicantAchievementsAndAssociationsId) :
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantSkillDelete", applicantAchievementsAndAssociationsIdParameter);
        }
    
        public virtual int usp_ApplicantSkillUpdate(Nullable<int> applicantAchievementsAndAssociationsId, Nullable<int> type, string description, Nullable<int> applicantId, Nullable<int> jobId)
        {
            var applicantAchievementsAndAssociationsIdParameter = applicantAchievementsAndAssociationsId.HasValue ?
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", applicantAchievementsAndAssociationsId) :
                new ObjectParameter("ApplicantAchievementsAndAssociationsId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApplicantSkillUpdate", applicantAchievementsAndAssociationsIdParameter, typeParameter, descriptionParameter, applicantIdParameter, jobIdParameter);
        }
    
        public virtual int usp_JobApplicantResumeAttachmentUpdate(Nullable<int> applicantId, Nullable<int> resumeAttachmentId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var resumeAttachmentIdParameter = resumeAttachmentId.HasValue ?
                new ObjectParameter("ResumeAttachmentId", resumeAttachmentId) :
                new ObjectParameter("ResumeAttachmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantResumeAttachmentUpdate", applicantIdParameter, resumeAttachmentIdParameter);
        }
    
        public virtual int usp_JobApplicantEducationInsert(Nullable<int> applicantEducationId, Nullable<int> applicantId, Nullable<int> jobId, string university, string degree, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string activities)
        {
            var applicantEducationIdParameter = applicantEducationId.HasValue ?
                new ObjectParameter("ApplicantEducationId", applicantEducationId) :
                new ObjectParameter("ApplicantEducationId", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activitiesParameter = activities != null ?
                new ObjectParameter("Activities", activities) :
                new ObjectParameter("Activities", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobApplicantEducationInsert", applicantEducationIdParameter, applicantIdParameter, jobIdParameter, universityParameter, degreeParameter, fromDateParameter, toDateParameter, activitiesParameter);
        }
    
        public virtual ObjectResult<usp_InterviewSelectAll_Result> usp_InterviewSelectAll(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InterviewSelectAll_Result>("usp_InterviewSelectAll", companyIdParameter);
        }
    
        public virtual ObjectResult<usp_InterviewSelect_Result> usp_InterviewSelect(Nullable<int> interviewId)
        {
            var interviewIdParameter = interviewId.HasValue ?
                new ObjectParameter("InterviewId", interviewId) :
                new ObjectParameter("InterviewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InterviewSelect_Result>("usp_InterviewSelect", interviewIdParameter);
        }
    
        public virtual ObjectResult<usp_JobProfileSelect_Result> usp_JobProfileSelect(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobProfileSelect_Result>("usp_JobProfileSelect", companyIdParameter);
        }
    
        public virtual int usp_JobProfileInsertORUpdate(Nullable<int> jobProfileID, Nullable<int> companyId, string jobCode, string title, string cityStateOrZipCode, Nullable<int> jobCategory, string jobDescription, string companyDescription, Nullable<bool> status, Nullable<bool> isPosted, Nullable<bool> basicInfo, Nullable<bool> education, Nullable<bool> employment, Nullable<bool> certification, Nullable<bool> skill, Nullable<int> createdBy, Nullable<int> modifiedBy, Nullable<int> hiringManager, Nullable<System.DateTime> postDate, Nullable<bool> isRequisition, ObjectParameter jobId, string fullName, string email, string comments)
        {
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var jobCodeParameter = jobCode != null ?
                new ObjectParameter("JobCode", jobCode) :
                new ObjectParameter("JobCode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var cityStateOrZipCodeParameter = cityStateOrZipCode != null ?
                new ObjectParameter("CityStateOrZipCode", cityStateOrZipCode) :
                new ObjectParameter("CityStateOrZipCode", typeof(string));
    
            var jobCategoryParameter = jobCategory.HasValue ?
                new ObjectParameter("JobCategory", jobCategory) :
                new ObjectParameter("JobCategory", typeof(int));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var companyDescriptionParameter = companyDescription != null ?
                new ObjectParameter("CompanyDescription", companyDescription) :
                new ObjectParameter("CompanyDescription", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var isPostedParameter = isPosted.HasValue ?
                new ObjectParameter("IsPosted", isPosted) :
                new ObjectParameter("IsPosted", typeof(bool));
    
            var basicInfoParameter = basicInfo.HasValue ?
                new ObjectParameter("BasicInfo", basicInfo) :
                new ObjectParameter("BasicInfo", typeof(bool));
    
            var educationParameter = education.HasValue ?
                new ObjectParameter("Education", education) :
                new ObjectParameter("Education", typeof(bool));
    
            var employmentParameter = employment.HasValue ?
                new ObjectParameter("Employment", employment) :
                new ObjectParameter("Employment", typeof(bool));
    
            var certificationParameter = certification.HasValue ?
                new ObjectParameter("Certification", certification) :
                new ObjectParameter("Certification", typeof(bool));
    
            var skillParameter = skill.HasValue ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var hiringManagerParameter = hiringManager.HasValue ?
                new ObjectParameter("HiringManager", hiringManager) :
                new ObjectParameter("HiringManager", typeof(int));
    
            var postDateParameter = postDate.HasValue ?
                new ObjectParameter("PostDate", postDate) :
                new ObjectParameter("PostDate", typeof(System.DateTime));
    
            var isRequisitionParameter = isRequisition.HasValue ?
                new ObjectParameter("IsRequisition", isRequisition) :
                new ObjectParameter("IsRequisition", typeof(bool));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobProfileInsertORUpdate", jobProfileIDParameter, companyIdParameter, jobCodeParameter, titleParameter, cityStateOrZipCodeParameter, jobCategoryParameter, jobDescriptionParameter, companyDescriptionParameter, statusParameter, isPostedParameter, basicInfoParameter, educationParameter, employmentParameter, certificationParameter, skillParameter, createdByParameter, modifiedByParameter, hiringManagerParameter, postDateParameter, isRequisitionParameter, jobId, fullNameParameter, emailParameter, commentsParameter);
        }
    
        public virtual int usp_JobProfileHiringManagerCommentsUpdate(Nullable<int> jobProfileId, string comments)
        {
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JobProfileHiringManagerCommentsUpdate", jobProfileIdParameter, commentsParameter);
        }
    
        public virtual ObjectResult<usp_JobProfileSelectById_Result> usp_JobProfileSelectById(Nullable<int> jobProfileID)
        {
            var jobProfileIDParameter = jobProfileID.HasValue ?
                new ObjectParameter("JobProfileID", jobProfileID) :
                new ObjectParameter("JobProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobProfileSelectById_Result>("usp_JobProfileSelectById", jobProfileIDParameter);
        }
    
        public virtual ObjectResult<usp_ApplicantAchievementsAndAssociationsSelectById_Result> usp_ApplicantAchievementsAndAssociationsSelectById(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicantAchievementsAndAssociationsSelectById_Result>("usp_ApplicantAchievementsAndAssociationsSelectById", applicantIdParameter);
        }
    
        public virtual ObjectResult<usp_ApplicantEducationSelectById_Result> usp_ApplicantEducationSelectById(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicantEducationSelectById_Result>("usp_ApplicantEducationSelectById", applicantIdParameter);
        }
    
        public virtual ObjectResult<usp_ApplicantEmploymentHistorySelectById_Result> usp_ApplicantEmploymentHistorySelectById(Nullable<int> applicantId)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicantEmploymentHistorySelectById_Result>("usp_ApplicantEmploymentHistorySelectById", applicantIdParameter);
        }
    
        public virtual ObjectResult<usp_JobProfileGetPreview_Result> usp_JobProfileGetPreview(Nullable<int> jobProfileId)
        {
            var jobProfileIdParameter = jobProfileId.HasValue ?
                new ObjectParameter("JobProfileId", jobProfileId) :
                new ObjectParameter("JobProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobProfileGetPreview_Result>("usp_JobProfileGetPreview", jobProfileIdParameter);
        }
    
        public virtual int usp_CertificationLicensesInsert(Nullable<int> companyId, Nullable<int> userId, Nullable<int> type, string name, Nullable<int> certification, string licenceNumber, Nullable<int> licenseCountry, Nullable<int> licenceState, string school, Nullable<int> endorsements, Nullable<int> areas, string fileName, Nullable<int> document, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> renewalDate, Nullable<System.DateTime> expirationDate, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var certificationParameter = certification.HasValue ?
                new ObjectParameter("Certification", certification) :
                new ObjectParameter("Certification", typeof(int));
    
            var licenceNumberParameter = licenceNumber != null ?
                new ObjectParameter("LicenceNumber", licenceNumber) :
                new ObjectParameter("LicenceNumber", typeof(string));
    
            var licenseCountryParameter = licenseCountry.HasValue ?
                new ObjectParameter("LicenseCountry", licenseCountry) :
                new ObjectParameter("LicenseCountry", typeof(int));
    
            var licenceStateParameter = licenceState.HasValue ?
                new ObjectParameter("LicenceState", licenceState) :
                new ObjectParameter("LicenceState", typeof(int));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var endorsementsParameter = endorsements.HasValue ?
                new ObjectParameter("Endorsements", endorsements) :
                new ObjectParameter("Endorsements", typeof(int));
    
            var areasParameter = areas.HasValue ?
                new ObjectParameter("Areas", areas) :
                new ObjectParameter("Areas", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var documentParameter = document.HasValue ?
                new ObjectParameter("Document", document) :
                new ObjectParameter("Document", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var renewalDateParameter = renewalDate.HasValue ?
                new ObjectParameter("RenewalDate", renewalDate) :
                new ObjectParameter("RenewalDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CertificationLicensesInsert", companyIdParameter, userIdParameter, typeParameter, nameParameter, certificationParameter, licenceNumberParameter, licenseCountryParameter, licenceStateParameter, schoolParameter, endorsementsParameter, areasParameter, fileNameParameter, documentParameter, issueDateParameter, renewalDateParameter, expirationDateParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int usp_CertificationLicensesUpdate(Nullable<int> companyId, Nullable<int> userId, Nullable<int> certificationLicensesId, Nullable<int> type, string name, Nullable<int> certification, string licenceNumber, Nullable<int> licenseCountry, Nullable<int> licenceState, string school, Nullable<int> endorsements, Nullable<int> areas, Nullable<int> document, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> renewalDate, Nullable<System.DateTime> expirationDate, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var certificationLicensesIdParameter = certificationLicensesId.HasValue ?
                new ObjectParameter("CertificationLicensesId", certificationLicensesId) :
                new ObjectParameter("CertificationLicensesId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var certificationParameter = certification.HasValue ?
                new ObjectParameter("Certification", certification) :
                new ObjectParameter("Certification", typeof(int));
    
            var licenceNumberParameter = licenceNumber != null ?
                new ObjectParameter("LicenceNumber", licenceNumber) :
                new ObjectParameter("LicenceNumber", typeof(string));
    
            var licenseCountryParameter = licenseCountry.HasValue ?
                new ObjectParameter("LicenseCountry", licenseCountry) :
                new ObjectParameter("LicenseCountry", typeof(int));
    
            var licenceStateParameter = licenceState.HasValue ?
                new ObjectParameter("LicenceState", licenceState) :
                new ObjectParameter("LicenceState", typeof(int));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var endorsementsParameter = endorsements.HasValue ?
                new ObjectParameter("Endorsements", endorsements) :
                new ObjectParameter("Endorsements", typeof(int));
    
            var areasParameter = areas.HasValue ?
                new ObjectParameter("Areas", areas) :
                new ObjectParameter("Areas", typeof(int));
    
            var documentParameter = document.HasValue ?
                new ObjectParameter("Document", document) :
                new ObjectParameter("Document", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var renewalDateParameter = renewalDate.HasValue ?
                new ObjectParameter("RenewalDate", renewalDate) :
                new ObjectParameter("RenewalDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CertificationLicensesUpdate", companyIdParameter, userIdParameter, certificationLicensesIdParameter, typeParameter, nameParameter, certificationParameter, licenceNumberParameter, licenseCountryParameter, licenceStateParameter, schoolParameter, endorsementsParameter, areasParameter, documentParameter, issueDateParameter, renewalDateParameter, expirationDateParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int usp_UpdateHireStatusofEmployee(Nullable<int> userId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateHireStatusofEmployee", userIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_JobRecruiterSelectByJobId_Result> usp_JobRecruiterSelectByJobId(Nullable<int> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JobRecruiterSelectByJobId_Result>("usp_JobRecruiterSelectByJobId", jobIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeTaxInsert_Result> usp_EmployeeTaxInsert(Nullable<int> userId, Nullable<int> companyId, Nullable<int> federalWithholdingStatus, string federalExemptions, string federalWithholdings, Nullable<int> federalBlock, Nullable<int> federalMedBlock, Nullable<int> stateTaxesLiveinCountryId, Nullable<int> stateTaxesLiveinStateId, Nullable<int> stateTaxesWorkinCountryId, Nullable<int> stateTaxesWorkinStateId, Nullable<int> stateTaxesWithholdingStatus, string stateTaxesExemptions, string stateTaxesAdditionalWithholding, Nullable<int> stateTaxesTaxBlock, Nullable<int> stateTaxesSUISDIBlock, Nullable<int> stateTaxesSchoolDistrict, Nullable<int> stateTaxesSchoolBlock, Nullable<int> localTaxesWithholdingStatus, string localTaxesAllowancesorExemptions, string localTaxesAdditionalWithholdingsAmount, string localTaxesAdditionalWithholdingsPercentage, Nullable<bool> isLocalTaxExempted, string createdBy, string modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var federalWithholdingStatusParameter = federalWithholdingStatus.HasValue ?
                new ObjectParameter("FederalWithholdingStatus", federalWithholdingStatus) :
                new ObjectParameter("FederalWithholdingStatus", typeof(int));
    
            var federalExemptionsParameter = federalExemptions != null ?
                new ObjectParameter("FederalExemptions", federalExemptions) :
                new ObjectParameter("FederalExemptions", typeof(string));
    
            var federalWithholdingsParameter = federalWithholdings != null ?
                new ObjectParameter("FederalWithholdings", federalWithholdings) :
                new ObjectParameter("FederalWithholdings", typeof(string));
    
            var federalBlockParameter = federalBlock.HasValue ?
                new ObjectParameter("FederalBlock", federalBlock) :
                new ObjectParameter("FederalBlock", typeof(int));
    
            var federalMedBlockParameter = federalMedBlock.HasValue ?
                new ObjectParameter("FederalMedBlock", federalMedBlock) :
                new ObjectParameter("FederalMedBlock", typeof(int));
    
            var stateTaxesLiveinCountryIdParameter = stateTaxesLiveinCountryId.HasValue ?
                new ObjectParameter("StateTaxesLiveinCountryId", stateTaxesLiveinCountryId) :
                new ObjectParameter("StateTaxesLiveinCountryId", typeof(int));
    
            var stateTaxesLiveinStateIdParameter = stateTaxesLiveinStateId.HasValue ?
                new ObjectParameter("StateTaxesLiveinStateId", stateTaxesLiveinStateId) :
                new ObjectParameter("StateTaxesLiveinStateId", typeof(int));
    
            var stateTaxesWorkinCountryIdParameter = stateTaxesWorkinCountryId.HasValue ?
                new ObjectParameter("StateTaxesWorkinCountryId", stateTaxesWorkinCountryId) :
                new ObjectParameter("StateTaxesWorkinCountryId", typeof(int));
    
            var stateTaxesWorkinStateIdParameter = stateTaxesWorkinStateId.HasValue ?
                new ObjectParameter("StateTaxesWorkinStateId", stateTaxesWorkinStateId) :
                new ObjectParameter("StateTaxesWorkinStateId", typeof(int));
    
            var stateTaxesWithholdingStatusParameter = stateTaxesWithholdingStatus.HasValue ?
                new ObjectParameter("StateTaxesWithholdingStatus", stateTaxesWithholdingStatus) :
                new ObjectParameter("StateTaxesWithholdingStatus", typeof(int));
    
            var stateTaxesExemptionsParameter = stateTaxesExemptions != null ?
                new ObjectParameter("StateTaxesExemptions", stateTaxesExemptions) :
                new ObjectParameter("StateTaxesExemptions", typeof(string));
    
            var stateTaxesAdditionalWithholdingParameter = stateTaxesAdditionalWithholding != null ?
                new ObjectParameter("StateTaxesAdditionalWithholding", stateTaxesAdditionalWithholding) :
                new ObjectParameter("StateTaxesAdditionalWithholding", typeof(string));
    
            var stateTaxesTaxBlockParameter = stateTaxesTaxBlock.HasValue ?
                new ObjectParameter("StateTaxesTaxBlock", stateTaxesTaxBlock) :
                new ObjectParameter("StateTaxesTaxBlock", typeof(int));
    
            var stateTaxesSUISDIBlockParameter = stateTaxesSUISDIBlock.HasValue ?
                new ObjectParameter("StateTaxesSUISDIBlock", stateTaxesSUISDIBlock) :
                new ObjectParameter("StateTaxesSUISDIBlock", typeof(int));
    
            var stateTaxesSchoolDistrictParameter = stateTaxesSchoolDistrict.HasValue ?
                new ObjectParameter("StateTaxesSchoolDistrict", stateTaxesSchoolDistrict) :
                new ObjectParameter("StateTaxesSchoolDistrict", typeof(int));
    
            var stateTaxesSchoolBlockParameter = stateTaxesSchoolBlock.HasValue ?
                new ObjectParameter("StateTaxesSchoolBlock", stateTaxesSchoolBlock) :
                new ObjectParameter("StateTaxesSchoolBlock", typeof(int));
    
            var localTaxesWithholdingStatusParameter = localTaxesWithholdingStatus.HasValue ?
                new ObjectParameter("LocalTaxesWithholdingStatus", localTaxesWithholdingStatus) :
                new ObjectParameter("LocalTaxesWithholdingStatus", typeof(int));
    
            var localTaxesAllowancesorExemptionsParameter = localTaxesAllowancesorExemptions != null ?
                new ObjectParameter("LocalTaxesAllowancesorExemptions", localTaxesAllowancesorExemptions) :
                new ObjectParameter("LocalTaxesAllowancesorExemptions", typeof(string));
    
            var localTaxesAdditionalWithholdingsAmountParameter = localTaxesAdditionalWithholdingsAmount != null ?
                new ObjectParameter("LocalTaxesAdditionalWithholdingsAmount", localTaxesAdditionalWithholdingsAmount) :
                new ObjectParameter("LocalTaxesAdditionalWithholdingsAmount", typeof(string));
    
            var localTaxesAdditionalWithholdingsPercentageParameter = localTaxesAdditionalWithholdingsPercentage != null ?
                new ObjectParameter("LocalTaxesAdditionalWithholdingsPercentage", localTaxesAdditionalWithholdingsPercentage) :
                new ObjectParameter("LocalTaxesAdditionalWithholdingsPercentage", typeof(string));
    
            var isLocalTaxExemptedParameter = isLocalTaxExempted.HasValue ?
                new ObjectParameter("IsLocalTaxExempted", isLocalTaxExempted) :
                new ObjectParameter("IsLocalTaxExempted", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeTaxInsert_Result>("usp_EmployeeTaxInsert", userIdParameter, companyIdParameter, federalWithholdingStatusParameter, federalExemptionsParameter, federalWithholdingsParameter, federalBlockParameter, federalMedBlockParameter, stateTaxesLiveinCountryIdParameter, stateTaxesLiveinStateIdParameter, stateTaxesWorkinCountryIdParameter, stateTaxesWorkinStateIdParameter, stateTaxesWithholdingStatusParameter, stateTaxesExemptionsParameter, stateTaxesAdditionalWithholdingParameter, stateTaxesTaxBlockParameter, stateTaxesSUISDIBlockParameter, stateTaxesSchoolDistrictParameter, stateTaxesSchoolBlockParameter, localTaxesWithholdingStatusParameter, localTaxesAllowancesorExemptionsParameter, localTaxesAdditionalWithholdingsAmountParameter, localTaxesAdditionalWithholdingsPercentageParameter, isLocalTaxExemptedParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeTaxUpdate_Result> usp_EmployeeTaxUpdate(Nullable<int> userId, Nullable<int> companyId, Nullable<int> federalWithholdingStatus, string federalExemptions, string federalWithholdings, Nullable<int> federalBlock, Nullable<int> federalMedBlock, Nullable<int> stateTaxesLiveinCountryId, Nullable<int> stateTaxesLiveinStateId, Nullable<int> stateTaxesWorkinCountryId, Nullable<int> stateTaxesWorkinStateId, Nullable<int> stateTaxesWithholdingStatus, string stateTaxesExemptions, string stateTaxesAdditionalWithholding, Nullable<int> stateTaxesTaxBlock, Nullable<int> stateTaxesSUISDIBlock, Nullable<int> stateTaxesSchoolDistrict, Nullable<int> stateTaxesSchoolBlock, Nullable<int> localTaxesWithholdingStatus, string localTaxesAllowancesorExemptions, string localTaxesAdditionalWithholdingsAmount, string localTaxesAdditionalWithholdingsPercentage, Nullable<bool> isLocalTaxExempted, string createdBy, string modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var federalWithholdingStatusParameter = federalWithholdingStatus.HasValue ?
                new ObjectParameter("FederalWithholdingStatus", federalWithholdingStatus) :
                new ObjectParameter("FederalWithholdingStatus", typeof(int));
    
            var federalExemptionsParameter = federalExemptions != null ?
                new ObjectParameter("FederalExemptions", federalExemptions) :
                new ObjectParameter("FederalExemptions", typeof(string));
    
            var federalWithholdingsParameter = federalWithholdings != null ?
                new ObjectParameter("FederalWithholdings", federalWithholdings) :
                new ObjectParameter("FederalWithholdings", typeof(string));
    
            var federalBlockParameter = federalBlock.HasValue ?
                new ObjectParameter("FederalBlock", federalBlock) :
                new ObjectParameter("FederalBlock", typeof(int));
    
            var federalMedBlockParameter = federalMedBlock.HasValue ?
                new ObjectParameter("FederalMedBlock", federalMedBlock) :
                new ObjectParameter("FederalMedBlock", typeof(int));
    
            var stateTaxesLiveinCountryIdParameter = stateTaxesLiveinCountryId.HasValue ?
                new ObjectParameter("StateTaxesLiveinCountryId", stateTaxesLiveinCountryId) :
                new ObjectParameter("StateTaxesLiveinCountryId", typeof(int));
    
            var stateTaxesLiveinStateIdParameter = stateTaxesLiveinStateId.HasValue ?
                new ObjectParameter("StateTaxesLiveinStateId", stateTaxesLiveinStateId) :
                new ObjectParameter("StateTaxesLiveinStateId", typeof(int));
    
            var stateTaxesWorkinCountryIdParameter = stateTaxesWorkinCountryId.HasValue ?
                new ObjectParameter("StateTaxesWorkinCountryId", stateTaxesWorkinCountryId) :
                new ObjectParameter("StateTaxesWorkinCountryId", typeof(int));
    
            var stateTaxesWorkinStateIdParameter = stateTaxesWorkinStateId.HasValue ?
                new ObjectParameter("StateTaxesWorkinStateId", stateTaxesWorkinStateId) :
                new ObjectParameter("StateTaxesWorkinStateId", typeof(int));
    
            var stateTaxesWithholdingStatusParameter = stateTaxesWithholdingStatus.HasValue ?
                new ObjectParameter("StateTaxesWithholdingStatus", stateTaxesWithholdingStatus) :
                new ObjectParameter("StateTaxesWithholdingStatus", typeof(int));
    
            var stateTaxesExemptionsParameter = stateTaxesExemptions != null ?
                new ObjectParameter("StateTaxesExemptions", stateTaxesExemptions) :
                new ObjectParameter("StateTaxesExemptions", typeof(string));
    
            var stateTaxesAdditionalWithholdingParameter = stateTaxesAdditionalWithholding != null ?
                new ObjectParameter("StateTaxesAdditionalWithholding", stateTaxesAdditionalWithholding) :
                new ObjectParameter("StateTaxesAdditionalWithholding", typeof(string));
    
            var stateTaxesTaxBlockParameter = stateTaxesTaxBlock.HasValue ?
                new ObjectParameter("StateTaxesTaxBlock", stateTaxesTaxBlock) :
                new ObjectParameter("StateTaxesTaxBlock", typeof(int));
    
            var stateTaxesSUISDIBlockParameter = stateTaxesSUISDIBlock.HasValue ?
                new ObjectParameter("StateTaxesSUISDIBlock", stateTaxesSUISDIBlock) :
                new ObjectParameter("StateTaxesSUISDIBlock", typeof(int));
    
            var stateTaxesSchoolDistrictParameter = stateTaxesSchoolDistrict.HasValue ?
                new ObjectParameter("StateTaxesSchoolDistrict", stateTaxesSchoolDistrict) :
                new ObjectParameter("StateTaxesSchoolDistrict", typeof(int));
    
            var stateTaxesSchoolBlockParameter = stateTaxesSchoolBlock.HasValue ?
                new ObjectParameter("StateTaxesSchoolBlock", stateTaxesSchoolBlock) :
                new ObjectParameter("StateTaxesSchoolBlock", typeof(int));
    
            var localTaxesWithholdingStatusParameter = localTaxesWithholdingStatus.HasValue ?
                new ObjectParameter("LocalTaxesWithholdingStatus", localTaxesWithholdingStatus) :
                new ObjectParameter("LocalTaxesWithholdingStatus", typeof(int));
    
            var localTaxesAllowancesorExemptionsParameter = localTaxesAllowancesorExemptions != null ?
                new ObjectParameter("LocalTaxesAllowancesorExemptions", localTaxesAllowancesorExemptions) :
                new ObjectParameter("LocalTaxesAllowancesorExemptions", typeof(string));
    
            var localTaxesAdditionalWithholdingsAmountParameter = localTaxesAdditionalWithholdingsAmount != null ?
                new ObjectParameter("LocalTaxesAdditionalWithholdingsAmount", localTaxesAdditionalWithholdingsAmount) :
                new ObjectParameter("LocalTaxesAdditionalWithholdingsAmount", typeof(string));
    
            var localTaxesAdditionalWithholdingsPercentageParameter = localTaxesAdditionalWithholdingsPercentage != null ?
                new ObjectParameter("LocalTaxesAdditionalWithholdingsPercentage", localTaxesAdditionalWithholdingsPercentage) :
                new ObjectParameter("LocalTaxesAdditionalWithholdingsPercentage", typeof(string));
    
            var isLocalTaxExemptedParameter = isLocalTaxExempted.HasValue ?
                new ObjectParameter("IsLocalTaxExempted", isLocalTaxExempted) :
                new ObjectParameter("IsLocalTaxExempted", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeTaxUpdate_Result>("usp_EmployeeTaxUpdate", userIdParameter, companyIdParameter, federalWithholdingStatusParameter, federalExemptionsParameter, federalWithholdingsParameter, federalBlockParameter, federalMedBlockParameter, stateTaxesLiveinCountryIdParameter, stateTaxesLiveinStateIdParameter, stateTaxesWorkinCountryIdParameter, stateTaxesWorkinStateIdParameter, stateTaxesWithholdingStatusParameter, stateTaxesExemptionsParameter, stateTaxesAdditionalWithholdingParameter, stateTaxesTaxBlockParameter, stateTaxesSUISDIBlockParameter, stateTaxesSchoolDistrictParameter, stateTaxesSchoolBlockParameter, localTaxesWithholdingStatusParameter, localTaxesAllowancesorExemptionsParameter, localTaxesAdditionalWithholdingsAmountParameter, localTaxesAdditionalWithholdingsPercentageParameter, isLocalTaxExemptedParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<string> usp_EmployeeOSHAInsert(Nullable<int> userId, Nullable<int> companyId, Nullable<int> caseNumber, Nullable<System.DateTime> incidentDateTime, Nullable<bool> isNotReported, string medicalCosts, string advisor, Nullable<System.DateTime> caseClosedOn, string completedBy, string workPhone, Nullable<System.DateTime> filedOn, string claimType, string outCome, Nullable<bool> isEmployeeinEmergency, Nullable<bool> isEmployeeInPatient, string physician, string street, string facility, string city, Nullable<int> countryId, Nullable<int> stateId, string zip, string incidentDetailsMisc1, string incidentDetailsMisc2, string incidentDetailsMisc3, string injuryDetailsMisc1, string injuryDetailsMisc2, string injuryDetailsMisc3, string createdBy, string modifiedBy, Nullable<int> jobTitle, ObjectParameter oshaDetailId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var caseNumberParameter = caseNumber.HasValue ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(int));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var isNotReportedParameter = isNotReported.HasValue ?
                new ObjectParameter("IsNotReported", isNotReported) :
                new ObjectParameter("IsNotReported", typeof(bool));
    
            var medicalCostsParameter = medicalCosts != null ?
                new ObjectParameter("MedicalCosts", medicalCosts) :
                new ObjectParameter("MedicalCosts", typeof(string));
    
            var advisorParameter = advisor != null ?
                new ObjectParameter("Advisor", advisor) :
                new ObjectParameter("Advisor", typeof(string));
    
            var caseClosedOnParameter = caseClosedOn.HasValue ?
                new ObjectParameter("CaseClosedOn", caseClosedOn) :
                new ObjectParameter("CaseClosedOn", typeof(System.DateTime));
    
            var completedByParameter = completedBy != null ?
                new ObjectParameter("CompletedBy", completedBy) :
                new ObjectParameter("CompletedBy", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var filedOnParameter = filedOn.HasValue ?
                new ObjectParameter("FiledOn", filedOn) :
                new ObjectParameter("FiledOn", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var outComeParameter = outCome != null ?
                new ObjectParameter("OutCome", outCome) :
                new ObjectParameter("OutCome", typeof(string));
    
            var isEmployeeinEmergencyParameter = isEmployeeinEmergency.HasValue ?
                new ObjectParameter("IsEmployeeinEmergency", isEmployeeinEmergency) :
                new ObjectParameter("IsEmployeeinEmergency", typeof(bool));
    
            var isEmployeeInPatientParameter = isEmployeeInPatient.HasValue ?
                new ObjectParameter("IsEmployeeInPatient", isEmployeeInPatient) :
                new ObjectParameter("IsEmployeeInPatient", typeof(bool));
    
            var physicianParameter = physician != null ?
                new ObjectParameter("Physician", physician) :
                new ObjectParameter("Physician", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var facilityParameter = facility != null ?
                new ObjectParameter("Facility", facility) :
                new ObjectParameter("Facility", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var incidentDetailsMisc1Parameter = incidentDetailsMisc1 != null ?
                new ObjectParameter("IncidentDetailsMisc1", incidentDetailsMisc1) :
                new ObjectParameter("IncidentDetailsMisc1", typeof(string));
    
            var incidentDetailsMisc2Parameter = incidentDetailsMisc2 != null ?
                new ObjectParameter("IncidentDetailsMisc2", incidentDetailsMisc2) :
                new ObjectParameter("IncidentDetailsMisc2", typeof(string));
    
            var incidentDetailsMisc3Parameter = incidentDetailsMisc3 != null ?
                new ObjectParameter("IncidentDetailsMisc3", incidentDetailsMisc3) :
                new ObjectParameter("IncidentDetailsMisc3", typeof(string));
    
            var injuryDetailsMisc1Parameter = injuryDetailsMisc1 != null ?
                new ObjectParameter("InjuryDetailsMisc1", injuryDetailsMisc1) :
                new ObjectParameter("InjuryDetailsMisc1", typeof(string));
    
            var injuryDetailsMisc2Parameter = injuryDetailsMisc2 != null ?
                new ObjectParameter("InjuryDetailsMisc2", injuryDetailsMisc2) :
                new ObjectParameter("InjuryDetailsMisc2", typeof(string));
    
            var injuryDetailsMisc3Parameter = injuryDetailsMisc3 != null ?
                new ObjectParameter("InjuryDetailsMisc3", injuryDetailsMisc3) :
                new ObjectParameter("InjuryDetailsMisc3", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var jobTitleParameter = jobTitle.HasValue ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_EmployeeOSHAInsert", userIdParameter, companyIdParameter, caseNumberParameter, incidentDateTimeParameter, isNotReportedParameter, medicalCostsParameter, advisorParameter, caseClosedOnParameter, completedByParameter, workPhoneParameter, filedOnParameter, claimTypeParameter, outComeParameter, isEmployeeinEmergencyParameter, isEmployeeInPatientParameter, physicianParameter, streetParameter, facilityParameter, cityParameter, countryIdParameter, stateIdParameter, zipParameter, incidentDetailsMisc1Parameter, incidentDetailsMisc2Parameter, incidentDetailsMisc3Parameter, injuryDetailsMisc1Parameter, injuryDetailsMisc2Parameter, injuryDetailsMisc3Parameter, createdByParameter, modifiedByParameter, jobTitleParameter, oshaDetailId);
        }
    
        public virtual ObjectResult<usp_EmployeeOSHASelect_Result> usp_EmployeeOSHASelect(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeOSHASelect_Result>("usp_EmployeeOSHASelect", userIdParameter, companyIdParameter);
        }
    
        public virtual int usp_SuperAdminUpdate(Nullable<int> userID, string firstName, string lastName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SuperAdminUpdate", userIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int usp_EmployeeGoalInsert(string assignedTo, string assignedBy, string status, string goalDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string indicator, Nullable<double> value, Nullable<int> reminder, Nullable<double> incentive, Nullable<bool> prorate, Nullable<int> companyId, Nullable<int> recurrenceschedule, Nullable<bool> isExcludeSunday, Nullable<bool> isExcludeSaturdaysunday, Nullable<System.DateTime> time, Nullable<bool> isOneTimeGoal, Nullable<bool> isGoalIncentive, Nullable<System.DateTime> clientDateTime, string timeZone)
        {
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var assignedByParameter = assignedBy != null ?
                new ObjectParameter("AssignedBy", assignedBy) :
                new ObjectParameter("AssignedBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var goalDescriptionParameter = goalDescription != null ?
                new ObjectParameter("GoalDescription", goalDescription) :
                new ObjectParameter("GoalDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var indicatorParameter = indicator != null ?
                new ObjectParameter("Indicator", indicator) :
                new ObjectParameter("Indicator", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(double));
    
            var reminderParameter = reminder.HasValue ?
                new ObjectParameter("Reminder", reminder) :
                new ObjectParameter("Reminder", typeof(int));
    
            var incentiveParameter = incentive.HasValue ?
                new ObjectParameter("Incentive", incentive) :
                new ObjectParameter("Incentive", typeof(double));
    
            var prorateParameter = prorate.HasValue ?
                new ObjectParameter("prorate", prorate) :
                new ObjectParameter("prorate", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var recurrencescheduleParameter = recurrenceschedule.HasValue ?
                new ObjectParameter("Recurrenceschedule", recurrenceschedule) :
                new ObjectParameter("Recurrenceschedule", typeof(int));
    
            var isExcludeSundayParameter = isExcludeSunday.HasValue ?
                new ObjectParameter("IsExcludeSunday", isExcludeSunday) :
                new ObjectParameter("IsExcludeSunday", typeof(bool));
    
            var isExcludeSaturdaysundayParameter = isExcludeSaturdaysunday.HasValue ?
                new ObjectParameter("IsExcludeSaturdaysunday", isExcludeSaturdaysunday) :
                new ObjectParameter("IsExcludeSaturdaysunday", typeof(bool));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            var isOneTimeGoalParameter = isOneTimeGoal.HasValue ?
                new ObjectParameter("IsOneTimeGoal", isOneTimeGoal) :
                new ObjectParameter("IsOneTimeGoal", typeof(bool));
    
            var isGoalIncentiveParameter = isGoalIncentive.HasValue ?
                new ObjectParameter("IsGoalIncentive", isGoalIncentive) :
                new ObjectParameter("IsGoalIncentive", typeof(bool));
    
            var clientDateTimeParameter = clientDateTime.HasValue ?
                new ObjectParameter("ClientDateTime", clientDateTime) :
                new ObjectParameter("ClientDateTime", typeof(System.DateTime));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeGoalInsert", assignedToParameter, assignedByParameter, statusParameter, goalDescriptionParameter, startDateParameter, endDateParameter, indicatorParameter, valueParameter, reminderParameter, incentiveParameter, prorateParameter, companyIdParameter, recurrencescheduleParameter, isExcludeSundayParameter, isExcludeSaturdaysundayParameter, timeParameter, isOneTimeGoalParameter, isGoalIncentiveParameter, clientDateTimeParameter, timeZoneParameter);
        }
    
        public virtual ObjectResult<usp_TalentManagementSelect_Result> usp_TalentManagementSelect(Nullable<int> companyId, Nullable<int> talentManagementId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var talentManagementIdParameter = talentManagementId.HasValue ?
                new ObjectParameter("TalentManagementId", talentManagementId) :
                new ObjectParameter("TalentManagementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TalentManagementSelect_Result>("usp_TalentManagementSelect", companyIdParameter, talentManagementIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeEmergencyContactSelectAll_Result> usp_EmployeeEmergencyContactSelectAll(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeEmergencyContactSelectAll_Result>("usp_EmployeeEmergencyContactSelectAll", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeFolderSelect_Result> usp_EmployeeFolderSelect(Nullable<int> companyId, Nullable<int> employeeFolderId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeFolderIdParameter = employeeFolderId.HasValue ?
                new ObjectParameter("EmployeeFolderId", employeeFolderId) :
                new ObjectParameter("EmployeeFolderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeFolderSelect_Result>("usp_EmployeeFolderSelect", companyIdParameter, employeeFolderIdParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeFolderSelectAll_Result> usp_EmployeeFolderSelectAll(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeFolderSelectAll_Result>("usp_EmployeeFolderSelectAll", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_CertificationLicensesSelectAll_Result> usp_CertificationLicensesSelectAll(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertificationLicensesSelectAll_Result>("usp_CertificationLicensesSelectAll", userIdParameter);
        }
    
        public virtual ObjectResult<usp_CertificationLicensesSelect_Result> usp_CertificationLicensesSelect(Nullable<int> companyId, Nullable<int> certificationLicensesId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var certificationLicensesIdParameter = certificationLicensesId.HasValue ?
                new ObjectParameter("CertificationLicensesId", certificationLicensesId) :
                new ObjectParameter("CertificationLicensesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertificationLicensesSelect_Result>("usp_CertificationLicensesSelect", companyIdParameter, certificationLicensesIdParameter);
        }
    
        public virtual int usp_CompetencyInsert(Nullable<int> companyId, string competencySetName, string category, string points, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, ObjectParameter returnId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var competencySetNameParameter = competencySetName != null ?
                new ObjectParameter("CompetencySetName", competencySetName) :
                new ObjectParameter("CompetencySetName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var pointsParameter = points != null ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CompetencyInsert", companyIdParameter, competencySetNameParameter, categoryParameter, pointsParameter, createdByParameter, createdOnParameter, returnId);
        }
    }
}
